{
    "id": "VRust",
    "user": "O2Lab VRust Team",
    "crate": "level1",
    "git-loc": "https://github.com/parasol-aser/vrust",
    "timestamp": "1645810189",
    "int_cnt": 1,
    "chk_cnt": 1,
    "typ_cnt": 0,
    "oth_cnt": 0,
    "total": 2,
    "errors": [
      {
        "id": "0",
        "category": "IntegerFlow",
        "severity": "Critical",
        "location": "processor::withdraw",
        "code": "level1/src/processor.rs:181:5: 181:50 \n\t**wallet_info.lamports.borrow_mut() -= amount",
        "context": "level1/src/processor.rs:153:1: 189:2 \n\tfn withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {\n    msg!(\"withdraw {}\", amount);\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let destination_info = next_account_info(account_info_iter)?;\n    let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?;\n\n    assert_eq!(wallet_info.owner, program_id);\n    assert_eq!(wallet.authority, *authority_info.key);\n\n    let res = check_assert(authority_info.is_signer);\n    if res.is_ok(){\n        msg!(\"check assert success.\");\n    }\n\n    // if !authority_info.is_signer { // authority_info authority owner admin manager \n    //     return  Err(ProgramError::InsufficientFunds);\n    // }\n\n    // Mitigation:\n    // assert!(authority_info.is_signer);    // assert_eq!(authority_info.is_signer, true);\n    // assert_eq!(authority_info.is_signer, true);\n\n    if amount > **wallet_info.lamports.borrow_mut() {\n        return Err(ProgramError::InsufficientFunds);\n    }\n\n    **wallet_info.lamports.borrow_mut() -= amount;\n    **destination_info.lamports.borrow_mut() += amount;\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
        "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::withdraw(){// level1/src/processor.rs:153:1: 189:2 }\n",
        "status": "UnResolved",
        "description": "",
        "link": "",
        "alleviation": ""
      },
      {
        "id": "1",
        "category": "MissingKeyCheck",
        "severity": "Critical",
        "location": "processor::withdraw",
        "code": "level1/src/processor.rs",
        "context": "level1/src/processor.rs:153:1: 189:2 \n\tfn withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {\n    msg!(\"withdraw {}\", amount);\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let destination_info = next_account_info(account_info_iter)?;\n    let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?;\n\n    assert_eq!(wallet_info.owner, program_id);\n    assert_eq!(wallet.authority, *authority_info.key);\n\n    let res = check_assert(authority_info.is_signer);\n    if res.is_ok(){\n        msg!(\"check assert success.\");\n    }\n\n    // if !authority_info.is_signer { // authority_info authority owner admin manager \n    //     return  Err(ProgramError::InsufficientFunds);\n    // }\n\n    // Mitigation:\n    // assert!(authority_info.is_signer);    // assert_eq!(authority_info.is_signer, true);\n    // assert_eq!(authority_info.is_signer, true);\n\n    if amount > **wallet_info.lamports.borrow_mut() {\n        return Err(ProgramError::InsufficientFunds);\n    }\n\n    **wallet_info.lamports.borrow_mut() -= amount;\n    **destination_info.lamports.borrow_mut() += amount;\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
        "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::withdraw(){// level1/src/processor.rs:153:1: 189:2 }\n",
        "status": "GitHub Link to be added.",
        "description": "",
        "link": "",
        "alleviation": ""
      }
    ]
  }