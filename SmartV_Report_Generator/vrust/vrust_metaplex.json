{
    "id": "VRust",
    "user": "O2Lab VRust Team",
    "crate": "mpl_metaplex",
    "git-loc": "https://github.com/parasol-aser/vrust",
    "timestamp": "1645219698",
    "int_cnt": 174,
    "chk_cnt": 10,
    "typ_cnt": 0,
    "oth_cnt": 35,
    "errors": [
      {
        "type": "IntegerCve",
        "id": "INT_CVE_0",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store::process_set_store_v2(){// metaplex/program/src/processor/set_store.rs:122:1: 193:2 }\n\t\t\tfn processor::set_store::set_store_logic(){// metaplex/program/src/processor/set_store.rs:19:1: 88:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_1",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store::process_set_store_v2(){// metaplex/program/src/processor/set_store.rs:122:1: 193:2 }\n\t\t\tfn processor::set_store::set_store_logic(){// metaplex/program/src/processor/set_store.rs:19:1: 88:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_2",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store::process_set_store_v2(){// metaplex/program/src/processor/set_store.rs:122:1: 193:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_3",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store::process_set_store_v2(){// metaplex/program/src/processor/set_store.rs:122:1: 193:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_4",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_auction_cache::process_set_auction_cache(){// metaplex/program/src/processor/set_auction_cache.rs:19:1: 143:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_5",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_auction_cache::process_set_auction_cache(){// metaplex/program/src/processor/set_auction_cache.rs:19:1: 143:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_6",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store_index::process_set_store_index(){// metaplex/program/src/processor/set_store_index.rs:22:1: 217:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_7",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store_index::process_set_store_index(){// metaplex/program/src/processor/set_store_index.rs:22:1: 217:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_8",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "processor::set_store_index::process_set_store_index",
        "code": "metaplex/program/src/processor/set_store_index.rs:169:49: 169:61 \n\toffset_u - 1",
        "context": "metaplex/program/src/processor/set_store_index.rs:22:1: 217:2 \n\tpub fn process_set_store_index<'a>(\n    program_id: &'a Pubkey,\n    accounts: &'a [AccountInfo<'a>],\n    args: SetStoreIndexArgs,\n) -> ProgramResult {\n    let SetStoreIndexArgs { offset, page } = args;\n\n    let offset_u = offset as usize;\n\n    let account_info_iter = &mut accounts.iter();\n\n    let store_index_info = next_account_info(account_info_iter)?;\n    let payer_info = next_account_info(account_info_iter)?;\n    let auction_cache_info = next_account_info(account_info_iter)?;\n    let store_info = next_account_info(account_info_iter)?;\n    let system_info = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n    let above_cache_info = next_account_info(account_info_iter).ok();\n    let below_cache_info = next_account_info(account_info_iter).ok();\n    let _store = Store::from_account_info(store_info)?;\n    let auction_cache = AuctionCache::from_account_info(auction_cache_info)?;\n\n    let mut below_cache: Option<AuctionCache> = None;\n    let mut above_cache: Option<AuctionCache> = None;\n\n    assert_signer(payer_info)?;\n    assert_owned_by(store_info, program_id)?;\n    assert_owned_by(auction_cache_info, program_id)?;\n\n    if system_info.key != &solana_program::system_program::id() {\n        return Err(MetaplexError::InvalidSystemProgram.into());\n    }\n\n    assert_derivation(\n        program_id,\n        auction_cache_info,\n        &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            store_info.key.as_ref(),\n            auction_cache.auction.as_ref(),\n            CACHE.as_bytes(),\n        ],\n    )?;\n\n    if let Some(below) = below_cache_info {\n        let unwrapped = AuctionCache::from_account_info(below)?;\n\n        assert_derivation(\n            program_id,\n            below,\n            &[\n                PREFIX.as_bytes(),\n                program_id.as_ref(),\n                store_info.key.as_ref(),\n                unwrapped.auction.as_ref(),\n                CACHE.as_bytes(),\n            ],\n        )?;\n        assert_owned_by(below, program_id)?;\n\n        below_cache = Some(unwrapped);\n    }\n\n    if let Some(above) = &above_cache_info {\n        let unwrapped = AuctionCache::from_account_info(above)?;\n\n        assert_derivation(\n            program_id,\n            above,\n            &[\n                PREFIX.as_bytes(),\n                program_id.as_ref(),\n                store_info.key.as_ref(),\n                unwrapped.auction.as_ref(),\n                CACHE.as_bytes(),\n            ],\n        )?;\n        assert_owned_by(above, program_id)?;\n\n        above_cache = Some(unwrapped);\n    }\n\n    let as_string = page.to_string();\n    let bump = assert_derivation(\n        program_id,\n        store_index_info,\n        &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            store_info.key.as_ref(),\n            INDEX.as_bytes(),\n            as_string.as_bytes(),\n        ],\n    )?;\n\n    if store_index_info.data_is_empty() {\n        let signer_seeds = &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            store_info.key.as_ref(),\n            INDEX.as_bytes(),\n            as_string.as_bytes(),\n            &[bump],\n        ];\n\n        create_or_allocate_account_raw(\n            *program_id,\n            store_index_info,\n            rent_info,\n            system_info,\n            payer_info,\n            MAX_STORE_INDEXER_SIZE,\n            signer_seeds,\n        )?;\n    }\n\n    assert_owned_by(store_index_info, program_id)?;\n\n    let mut indexer = StoreIndexer::from_account_info(store_index_info)?;\n    indexer.key = Key::StoreIndexerV1;\n    indexer.store = *store_info.key;\n    indexer.page = page;\n\n    if offset_u > indexer.auction_caches.len() {\n        return Err(MetaplexError::InvalidCacheOffset.into());\n    }\n\n    if indexer.auction_caches.len() > 0 && offset_u < indexer.auction_caches.len() - 1 {\n        let above_key = &indexer.auction_caches[offset_u];\n        if let Some(abo) = &above_cache {\n            if let Some(above_cache_info_unwrapped) = above_cache_info {\n                if above_cache_info_unwrapped.key != above_key {\n                    return Err(MetaplexError::CacheMismatch.into());\n                } else if abo.timestamp > auction_cache.timestamp {\n                    return Err(MetaplexError::CacheAboveIsNewer.into());\n                }\n            } else {\n                msg!(\"Should never happen\");\n                return Err(MetaplexError::InvalidOperation.into());\n            }\n        } else {\n            return Err(MetaplexError::ExpectedAboveAuctionCacheToBeProvided.into());\n        }\n    }\n\n    if offset_u > 0 {\n        let below_key = &indexer.auction_caches[offset_u - 1];\n        // special case where you're at top of stack, there is no above\n        let cache_used_for_below = if offset_u == indexer.auction_caches.len() - 1 {\n            &above_cache\n        } else {\n            &below_cache\n        };\n\n        let cache_info_used_for_below = if offset_u == indexer.auction_caches.len() - 1 {\n            above_cache_info\n        } else {\n            below_cache_info\n        };\n\n        if let Some(bel) = cache_used_for_below {\n            if let Some(below_cache_info_unwrapped) = cache_info_used_for_below {\n                if below_cache_info_unwrapped.key != below_key {\n                    return Err(MetaplexError::CacheMismatch.into());\n                } else if bel.timestamp < auction_cache.timestamp {\n                    return Err(MetaplexError::CacheBelowIsOlder.into());\n                }\n            } else {\n                msg!(\"Should never happen\");\n                return Err(MetaplexError::InvalidOperation.into());\n            }\n        } else {\n            return Err(MetaplexError::ExpectedAboveAuctionCacheToBeProvided.into());\n        }\n    }\n\n    let mut new_vec = vec![];\n\n    for n in 0..offset_u {\n        new_vec.push(indexer.auction_caches[n])\n    }\n\n    new_vec.push(*auction_cache_info.key);\n\n    for n in offset_u..indexer.auction_caches.len() {\n        if new_vec.len() == MAX_INDEXED_ELEMENTS {\n            break;\n        }\n        new_vec.push(indexer.auction_caches[n])\n    }\n\n    indexer.auction_caches = new_vec;\n    indexer.serialize(&mut *store_index_info.data.borrow_mut())?;\n    Ok(())\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store_index::process_set_store_index(){// metaplex/program/src/processor/set_store_index.rs:22:1: 217:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_9",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_10",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_11",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_12",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn processor::redeem_participation_bid::v2_validation(){// metaplex/program/src/processor/redeem_participation_bid.rs:65:1: 129:2 }\n\t\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_13",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn processor::redeem_participation_bid::v2_validation(){// metaplex/program/src/processor/redeem_participation_bid.rs:65:1: 129:2 }\n\t\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_14",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "utils::common_redeem_finish",
        "code": "metaplex/program/src/utils.rs:742:17: 742:59 \n\t1 + 9 + 32 + 1 + token_type_count as usize",
        "context": "metaplex/program/src/utils.rs:702:1: 776:2 \n\tpub fn common_redeem_finish(args: CommonRedeemFinishArgs) -> ProgramResult {\n    let CommonRedeemFinishArgs {\n        program_id,\n        auction_manager,\n        auction_manager_info,\n        bidder_metadata_info,\n        rent_info,\n        system_info,\n        payer_info,\n        bid_redemption_info,\n        vault_info,\n        safety_deposit_config_info,\n        winning_index,\n        redemption_bump_seed,\n        bid_redeemed,\n        participation_redeemed,\n        winning_item_index,\n        overwrite_win_index,\n    } = args;\n\n    if (bid_redeemed || participation_redeemed) && overwrite_win_index.is_none() {\n        let auction_key = auction_manager.auction();\n        let redemption_seeds = &[\n            PREFIX.as_bytes(),\n            auction_key.as_ref(),\n            bidder_metadata_info.key.as_ref(),\n            &[redemption_bump_seed],\n        ];\n\n        let token_type_count = Vault::get_token_type_count(vault_info)\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n\n        if bid_redemption_info.data_is_empty() {\n            create_or_allocate_account_raw(\n                *program_id,\n                &bid_redemption_info,\n                &rent_info,\n                &system_info,\n                &payer_info,\n                1 + 9 + 32 + 1 + token_type_count as usize,\n                redemption_seeds,\n            )?;\n        }\n\n        BidRedemptionTicket::save(\n            bid_redemption_info,\n            participation_redeemed,\n            safety_deposit_config_info,\n            winning_index,\n            *auction_manager_info.key,\n            auction_manager.key(),\n        )?;\n    }\n\n    msg!(\"About to pass through the eye of the needle\");\n    sol_log_compute_units();\n\n    if bid_redeemed {\n        if let Some(index) = winning_index {\n            // There should never be a winning item index for V2...its a nonsensical concept, but we set it anyway for backwards compatibility.\n            if let Some(item_index) = winning_item_index {\n                auction_manager.fast_save(auction_manager_info, index, item_index);\n            }\n        }\n    } else if participation_redeemed && auction_manager.key() == Key::AuctionManagerV2 {\n        // AV2s can be saved (and set to disbursing) even in open edition auctions...a bug in V1 that we were okay with\n        // for speed. AV1s never get set to disbursing in Open Edition auctions.\n        if let Some(index) = winning_index {\n            auction_manager.fast_save(auction_manager_info, index, 0);\n        }\n    }\n\n    Ok(())\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_15",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_16",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_17",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_18",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_19",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::AuctionWinnerTokenTypeTracker::from_account_info",
        "code": "metaplex/program/src/state.rs:1303:13: 1303:43 \n\toffset += amount_type as usize",
        "context": "metaplex/program/src/state.rs:1280:5: 1317:6 \n\tpub fn from_account_info(\n        a: &AccountInfo,\n    ) -> Result<AuctionWinnerTokenTypeTracker, ProgramError> {\n        let data = &mut a.data.borrow();\n        if a.data_len() < BASE_TRACKER_SIZE {\n            return Err(MetaplexError::DataTypeMismatch.into());\n        }\n\n        if data[0] != Key::AuctionWinnerTokenTypeTrackerV1 as u8 {\n            return Err(MetaplexError::DataTypeMismatch.into());\n        }\n\n        let amount_type = AuctionWinnerTokenTypeTracker::get_amount_type(a)?;\n\n        let length_type = AuctionWinnerTokenTypeTracker::get_length_type(a)?;\n\n        let length_of_array = AuctionWinnerTokenTypeTracker::get_amount_range_len(a);\n\n        let mut offset: usize = 7;\n        let mut amount_ranges = vec![];\n        for _ in 0..length_of_array {\n            let amount = get_number_from_data(data, amount_type, offset);\n\n            offset += amount_type as usize;\n\n            let length = get_number_from_data(data, length_type, offset);\n\n            amount_ranges.push(AmountRange(amount, length));\n            offset += length_type as usize;\n        }\n\n        Ok(AuctionWinnerTokenTypeTracker {\n            key: Key::AuctionWinnerTokenTypeTrackerV1,\n            amount_type,\n            length_type,\n            amount_ranges,\n        })\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::from_account_info(){// metaplex/program/src/state.rs:1280:5: 1317:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_20",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::get_number_from_data",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:65:40: 65:46 \n\toffset",
        "context": "metaplex/program/src/state.rs:862:1: 870:2 \n\tfn get_number_from_data(data: &Ref<&mut [u8]>, data_type: TupleNumericType, offset: usize) -> u64 {\n    return match data_type {\n        TupleNumericType::U8 => data[offset] as u64,\n        TupleNumericType::U16 => u16::from_le_bytes(*array_ref![data, offset, 2]) as u64,\n        TupleNumericType::U32 => u32::from_le_bytes(*array_ref![data, offset, 4]) as u64,\n        TupleNumericType::U64 => u64::from_le_bytes(*array_ref![data, offset, 8]),\n        _ => 0,\n    };\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::from_account_info(){// metaplex/program/src/state.rs:1280:5: 1317:6 }\n\t\t\t\tfn state::get_number_from_data(){// metaplex/program/src/state.rs:862:1: 870:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_21",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::get_number_from_data",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:65:40: 65:46 \n\toffset",
        "context": "metaplex/program/src/state.rs:862:1: 870:2 \n\tfn get_number_from_data(data: &Ref<&mut [u8]>, data_type: TupleNumericType, offset: usize) -> u64 {\n    return match data_type {\n        TupleNumericType::U8 => data[offset] as u64,\n        TupleNumericType::U16 => u16::from_le_bytes(*array_ref![data, offset, 2]) as u64,\n        TupleNumericType::U32 => u32::from_le_bytes(*array_ref![data, offset, 4]) as u64,\n        TupleNumericType::U64 => u64::from_le_bytes(*array_ref![data, offset, 8]),\n        _ => 0,\n    };\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::from_account_info(){// metaplex/program/src/state.rs:1280:5: 1317:6 }\n\t\t\t\tfn state::get_number_from_data(){// metaplex/program/src/state.rs:862:1: 870:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_22",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::get_number_from_data",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:65:40: 65:46 \n\toffset",
        "context": "metaplex/program/src/state.rs:862:1: 870:2 \n\tfn get_number_from_data(data: &Ref<&mut [u8]>, data_type: TupleNumericType, offset: usize) -> u64 {\n    return match data_type {\n        TupleNumericType::U8 => data[offset] as u64,\n        TupleNumericType::U16 => u16::from_le_bytes(*array_ref![data, offset, 2]) as u64,\n        TupleNumericType::U32 => u32::from_le_bytes(*array_ref![data, offset, 4]) as u64,\n        TupleNumericType::U64 => u64::from_le_bytes(*array_ref![data, offset, 8]),\n        _ => 0,\n    };\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::from_account_info(){// metaplex/program/src/state.rs:1280:5: 1317:6 }\n\t\t\t\tfn state::get_number_from_data(){// metaplex/program/src/state.rs:862:1: 870:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_23",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::AuctionWinnerTokenTypeTracker::from_account_info",
        "code": "metaplex/program/src/state.rs:1308:13: 1308:43 \n\toffset += length_type as usize",
        "context": "metaplex/program/src/state.rs:1280:5: 1317:6 \n\tpub fn from_account_info(\n        a: &AccountInfo,\n    ) -> Result<AuctionWinnerTokenTypeTracker, ProgramError> {\n        let data = &mut a.data.borrow();\n        if a.data_len() < BASE_TRACKER_SIZE {\n            return Err(MetaplexError::DataTypeMismatch.into());\n        }\n\n        if data[0] != Key::AuctionWinnerTokenTypeTrackerV1 as u8 {\n            return Err(MetaplexError::DataTypeMismatch.into());\n        }\n\n        let amount_type = AuctionWinnerTokenTypeTracker::get_amount_type(a)?;\n\n        let length_type = AuctionWinnerTokenTypeTracker::get_length_type(a)?;\n\n        let length_of_array = AuctionWinnerTokenTypeTracker::get_amount_range_len(a);\n\n        let mut offset: usize = 7;\n        let mut amount_ranges = vec![];\n        for _ in 0..length_of_array {\n            let amount = get_number_from_data(data, amount_type, offset);\n\n            offset += amount_type as usize;\n\n            let length = get_number_from_data(data, length_type, offset);\n\n            amount_ranges.push(AmountRange(amount, length));\n            offset += length_type as usize;\n        }\n\n        Ok(AuctionWinnerTokenTypeTracker {\n            key: Key::AuctionWinnerTokenTypeTrackerV1,\n            amount_type,\n            length_type,\n            amount_ranges,\n        })\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::from_account_info(){// metaplex/program/src/state.rs:1280:5: 1317:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_24",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::assert_supply_logic_check(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:205:1: 381:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_25",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::assert_supply_logic_check(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:205:1: 381:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_26",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::assert_supply_logic_check(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:205:1: 381:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_27",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::AuctionWinnerTokenTypeTracker::save",
        "code": "metaplex/program/src/state.rs:1460:13: 1460:48 \n\toffset += self.amount_type as usize",
        "context": "metaplex/program/src/state.rs:1451:5: 1464:6 \n\tpub fn save(&self, a: &AccountInfo) {\n        let mut data = a.data.borrow_mut();\n        data[0] = Key::AuctionWinnerTokenTypeTrackerV1 as u8;\n        data[1] = self.amount_type as u8;\n        data[2] = self.length_type as u8;\n        *array_mut_ref![data, 3, 4] = (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = 7;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_28",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_length_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:887:1: 900:2 \n\tfn write_length_type(\n    data: &mut RefMut<&mut [u8]>,\n    length_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match length_type {\n        TupleNumericType::U8 => data[offset] = range.1 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.1 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.1 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.1.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n\t\t\t\tfn state::write_length_type(){// metaplex/program/src/state.rs:887:1: 900:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_29",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_length_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:887:1: 900:2 \n\tfn write_length_type(\n    data: &mut RefMut<&mut [u8]>,\n    length_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match length_type {\n        TupleNumericType::U8 => data[offset] = range.1 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.1 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.1 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.1.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n\t\t\t\tfn state::write_length_type(){// metaplex/program/src/state.rs:887:1: 900:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_30",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_length_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:887:1: 900:2 \n\tfn write_length_type(\n    data: &mut RefMut<&mut [u8]>,\n    length_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match length_type {\n        TupleNumericType::U8 => data[offset] = range.1 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.1 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.1 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.1.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n\t\t\t\tfn state::write_length_type(){// metaplex/program/src/state.rs:887:1: 900:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_31",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::AuctionWinnerTokenTypeTracker::save",
        "code": "metaplex/program/src/state.rs:1462:13: 1462:48 \n\toffset += self.length_type as usize",
        "context": "metaplex/program/src/state.rs:1451:5: 1464:6 \n\tpub fn save(&self, a: &AccountInfo) {\n        let mut data = a.data.borrow_mut();\n        data[0] = Key::AuctionWinnerTokenTypeTrackerV1 as u8;\n        data[1] = self.amount_type as u8;\n        data[2] = self.length_type as u8;\n        *array_mut_ref![data, 3, 4] = (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = 7;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_32",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::created_size",
        "code": "metaplex/program/src/state.rs:906:15: 906:70 \n\t(self.amount_type as usize + self.length_type as usize)",
        "context": "metaplex/program/src/state.rs:904:5: 907:6 \n\tpub fn created_size(&self) -> usize {\n        return BASE_SAFETY_CONFIG_SIZE\n            + (self.amount_type as usize + self.length_type as usize) * self.amount_ranges.len();\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::created_size(){// metaplex/program/src/state.rs:904:5: 907:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_33",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::created_size",
        "code": "metaplex/program/src/state.rs:906:15: 906:97 \n\t(self.amount_type as usize + self.length_type as usize) * self.amount_ranges.len()",
        "context": "metaplex/program/src/state.rs:904:5: 907:6 \n\tpub fn created_size(&self) -> usize {\n        return BASE_SAFETY_CONFIG_SIZE\n            + (self.amount_type as usize + self.length_type as usize) * self.amount_ranges.len();\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::created_size(){// metaplex/program/src/state.rs:904:5: 907:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_34",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::created_size",
        "code": "metaplex/program/src/state.rs:905:16: 906:97 \n\tBASE_SAFETY_CONFIG_SIZE\n            + (self.amount_type as usize + self.length_type as usize) * self.amount_ranges.len()",
        "context": "metaplex/program/src/state.rs:904:5: 907:6 \n\tpub fn created_size(&self) -> usize {\n        return BASE_SAFETY_CONFIG_SIZE\n            + (self.amount_type as usize + self.length_type as usize) * self.amount_ranges.len();\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::created_size(){// metaplex/program/src/state.rs:904:5: 907:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_35",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_36",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_37",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_38",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "metaplex/program/src/state.rs:1182:13: 1182:48 \n\toffset += self.amount_type as usize",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_39",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_length_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:887:1: 900:2 \n\tfn write_length_type(\n    data: &mut RefMut<&mut [u8]>,\n    length_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match length_type {\n        TupleNumericType::U8 => data[offset] = range.1 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.1 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.1 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.1.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n\t\t\t\t\tfn state::write_length_type(){// metaplex/program/src/state.rs:887:1: 900:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_40",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_length_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:887:1: 900:2 \n\tfn write_length_type(\n    data: &mut RefMut<&mut [u8]>,\n    length_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match length_type {\n        TupleNumericType::U8 => data[offset] = range.1 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.1 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.1 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.1.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n\t\t\t\t\tfn state::write_length_type(){// metaplex/program/src/state.rs:887:1: 900:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_41",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_length_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:887:1: 900:2 \n\tfn write_length_type(\n    data: &mut RefMut<&mut [u8]>,\n    length_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match length_type {\n        TupleNumericType::U8 => data[offset] = range.1 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.1 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.1 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.1.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n\t\t\t\t\tfn state::write_length_type(){// metaplex/program/src/state.rs:887:1: 900:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_42",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "metaplex/program/src/state.rs:1184:13: 1184:48 \n\toffset += self.length_type as usize",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_43",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "metaplex/program/src/state.rs:1190:22: 1190:32 \n\toffset + 1",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_44",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "metaplex/program/src/state.rs:1191:22: 1191:32 \n\toffset + 2",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_45",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "metaplex/program/src/state.rs:1192:17: 1192:28 \n\toffset += 3",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_46",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "metaplex/program/src/state.rs:1196:47: 1196:57 \n\toffset + 1",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_47",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_48",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "metaplex/program/src/state.rs:1197:25: 1197:36 \n\toffset += 9",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_49",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "metaplex/program/src/state.rs:1201:25: 1201:36 \n\toffset += 1",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_50",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "metaplex/program/src/state.rs:1207:17: 1207:28 \n\toffset += 1",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_51",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "metaplex/program/src/state.rs:1214:39: 1214:49 \n\toffset + 1",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_52",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::SafetyDepositConfig::create",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:1164:5: 1227:6 \n\tpub fn create(&self, a: &AccountInfo, auction_manager_key: &Pubkey) -> ProgramResult {\n        let mut data = a.data.borrow_mut();\n\n        data[0] = Key::SafetyDepositConfigV1 as u8;\n        // for whatever reason, copy_from_slice doesnt do jack here.\n        let as_bytes = auction_manager_key.as_ref();\n        for n in 0..32 {\n            data[n + 1] = as_bytes[n];\n        }\n        *array_mut_ref![data, ORDER_POSITION, 8] = self.order.to_le_bytes();\n        data[WINNING_CONFIG_POSITION] = self.winning_config_type as u8;\n        data[AMOUNT_POSITION] = self.amount_type as u8;\n        data[LENGTH_POSITION] = self.length_type as u8;\n        *array_mut_ref![data, AMOUNT_RANGE_SIZE_POSITION, 4] =\n            (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = AMOUNT_RANGE_FIRST_EL_POSITION;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n\n        match &self.participation_config {\n            Some(val) => {\n                data[offset] = 1;\n                data[offset + 1] = val.winner_constraint as u8;\n                data[offset + 2] = val.non_winning_constraint as u8;\n                offset += 3;\n                match val.fixed_price {\n                    Some(val) => {\n                        data[offset] = 1;\n                        *array_mut_ref![data, offset + 1, 8] = val.to_le_bytes();\n                        offset += 9;\n                    }\n                    None => {\n                        data[offset] = 0;\n                        offset += 1;\n                    }\n                }\n            }\n            None => {\n                data[offset] = 0;\n                offset += 1;\n            }\n        }\n\n        match &self.participation_state {\n            Some(val) => {\n                data[offset] = 1;\n                *array_mut_ref![data, offset + 1, 8] =\n                    val.collected_to_accept_payment.to_le_bytes();\n                //offset += 9;\n            }\n            None => {\n                data[offset] = 0;\n                //offset += 1\n            }\n        }\n\n        // NOTE: Adding more fields? Uncomment the offset adjustments in participation state to keep\n        // the math working.\n        Ok(())\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::validate_safety_deposit_box_v2::process_validate_safety_deposit_box_v2(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:383:1: 533:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::make_safety_deposit_config(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:27:1: 67:2 }\n\t\t\t\tfn state::SafetyDepositConfig::create(){// metaplex/program/src/state.rs:1164:5: 1227:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_53",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_54",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_55",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_56",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::AuctionWinnerTokenTypeTracker::created_size",
        "code": "metaplex/program/src/state.rs:1278:15: 1278:92 \n\t(self.amount_type as usize + self.length_type as usize) * range_size as usize",
        "context": "metaplex/program/src/state.rs:1276:5: 1279:6 \n\tpub fn created_size(&self, range_size: u64) -> usize {\n        return BASE_TRACKER_SIZE\n            + (self.amount_type as usize + self.length_type as usize) * range_size as usize;\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::created_size(){// metaplex/program/src/state.rs:1276:5: 1279:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_57",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::AuctionWinnerTokenTypeTracker::created_size",
        "code": "metaplex/program/src/state.rs:1277:16: 1278:92 \n\tBASE_TRACKER_SIZE\n            + (self.amount_type as usize + self.length_type as usize) * range_size as usize",
        "context": "metaplex/program/src/state.rs:1276:5: 1279:6 \n\tpub fn created_size(&self, range_size: u64) -> usize {\n        return BASE_TRACKER_SIZE\n            + (self.amount_type as usize + self.length_type as usize) * range_size as usize;\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::created_size(){// metaplex/program/src/state.rs:1276:5: 1279:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_58",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_59",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_60",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_61",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_amount_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:872:1: 885:2 \n\tfn write_amount_type(\n    data: &mut RefMut<&mut [u8]>,\n    amount_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match amount_type {\n        TupleNumericType::U8 => data[offset] = range.0 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.0 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.0 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.0.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n\t\t\t\tfn state::write_amount_type(){// metaplex/program/src/state.rs:872:1: 885:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_62",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_amount_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:872:1: 885:2 \n\tfn write_amount_type(\n    data: &mut RefMut<&mut [u8]>,\n    amount_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match amount_type {\n        TupleNumericType::U8 => data[offset] = range.0 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.0 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.0 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.0.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n\t\t\t\tfn state::write_amount_type(){// metaplex/program/src/state.rs:872:1: 885:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_63",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_amount_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:872:1: 885:2 \n\tfn write_amount_type(\n    data: &mut RefMut<&mut [u8]>,\n    amount_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match amount_type {\n        TupleNumericType::U8 => data[offset] = range.0 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.0 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.0 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.0.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n\t\t\t\tfn state::write_amount_type(){// metaplex/program/src/state.rs:872:1: 885:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_64",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::AuctionWinnerTokenTypeTracker::save",
        "code": "metaplex/program/src/state.rs:1460:13: 1460:48 \n\toffset += self.amount_type as usize",
        "context": "metaplex/program/src/state.rs:1451:5: 1464:6 \n\tpub fn save(&self, a: &AccountInfo) {\n        let mut data = a.data.borrow_mut();\n        data[0] = Key::AuctionWinnerTokenTypeTrackerV1 as u8;\n        data[1] = self.amount_type as u8;\n        data[2] = self.length_type as u8;\n        *array_mut_ref![data, 3, 4] = (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = 7;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_65",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_length_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:887:1: 900:2 \n\tfn write_length_type(\n    data: &mut RefMut<&mut [u8]>,\n    length_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match length_type {\n        TupleNumericType::U8 => data[offset] = range.1 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.1 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.1 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.1.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n\t\t\t\tfn state::write_length_type(){// metaplex/program/src/state.rs:887:1: 900:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_66",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_length_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:887:1: 900:2 \n\tfn write_length_type(\n    data: &mut RefMut<&mut [u8]>,\n    length_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match length_type {\n        TupleNumericType::U8 => data[offset] = range.1 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.1 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.1 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.1.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n\t\t\t\tfn state::write_length_type(){// metaplex/program/src/state.rs:887:1: 900:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_67",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::write_length_type",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6/src/lib.rs:290:43: 290:49 \n\toffset",
        "context": "metaplex/program/src/state.rs:887:1: 900:2 \n\tfn write_length_type(\n    data: &mut RefMut<&mut [u8]>,\n    length_type: TupleNumericType,\n    offset: usize,\n    range: &AmountRange,\n) {\n    match length_type {\n        TupleNumericType::U8 => data[offset] = range.1 as u8,\n        TupleNumericType::U16 => *array_mut_ref![data, offset, 2] = (range.1 as u16).to_le_bytes(),\n        TupleNumericType::U32 => *array_mut_ref![data, offset, 4] = (range.1 as u32).to_le_bytes(),\n        TupleNumericType::U64 => *array_mut_ref![data, offset, 8] = range.1.to_le_bytes(),\n        _ => (),\n    }\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n\t\t\t\tfn state::write_length_type(){// metaplex/program/src/state.rs:887:1: 900:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_68",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::AuctionWinnerTokenTypeTracker::save",
        "code": "metaplex/program/src/state.rs:1462:13: 1462:48 \n\toffset += self.length_type as usize",
        "context": "metaplex/program/src/state.rs:1451:5: 1464:6 \n\tpub fn save(&self, a: &AccountInfo) {\n        let mut data = a.data.borrow_mut();\n        data[0] = Key::AuctionWinnerTokenTypeTrackerV1 as u8;\n        data[1] = self.amount_type as u8;\n        data[2] = self.length_type as u8;\n        *array_mut_ref![data, 3, 4] = (self.amount_ranges.len() as u32).to_le_bytes();\n        let mut offset: usize = 7;\n        for range in &self.amount_ranges {\n            write_amount_type(&mut data, self.amount_type, offset, range);\n            offset += self.amount_type as usize;\n            write_length_type(&mut data, self.length_type, offset, range);\n            offset += self.length_type as usize;\n        }\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::init_auction_manager_v2::process_init_auction_manager_v2(){// metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 }\n\t\t\tfn state::AuctionWinnerTokenTypeTracker::save(){// metaplex/program/src/state.rs:1451:5: 1464:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_69",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_70",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_71",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_72",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_73",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn processor::redeem_participation_bid::v2_validation(){// metaplex/program/src/processor/redeem_participation_bid.rs:65:1: 129:2 }\n\t\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_74",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn processor::redeem_participation_bid::v2_validation(){// metaplex/program/src/processor/redeem_participation_bid.rs:65:1: 129:2 }\n\t\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_75",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn processor::redeem_participation_bid::v2_validation(){// metaplex/program/src/processor/redeem_participation_bid.rs:65:1: 129:2 }\n\t\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_76",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "utils::common_redeem_finish",
        "code": "metaplex/program/src/utils.rs:742:17: 742:59 \n\t1 + 9 + 32 + 1 + token_type_count as usize",
        "context": "metaplex/program/src/utils.rs:702:1: 776:2 \n\tpub fn common_redeem_finish(args: CommonRedeemFinishArgs) -> ProgramResult {\n    let CommonRedeemFinishArgs {\n        program_id,\n        auction_manager,\n        auction_manager_info,\n        bidder_metadata_info,\n        rent_info,\n        system_info,\n        payer_info,\n        bid_redemption_info,\n        vault_info,\n        safety_deposit_config_info,\n        winning_index,\n        redemption_bump_seed,\n        bid_redeemed,\n        participation_redeemed,\n        winning_item_index,\n        overwrite_win_index,\n    } = args;\n\n    if (bid_redeemed || participation_redeemed) && overwrite_win_index.is_none() {\n        let auction_key = auction_manager.auction();\n        let redemption_seeds = &[\n            PREFIX.as_bytes(),\n            auction_key.as_ref(),\n            bidder_metadata_info.key.as_ref(),\n            &[redemption_bump_seed],\n        ];\n\n        let token_type_count = Vault::get_token_type_count(vault_info)\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n\n        if bid_redemption_info.data_is_empty() {\n            create_or_allocate_account_raw(\n                *program_id,\n                &bid_redemption_info,\n                &rent_info,\n                &system_info,\n                &payer_info,\n                1 + 9 + 32 + 1 + token_type_count as usize,\n                redemption_seeds,\n            )?;\n        }\n\n        BidRedemptionTicket::save(\n            bid_redemption_info,\n            participation_redeemed,\n            safety_deposit_config_info,\n            winning_index,\n            *auction_manager_info.key,\n            auction_manager.key(),\n        )?;\n    }\n\n    msg!(\"About to pass through the eye of the needle\");\n    sol_log_compute_units();\n\n    if bid_redeemed {\n        if let Some(index) = winning_index {\n            // There should never be a winning item index for V2...its a nonsensical concept, but we set it anyway for backwards compatibility.\n            if let Some(item_index) = winning_item_index {\n                auction_manager.fast_save(auction_manager_info, index, item_index);\n            }\n        }\n    } else if participation_redeemed && auction_manager.key() == Key::AuctionManagerV2 {\n        // AV2s can be saved (and set to disbursing) even in open edition auctions...a bug in V1 that we were okay with\n        // for speed. AV1s never get set to disbursing in Open Edition auctions.\n        if let Some(index) = winning_index {\n            auction_manager.fast_save(auction_manager_info, index, 0);\n        }\n    }\n\n    Ok(())\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_77",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_78",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_79",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_80",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_81",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::withdraw_master_edition::process_withdraw_master_edition(){// metaplex/program/src/processor/withdraw_master_edition.rs:20:1: 181:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_82",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::withdraw_master_edition::process_withdraw_master_edition(){// metaplex/program/src/processor/withdraw_master_edition.rs:20:1: 181:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_83",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::withdraw_master_edition::process_withdraw_master_edition(){// metaplex/program/src/processor/withdraw_master_edition.rs:20:1: 181:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_84",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::withdraw_master_edition::process_withdraw_master_edition(){// metaplex/program/src/processor/withdraw_master_edition.rs:20:1: 181:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_85",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::withdraw_master_edition::process_withdraw_master_edition(){// metaplex/program/src/processor/withdraw_master_edition.rs:20:1: 181:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_86",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::withdraw_master_edition::process_withdraw_master_edition(){// metaplex/program/src/processor/withdraw_master_edition.rs:20:1: 181:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_87",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_88",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_89",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_90",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_91",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_92",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_93",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_94",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "utils::common_redeem_finish",
        "code": "metaplex/program/src/utils.rs:742:17: 742:59 \n\t1 + 9 + 32 + 1 + token_type_count as usize",
        "context": "metaplex/program/src/utils.rs:702:1: 776:2 \n\tpub fn common_redeem_finish(args: CommonRedeemFinishArgs) -> ProgramResult {\n    let CommonRedeemFinishArgs {\n        program_id,\n        auction_manager,\n        auction_manager_info,\n        bidder_metadata_info,\n        rent_info,\n        system_info,\n        payer_info,\n        bid_redemption_info,\n        vault_info,\n        safety_deposit_config_info,\n        winning_index,\n        redemption_bump_seed,\n        bid_redeemed,\n        participation_redeemed,\n        winning_item_index,\n        overwrite_win_index,\n    } = args;\n\n    if (bid_redeemed || participation_redeemed) && overwrite_win_index.is_none() {\n        let auction_key = auction_manager.auction();\n        let redemption_seeds = &[\n            PREFIX.as_bytes(),\n            auction_key.as_ref(),\n            bidder_metadata_info.key.as_ref(),\n            &[redemption_bump_seed],\n        ];\n\n        let token_type_count = Vault::get_token_type_count(vault_info)\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n\n        if bid_redemption_info.data_is_empty() {\n            create_or_allocate_account_raw(\n                *program_id,\n                &bid_redemption_info,\n                &rent_info,\n                &system_info,\n                &payer_info,\n                1 + 9 + 32 + 1 + token_type_count as usize,\n                redemption_seeds,\n            )?;\n        }\n\n        BidRedemptionTicket::save(\n            bid_redemption_info,\n            participation_redeemed,\n            safety_deposit_config_info,\n            winning_index,\n            *auction_manager_info.key,\n            auction_manager.key(),\n        )?;\n    }\n\n    msg!(\"About to pass through the eye of the needle\");\n    sol_log_compute_units();\n\n    if bid_redeemed {\n        if let Some(index) = winning_index {\n            // There should never be a winning item index for V2...its a nonsensical concept, but we set it anyway for backwards compatibility.\n            if let Some(item_index) = winning_item_index {\n                auction_manager.fast_save(auction_manager_info, index, item_index);\n            }\n        }\n    } else if participation_redeemed && auction_manager.key() == Key::AuctionManagerV2 {\n        // AV2s can be saved (and set to disbursing) even in open edition auctions...a bug in V1 that we were okay with\n        // for speed. AV1s never get set to disbursing in Open Edition auctions.\n        if let Some(index) = winning_index {\n            auction_manager.fast_save(auction_manager_info, index, 0);\n        }\n    }\n\n    Ok(())\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_95",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_96",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_97",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_98",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_99",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_100",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\nfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_101",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\nfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_102",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\nfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_103",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "utils::common_redeem_finish",
        "code": "metaplex/program/src/utils.rs:742:17: 742:59 \n\t1 + 9 + 32 + 1 + token_type_count as usize",
        "context": "metaplex/program/src/utils.rs:702:1: 776:2 \n\tpub fn common_redeem_finish(args: CommonRedeemFinishArgs) -> ProgramResult {\n    let CommonRedeemFinishArgs {\n        program_id,\n        auction_manager,\n        auction_manager_info,\n        bidder_metadata_info,\n        rent_info,\n        system_info,\n        payer_info,\n        bid_redemption_info,\n        vault_info,\n        safety_deposit_config_info,\n        winning_index,\n        redemption_bump_seed,\n        bid_redeemed,\n        participation_redeemed,\n        winning_item_index,\n        overwrite_win_index,\n    } = args;\n\n    if (bid_redeemed || participation_redeemed) && overwrite_win_index.is_none() {\n        let auction_key = auction_manager.auction();\n        let redemption_seeds = &[\n            PREFIX.as_bytes(),\n            auction_key.as_ref(),\n            bidder_metadata_info.key.as_ref(),\n            &[redemption_bump_seed],\n        ];\n\n        let token_type_count = Vault::get_token_type_count(vault_info)\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n\n        if bid_redemption_info.data_is_empty() {\n            create_or_allocate_account_raw(\n                *program_id,\n                &bid_redemption_info,\n                &rent_info,\n                &system_info,\n                &payer_info,\n                1 + 9 + 32 + 1 + token_type_count as usize,\n                redemption_seeds,\n            )?;\n        }\n\n        BidRedemptionTicket::save(\n            bid_redemption_info,\n            participation_redeemed,\n            safety_deposit_config_info,\n            winning_index,\n            *auction_manager_info.key,\n            auction_manager.key(),\n        )?;\n    }\n\n    msg!(\"About to pass through the eye of the needle\");\n    sol_log_compute_units();\n\n    if bid_redeemed {\n        if let Some(index) = winning_index {\n            // There should never be a winning item index for V2...its a nonsensical concept, but we set it anyway for backwards compatibility.\n            if let Some(item_index) = winning_item_index {\n                auction_manager.fast_save(auction_manager_info, index, item_index);\n            }\n        }\n    } else if participation_redeemed && auction_manager.key() == Key::AuctionManagerV2 {\n        // AV2s can be saved (and set to disbursing) even in open edition auctions...a bug in V1 that we were okay with\n        // for speed. AV1s never get set to disbursing in Open Edition auctions.\n        if let Some(index) = winning_index {\n            auction_manager.fast_save(auction_manager_info, index, 0);\n        }\n    }\n\n    Ok(())\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_104",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_105",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_106",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_107",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_108",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_109",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\nfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_110",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\nfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_111",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\nfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_112",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "utils::common_redeem_finish",
        "code": "metaplex/program/src/utils.rs:742:17: 742:59 \n\t1 + 9 + 32 + 1 + token_type_count as usize",
        "context": "metaplex/program/src/utils.rs:702:1: 776:2 \n\tpub fn common_redeem_finish(args: CommonRedeemFinishArgs) -> ProgramResult {\n    let CommonRedeemFinishArgs {\n        program_id,\n        auction_manager,\n        auction_manager_info,\n        bidder_metadata_info,\n        rent_info,\n        system_info,\n        payer_info,\n        bid_redemption_info,\n        vault_info,\n        safety_deposit_config_info,\n        winning_index,\n        redemption_bump_seed,\n        bid_redeemed,\n        participation_redeemed,\n        winning_item_index,\n        overwrite_win_index,\n    } = args;\n\n    if (bid_redeemed || participation_redeemed) && overwrite_win_index.is_none() {\n        let auction_key = auction_manager.auction();\n        let redemption_seeds = &[\n            PREFIX.as_bytes(),\n            auction_key.as_ref(),\n            bidder_metadata_info.key.as_ref(),\n            &[redemption_bump_seed],\n        ];\n\n        let token_type_count = Vault::get_token_type_count(vault_info)\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n\n        if bid_redemption_info.data_is_empty() {\n            create_or_allocate_account_raw(\n                *program_id,\n                &bid_redemption_info,\n                &rent_info,\n                &system_info,\n                &payer_info,\n                1 + 9 + 32 + 1 + token_type_count as usize,\n                redemption_seeds,\n            )?;\n        }\n\n        BidRedemptionTicket::save(\n            bid_redemption_info,\n            participation_redeemed,\n            safety_deposit_config_info,\n            winning_index,\n            *auction_manager_info.key,\n            auction_manager.key(),\n        )?;\n    }\n\n    msg!(\"About to pass through the eye of the needle\");\n    sol_log_compute_units();\n\n    if bid_redeemed {\n        if let Some(index) = winning_index {\n            // There should never be a winning item index for V2...its a nonsensical concept, but we set it anyway for backwards compatibility.\n            if let Some(item_index) = winning_item_index {\n                auction_manager.fast_save(auction_manager_info, index, item_index);\n            }\n        }\n    } else if participation_redeemed && auction_manager.key() == Key::AuctionManagerV2 {\n        // AV2s can be saved (and set to disbursing) even in open edition auctions...a bug in V1 that we were okay with\n        // for speed. AV1s never get set to disbursing in Open Edition auctions.\n        if let Some(index) = winning_index {\n            auction_manager.fast_save(auction_manager_info, index, 0);\n        }\n    }\n\n    Ok(())\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_113",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_114",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_115",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_116",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_117",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_validate_participation::process_deprecated_validate_participation(){// metaplex/program/src/processor/deprecated_validate_participation.rs:24:1: 176:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_118",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_validate_participation::process_deprecated_validate_participation(){// metaplex/program/src/processor/deprecated_validate_participation.rs:24:1: 176:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_119",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_validate_participation::process_deprecated_validate_participation(){// metaplex/program/src/processor/deprecated_validate_participation.rs:24:1: 176:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_120",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_whitelisted_creator::process_set_whitelisted_creator(){// metaplex/program/src/processor/set_whitelisted_creator.rs:16:1: 84:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_121",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_whitelisted_creator::process_set_whitelisted_creator(){// metaplex/program/src/processor/set_whitelisted_creator.rs:16:1: 84:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_122",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_whitelisted_creator::process_set_whitelisted_creator(){// metaplex/program/src/processor/set_whitelisted_creator.rs:16:1: 84:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_123",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store::process_set_store(){// metaplex/program/src/processor/set_store.rs:90:1: 120:2 }\n\t\t\tfn processor::set_store::set_store_logic(){// metaplex/program/src/processor/set_store.rs:19:1: 88:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_124",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store::process_set_store(){// metaplex/program/src/processor/set_store.rs:90:1: 120:2 }\n\t\t\tfn processor::set_store::set_store_logic(){// metaplex/program/src/processor/set_store.rs:19:1: 88:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_125",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store::process_set_store(){// metaplex/program/src/processor/set_store.rs:90:1: 120:2 }\n\t\t\tfn processor::set_store::set_store_logic(){// metaplex/program/src/processor/set_store.rs:19:1: 88:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_126",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::empty_payment_account::process_empty_payment_account(){// metaplex/program/src/processor/empty_payment_account.rs:212:1: 458:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_127",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::empty_payment_account::process_empty_payment_account(){// metaplex/program/src/processor/empty_payment_account.rs:212:1: 458:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_128",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::empty_payment_account::process_empty_payment_account(){// metaplex/program/src/processor/empty_payment_account.rs:212:1: 458:2 }\n\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_129",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::empty_payment_account::process_empty_payment_account(){// metaplex/program/src/processor/empty_payment_account.rs:212:1: 458:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_130",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::empty_payment_account::process_empty_payment_account(){// metaplex/program/src/processor/empty_payment_account.rs:212:1: 458:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_131",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::empty_payment_account::process_empty_payment_account(){// metaplex/program/src/processor/empty_payment_account.rs:212:1: 458:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_132",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "mpl_auction::processor::BidState::amount",
        "code": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:650:33: 650:51 \n\tbids.len() - index",
        "context": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:646:5: 657:6 \n\tpub fn amount(&self, index: usize) -> u64 {\n        match self {\n            BidState::EnglishAuction { bids, max } => {\n                if index >= 0 as usize && index < bids.len() {\n                    return bids[bids.len() - index - 1].1;\n                } else {\n                    return 0;\n                }\n            }\n            BidState::OpenEdition { bids, max } => 0,\n        }\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::empty_payment_account::process_empty_payment_account(){// metaplex/program/src/processor/empty_payment_account.rs:212:1: 458:2 }\n\t\t\tfn processor::empty_payment_account::calculate_owed_amount(){// metaplex/program/src/processor/empty_payment_account.rs:75:1: 210:2 }\n\t\t\t\tfn mpl_auction::processor::BidState::amount(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:646:5: 657:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_133",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "mpl_auction::processor::BidState::amount",
        "code": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:650:33: 650:55 \n\tbids.len() - index - 1",
        "context": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:646:5: 657:6 \n\tpub fn amount(&self, index: usize) -> u64 {\n        match self {\n            BidState::EnglishAuction { bids, max } => {\n                if index >= 0 as usize && index < bids.len() {\n                    return bids[bids.len() - index - 1].1;\n                } else {\n                    return 0;\n                }\n            }\n            BidState::OpenEdition { bids, max } => 0,\n        }\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::empty_payment_account::process_empty_payment_account(){// metaplex/program/src/processor/empty_payment_account.rs:212:1: 458:2 }\n\t\t\tfn processor::empty_payment_account::calculate_owed_amount(){// metaplex/program/src/processor/empty_payment_account.rs:75:1: 210:2 }\n\t\t\t\tfn mpl_auction::processor::BidState::amount(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:646:5: 657:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_134",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "processor::empty_payment_account::calculate_owed_amount",
        "code": "metaplex/program/src/processor/empty_payment_account.rs:126:17: 126:64 \n\t(10000 - metadata.data.seller_fee_basis_points)",
        "context": "metaplex/program/src/processor/empty_payment_account.rs:75:1: 210:2 \n\tfn calculate_owed_amount(\n    auction_token_tracker_info: Option<&AccountInfo>,\n    safety_deposit_config_info: Option<&AccountInfo>,\n    auction_manager: &Box<dyn AuctionManager>,\n    auction: &AuctionData,\n    metadata: &Metadata,\n    winning_config_index: &Option<u8>,\n    winning_config_item_index: &Option<u8>,\n    creator_index: &Option<u8>,\n) -> Result<u64, ProgramError> {\n    let primary_sale_happened = auction_manager.get_primary_sale_happened(\n        metadata,\n        *winning_config_index,\n        *winning_config_item_index,\n    )?;\n\n    let mut amount_available_to_split: u128 = match winning_config_index {\n        Some(index) => auction.bid_state.amount(*index as usize) as u128,\n        None => {\n            // this means the amount owed is the amount collected from participation nft bids.\n            auction_manager.get_collected_to_accept_payment(safety_deposit_config_info)?\n        }\n    };\n\n    if winning_config_index.is_some() {\n        msg!(\"Winning config index {:?}\", winning_config_index.unwrap());\n    }\n    if winning_config_item_index.is_some() {\n        msg!(\n            \"Winning config item index {:?}\",\n            winning_config_item_index.unwrap()\n        );\n    }\n    if creator_index.is_some() {\n        msg!(\"Creator index {:?}\", creator_index.unwrap());\n    }\n\n    msg!(\"Amount available to split {:?}\", amount_available_to_split);\n    let numerator: u128 = match creator_index {\n        Some(_) => {\n            if primary_sale_happened {\n                // during secondary sale, artists get a percentage of the proceeds\n                metadata.data.seller_fee_basis_points as u128\n            } else {\n                // during primary sale, artists get all of the proceeds\n                10000\n            }\n        }\n        None => {\n            if primary_sale_happened {\n                // during secondary sale, auctioneer gets whats left after artists get their cut\n                (10000 - metadata.data.seller_fee_basis_points) as u128\n            } else {\n                // during primary sale, auctioneer (creator index not provided)\n                // get none of the proceeds\n                0u128\n            }\n        }\n    };\n\n    msg!(\"Numerator {:?}\", numerator);\n\n    // Each artist gets a cut of the overall share all artists get. IE if 2 artists contributed and one\n    // did 70% and the other 30%, the artist further multiplier of A is 7000 and the other is 3000,\n    // because we convert their shares of 70 and 30 to basis point units of 7000 and 3000.\n    let artist_further_multiplier = match creator_index {\n        Some(index) => match &metadata.data.creators {\n            Some(creators) => (creators[*index as usize].share as u128) * 100u128,\n            None => return Err(MetaplexError::CreatorIndexExpected.into()),\n        },\n        None => 10000,\n    };\n\n    msg!(\"Artist further multiplier {:?}\", artist_further_multiplier);\n\n    // Numerator represents the whittling to cut the artist or auctioneer's piece  off of the\n    // total amount available. So if it's the auctioneer and they get 90% in a secondary sale, this would\n    // be (9000/10000) * bid amount, numerator is 9000. Or if it's the artists collective cut, this would\n    // be 1000.\n    amount_available_to_split = amount_available_to_split\n        .checked_mul(numerator)\n        .ok_or(MetaplexError::NumericalOverflowError)?;\n\n    msg!(\n        \"Amount available to split after numerator mult {:?}\",\n        amount_available_to_split,\n    );\n\n    // Artist further multiplier is the numerator of the fraction that is multiplied for the specific\n    // artist involved. So if artist A gets 70% of the total artist cut then we'd multiply the\n    // artist contribution by a further 7/10, so this would be 7000 basis points, so we're doing *7000\n    // here.\n    amount_available_to_split = amount_available_to_split\n        .checked_mul(artist_further_multiplier)\n        .ok_or(MetaplexError::NumericalOverflowError)?;\n\n    msg!(\n        \"Amount available to split after artist further multiplier mult {:?}\",\n        amount_available_to_split,\n    );\n    if amount_available_to_split == 0 {\n        // cant do checked_ceil_div on 0\n        return Ok(0u64);\n    }\n\n    let proportion_divisor = match winning_config_index {\n        Some(val) => auction_manager.get_number_of_unique_token_types_for_this_winner(\n            *val as usize,\n            auction_token_tracker_info,\n        )?,\n        None => 1,\n    };\n\n    // Since we have multiple prizes need to split each prize's contribution by it's portion of config\n    let proportional_amount_available_to_split = amount_available_to_split\n        .checked_div(proportion_divisor)\n        .ok_or(MetaplexError::NumericalOverflowError)?;\n\n    msg!(\n        \"Divided the amount by {:?} to get {:?} due to sharing reward with other prizes\",\n        proportion_divisor,\n        proportional_amount_available_to_split\n    );\n\n    // We do two 10000's - one for the first numerator/10000 fraction and one for the artist contribution\n    // For the auctioneer's case, the second 10000 cancels out to 1 because there is no further\n    // whittling there (auctioneer shares with nobody) but for the artist they may be sharing\n    // with another artist, say a 70/30 split, so we need to further multiply the amount available by\n    // 7/10ths or something.\n    let final_amount_available_to_split = proportional_amount_available_to_split\n        .checked_div(10000 * 10000)\n        .ok_or(MetaplexError::NumericalOverflowError)?;\n    msg!(\"Final amount mult {:?}\", final_amount_available_to_split);\n\n    Ok(final_amount_available_to_split as u64)\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::empty_payment_account::process_empty_payment_account(){// metaplex/program/src/processor/empty_payment_account.rs:212:1: 458:2 }\n\t\t\tfn processor::empty_payment_account::calculate_owed_amount(){// metaplex/program/src/processor/empty_payment_account.rs:75:1: 210:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_135",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_136",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_137",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_138",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_139",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn processor::redeem_participation_bid::v2_validation(){// metaplex/program/src/processor/redeem_participation_bid.rs:65:1: 129:2 }\n\t\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_140",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn processor::redeem_participation_bid::v2_validation(){// metaplex/program/src/processor/redeem_participation_bid.rs:65:1: 129:2 }\n\t\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_141",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn processor::redeem_participation_bid::v2_validation(){// metaplex/program/src/processor/redeem_participation_bid.rs:65:1: 129:2 }\n\t\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n\t\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_142",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "utils::common_redeem_finish",
        "code": "metaplex/program/src/utils.rs:742:17: 742:59 \n\t1 + 9 + 32 + 1 + token_type_count as usize",
        "context": "metaplex/program/src/utils.rs:702:1: 776:2 \n\tpub fn common_redeem_finish(args: CommonRedeemFinishArgs) -> ProgramResult {\n    let CommonRedeemFinishArgs {\n        program_id,\n        auction_manager,\n        auction_manager_info,\n        bidder_metadata_info,\n        rent_info,\n        system_info,\n        payer_info,\n        bid_redemption_info,\n        vault_info,\n        safety_deposit_config_info,\n        winning_index,\n        redemption_bump_seed,\n        bid_redeemed,\n        participation_redeemed,\n        winning_item_index,\n        overwrite_win_index,\n    } = args;\n\n    if (bid_redeemed || participation_redeemed) && overwrite_win_index.is_none() {\n        let auction_key = auction_manager.auction();\n        let redemption_seeds = &[\n            PREFIX.as_bytes(),\n            auction_key.as_ref(),\n            bidder_metadata_info.key.as_ref(),\n            &[redemption_bump_seed],\n        ];\n\n        let token_type_count = Vault::get_token_type_count(vault_info)\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n\n        if bid_redemption_info.data_is_empty() {\n            create_or_allocate_account_raw(\n                *program_id,\n                &bid_redemption_info,\n                &rent_info,\n                &system_info,\n                &payer_info,\n                1 + 9 + 32 + 1 + token_type_count as usize,\n                redemption_seeds,\n            )?;\n        }\n\n        BidRedemptionTicket::save(\n            bid_redemption_info,\n            participation_redeemed,\n            safety_deposit_config_info,\n            winning_index,\n            *auction_manager_info.key,\n            auction_manager.key(),\n        )?;\n    }\n\n    msg!(\"About to pass through the eye of the needle\");\n    sol_log_compute_units();\n\n    if bid_redeemed {\n        if let Some(index) = winning_index {\n            // There should never be a winning item index for V2...its a nonsensical concept, but we set it anyway for backwards compatibility.\n            if let Some(item_index) = winning_item_index {\n                auction_manager.fast_save(auction_manager_info, index, item_index);\n            }\n        }\n    } else if participation_redeemed && auction_manager.key() == Key::AuctionManagerV2 {\n        // AV2s can be saved (and set to disbursing) even in open edition auctions...a bug in V1 that we were okay with\n        // for speed. AV1s never get set to disbursing in Open Edition auctions.\n        if let Some(index) = winning_index {\n            auction_manager.fast_save(auction_manager_info, index, 0);\n        }\n    }\n\n    Ok(())\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_143",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_144",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_145",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_146",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_147",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_148",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_149",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_150",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_151",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "utils::common_redeem_finish",
        "code": "metaplex/program/src/utils.rs:742:17: 742:59 \n\t1 + 9 + 32 + 1 + token_type_count as usize",
        "context": "metaplex/program/src/utils.rs:702:1: 776:2 \n\tpub fn common_redeem_finish(args: CommonRedeemFinishArgs) -> ProgramResult {\n    let CommonRedeemFinishArgs {\n        program_id,\n        auction_manager,\n        auction_manager_info,\n        bidder_metadata_info,\n        rent_info,\n        system_info,\n        payer_info,\n        bid_redemption_info,\n        vault_info,\n        safety_deposit_config_info,\n        winning_index,\n        redemption_bump_seed,\n        bid_redeemed,\n        participation_redeemed,\n        winning_item_index,\n        overwrite_win_index,\n    } = args;\n\n    if (bid_redeemed || participation_redeemed) && overwrite_win_index.is_none() {\n        let auction_key = auction_manager.auction();\n        let redemption_seeds = &[\n            PREFIX.as_bytes(),\n            auction_key.as_ref(),\n            bidder_metadata_info.key.as_ref(),\n            &[redemption_bump_seed],\n        ];\n\n        let token_type_count = Vault::get_token_type_count(vault_info)\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n\n        if bid_redemption_info.data_is_empty() {\n            create_or_allocate_account_raw(\n                *program_id,\n                &bid_redemption_info,\n                &rent_info,\n                &system_info,\n                &payer_info,\n                1 + 9 + 32 + 1 + token_type_count as usize,\n                redemption_seeds,\n            )?;\n        }\n\n        BidRedemptionTicket::save(\n            bid_redemption_info,\n            participation_redeemed,\n            safety_deposit_config_info,\n            winning_index,\n            *auction_manager_info.key,\n            auction_manager.key(),\n        )?;\n    }\n\n    msg!(\"About to pass through the eye of the needle\");\n    sol_log_compute_units();\n\n    if bid_redeemed {\n        if let Some(index) = winning_index {\n            // There should never be a winning item index for V2...its a nonsensical concept, but we set it anyway for backwards compatibility.\n            if let Some(item_index) = winning_item_index {\n                auction_manager.fast_save(auction_manager_info, index, item_index);\n            }\n        }\n    } else if participation_redeemed && auction_manager.key() == Key::AuctionManagerV2 {\n        // AV2s can be saved (and set to disbursing) even in open edition auctions...a bug in V1 that we were okay with\n        // for speed. AV1s never get set to disbursing in Open Edition auctions.\n        if let Some(index) = winning_index {\n            auction_manager.fast_save(auction_manager_info, index, 0);\n        }\n    }\n\n    Ok(())\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_152",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_153",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_154",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_155",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_156",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_157",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_158",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_159",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::assert_rent_exempt(){// metaplex/program/src/utils.rs:59:1: 65:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::is_exempt(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:62:5: 64:6 }\n\t\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_160",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "utils::common_redeem_finish",
        "code": "metaplex/program/src/utils.rs:742:17: 742:59 \n\t1 + 9 + 32 + 1 + token_type_count as usize",
        "context": "metaplex/program/src/utils.rs:702:1: 776:2 \n\tpub fn common_redeem_finish(args: CommonRedeemFinishArgs) -> ProgramResult {\n    let CommonRedeemFinishArgs {\n        program_id,\n        auction_manager,\n        auction_manager_info,\n        bidder_metadata_info,\n        rent_info,\n        system_info,\n        payer_info,\n        bid_redemption_info,\n        vault_info,\n        safety_deposit_config_info,\n        winning_index,\n        redemption_bump_seed,\n        bid_redeemed,\n        participation_redeemed,\n        winning_item_index,\n        overwrite_win_index,\n    } = args;\n\n    if (bid_redeemed || participation_redeemed) && overwrite_win_index.is_none() {\n        let auction_key = auction_manager.auction();\n        let redemption_seeds = &[\n            PREFIX.as_bytes(),\n            auction_key.as_ref(),\n            bidder_metadata_info.key.as_ref(),\n            &[redemption_bump_seed],\n        ];\n\n        let token_type_count = Vault::get_token_type_count(vault_info)\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n\n        if bid_redemption_info.data_is_empty() {\n            create_or_allocate_account_raw(\n                *program_id,\n                &bid_redemption_info,\n                &rent_info,\n                &system_info,\n                &payer_info,\n                1 + 9 + 32 + 1 + token_type_count as usize,\n                redemption_seeds,\n            )?;\n        }\n\n        BidRedemptionTicket::save(\n            bid_redemption_info,\n            participation_redeemed,\n            safety_deposit_config_info,\n            winning_index,\n            *auction_manager_info.key,\n            auction_manager.key(),\n        )?;\n    }\n\n    msg!(\"About to pass through the eye of the needle\");\n    sol_log_compute_units();\n\n    if bid_redeemed {\n        if let Some(index) = winning_index {\n            // There should never be a winning item index for V2...its a nonsensical concept, but we set it anyway for backwards compatibility.\n            if let Some(item_index) = winning_item_index {\n                auction_manager.fast_save(auction_manager_info, index, item_index);\n            }\n        }\n    } else if participation_redeemed && auction_manager.key() == Key::AuctionManagerV2 {\n        // AV2s can be saved (and set to disbursing) even in open edition auctions...a bug in V1 that we were okay with\n        // for speed. AV1s never get set to disbursing in Open Edition auctions.\n        if let Some(index) = winning_index {\n            auction_manager.fast_save(auction_manager_info, index, 0);\n        }\n    }\n\n    Ok(())\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_161",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_162",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_163",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_164",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "state::BidRedemptionTicket::get_index_and_mask",
        "code": "metaplex/program/src/state.rs:1538:35: 1540:59 \n\t7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?",
        "context": "metaplex/program/src/state.rs:1522:5: 1544:6 \n\tpub fn get_index_and_mask(\n        data: &RefMut<&mut [u8]>,\n        order: u64,\n    ) -> Result<(usize, u8), ProgramError> {\n        // add one because Key is at 0\n        let mut offset = 42;\n        if data[1] == 0 {\n            // remove the lost option space\n            offset -= 8;\n        }\n\n        let u8_position = order\n            .checked_div(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?\n            .checked_add(offset)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let position_from_right = 7 - order\n            .checked_rem(8)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        let mask = u8::pow(2, position_from_right as u32);\n\n        Ok((u8_position as usize, mask))\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\tfn state::BidRedemptionTicket::get_index_and_mask(){// metaplex/program/src/state.rs:1522:5: 1544:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_165",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_validate_safety_deposit_box_v1::process_deprecated_validate_safety_deposit_box_v1(){// metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs:67:1: 237:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::assert_supply_logic_check(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:205:1: 381:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_166",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_validate_safety_deposit_box_v1::process_deprecated_validate_safety_deposit_box_v1(){// metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs:67:1: 237:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::assert_supply_logic_check(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:205:1: 381:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_167",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_validate_safety_deposit_box_v1::process_deprecated_validate_safety_deposit_box_v1(){// metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs:67:1: 237:2 }\n\t\t\tfn processor::validate_safety_deposit_box_v2::assert_supply_logic_check(){// metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:205:1: 381:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_168",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_validate_safety_deposit_box_v1::process_deprecated_validate_safety_deposit_box_v1(){// metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs:67:1: 237:2 }\n\t\t\tfn processor::deprecated_validate_safety_deposit_box_v1::make_safety_deposit_validation(){// metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs:22:1: 65:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_169",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_validate_safety_deposit_box_v1::process_deprecated_validate_safety_deposit_box_v1(){// metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs:67:1: 237:2 }\n\t\t\tfn processor::deprecated_validate_safety_deposit_box_v1::make_safety_deposit_validation(){// metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs:22:1: 65:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_170",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_validate_safety_deposit_box_v1::process_deprecated_validate_safety_deposit_box_v1(){// metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs:67:1: 237:2 }\n\t\t\tfn processor::deprecated_validate_safety_deposit_box_v1::make_safety_deposit_validation(){// metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs:22:1: 65:2 }\n\t\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_171",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:11: 57:45 \n\t(ACCOUNT_STORAGE_OVERHEAD + bytes)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_init_auction_manager_v1::process_deprecated_init_auction_manager_v1(){// metaplex/program/src/processor/deprecated_init_auction_manager_v1.rs:20:1: 133:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_172",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_init_auction_manager_v1::process_deprecated_init_auction_manager_v1(){// metaplex/program/src/processor/deprecated_init_auction_manager_v1.rs:20:1: 133:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "IntegerCve",
        "id": "INT_CVE_173",
        "title": "Overflow",
        "category": "Integer Overflow wpa",
        "severity": "Critical",
        "location": "solana_program::rent::Rent::minimum_balance",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
        "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::deprecated_init_auction_manager_v1::process_deprecated_init_auction_manager_v1(){// metaplex/program/src/processor/deprecated_init_auction_manager_v1.rs:20:1: 133:2 }\n\t\t\tfn utils::create_or_allocate_account_raw(){// metaplex/program/src/utils.rs:212:1: 257:2 }\n\t\t\t\tfn solana_program::rent::Rent::minimum_balance(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/rent.rs:55:5: 59:6 }\n",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_0",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs:81:5: 83:6 \n\tpub fn data_is_empty(&self) -> bool {\n        self.data.borrow().is_empty()\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store::process_set_store_v2(){// metaplex/program/src/processor/set_store.rs:122:1: 193:2 }\n\t\t\tfn processor::set_store::set_store_logic(){// metaplex/program/src/processor/set_store.rs:19:1: 88:2 }\n\t\t\t\tfn solana_program::account_info::AccountInfo::<'a>::data_is_empty(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs:81:5: 83:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_1",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/set_store.rs",
        "code": "metaplex/program/src/processor/set_store.rs:19:1: 88:2 \n\tpub fn set_store_logic<'a>(\n    public: bool,\n    program_id: &Pubkey,\n    auction_program_info: &'a AccountInfo<'a>,\n    token_vault_program_info: &'a AccountInfo<'a>,\n    rent_info: &'a AccountInfo<'a>,\n    system_info: &'a AccountInfo<'a>,\n    token_metadata_program_info: &'a AccountInfo<'a>,\n    token_program_info: &'a AccountInfo<'a>,\n    store_info: &'a AccountInfo<'a>,\n    admin_wallet_info: &'a AccountInfo<'a>,\n    payer_info: &'a AccountInfo<'a>,\n) -> ProgramResult {\n    assert_signer(payer_info)?;\n    assert_signer(admin_wallet_info)?;\n    if !store_info.data_is_empty() {\n        assert_owned_by(store_info, program_id)?;\n    }\n\n    let store_bump = assert_derivation(\n        program_id,\n        store_info,\n        &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            admin_wallet_info.key.as_ref(),\n        ],\n    )?;\n\n    if store_info.data_is_empty() {\n        create_or_allocate_account_raw(\n            *program_id,\n            store_info,\n            rent_info,\n            system_info,\n            payer_info,\n            MAX_STORE_SIZE,\n            &[\n                PREFIX.as_bytes(),\n                program_id.as_ref(),\n                admin_wallet_info.key.as_ref(),\n                &[store_bump],\n            ],\n        )?;\n    }\n\n    let mut store = Store::from_account_info(store_info)?;\n    store.key = Key::StoreV1;\n    store.public = public;\n    // Keys can only be set once, once set from all 0s, they are immutable.\n    if store.token_program == solana_program::system_program::id() {\n        store.token_program = *token_program_info.key;\n    }\n\n    if store.token_program != spl_token::id() {\n        return Err(MetaplexError::InvalidTokenProgram.into());\n    }\n\n    if store.token_vault_program == solana_program::system_program::id() {\n        store.token_vault_program = *token_vault_program_info.key;\n    }\n    if store.token_metadata_program == solana_program::system_program::id() {\n        store.token_metadata_program = *token_metadata_program_info.key;\n    }\n    if store.auction_program == solana_program::system_program::id() {\n        store.auction_program = *auction_program_info.key;\n    }\n    store.serialize(&mut *store_info.data.borrow_mut())?;\n    Ok(())\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store::process_set_store_v2(){// metaplex/program/src/processor/set_store.rs:122:1: 193:2 }\n\t\t\tfn processor::set_store::set_store_logic(){// metaplex/program/src/processor/set_store.rs:19:1: 88:2 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_2",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs:81:5: 83:6 \n\tpub fn data_is_empty(&self) -> bool {\n        self.data.borrow().is_empty()\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_store::process_set_store_v2(){// metaplex/program/src/processor/set_store.rs:122:1: 193:2 }\n\t\t\tfn solana_program::account_info::AccountInfo::<'a>::data_is_empty(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs:81:5: 83:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_3",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs:73:5: 75:6 \n\tpub fn data_len(&self) -> usize {\n        self.data.borrow().len()\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::set_auction_cache::process_set_auction_cache(){// metaplex/program/src/processor/set_auction_cache.rs:19:1: 143:2 }\n\t\t\tfn mpl_auction::processor::AuctionData::from_account_info(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:316:5: 324:6 }\n\t\t\t\tfn solana_program::account_info::AccountInfo::<'a>::data_len(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs:73:5: 75:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_4",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:212:1: 221:2 \n\tpub fn get_auction_manager(account: &AccountInfo) -> Result<Box<dyn AuctionManager>, ProgramError> {\n    let version = account.data.borrow()[0];\n\n    // For some reason when converting Key to u8 here, it becomes unreachable. Use direct constant instead.\n    match version {\n        7 => return Ok(Box::new(AuctionManagerV1::from_account_info(account)?)),\n        10 => return Ok(Box::new(AuctionManagerV2::from_account_info(account)?)),\n        _ => return Err(MetaplexError::DataTypeMismatch.into()),\n    };\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::end_auction::process_end_auction(){// metaplex/program/src/processor/end_auction.rs:43:1: 118:2 }\n\t\t\tfn state::get_auction_manager(){// metaplex/program/src/state.rs:212:1: 221:2 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_5",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/utils.rs",
        "code": "metaplex/program/src/utils.rs:509:1: 681:2 \n\tpub fn common_redeem_checks(\n    args: CommonRedeemCheckArgs,\n) -> Result<CommonRedeemReturn, ProgramError> {\n    let CommonRedeemCheckArgs {\n        program_id,\n        auction_manager_info,\n        safety_deposit_token_store_info,\n        destination_info,\n        bid_redemption_info,\n        safety_deposit_info,\n        vault_info,\n        auction_info,\n        auction_extended_info,\n        bidder_metadata_info,\n        bidder_info,\n        token_program_info,\n        token_vault_program_info,\n        token_metadata_program_info,\n        rent_info,\n        store_info,\n        safety_deposit_config_info,\n        is_participation,\n        overwrite_win_index,\n        user_provided_win_index,\n        assert_bidder_signer,\n        ignore_bid_redeemed_item_check,\n    } = args;\n\n    let rent = &Rent::from_account_info(&rent_info)?;\n\n    let mut auction_manager: Box<dyn AuctionManager> = get_auction_manager(auction_manager_info)?;\n    let store_data = store_info.data.borrow();\n    let cancelled: bool;\n\n    let auction_program = Pubkey::new_from_array(*array_ref![store_data, 2, 32]);\n    let token_vault_program = Pubkey::new_from_array(*array_ref![store_data, 34, 32]);\n    let token_metadata_program = Pubkey::new_from_array(*array_ref![store_data, 66, 32]);\n    let token_program = Pubkey::new_from_array(*array_ref![store_data, 98, 32]);\n\n    let mut redemption_bump_seed: u8 = 0;\n    if overwrite_win_index.is_some() {\n        cancelled = false;\n\n        if *bidder_info.key != auction_manager.authority() {\n            return Err(MetaplexError::MustBeAuctioneer.into());\n        }\n    } else {\n        let bidder_metadata_data = bidder_metadata_info.data.borrow();\n        if bidder_metadata_data[80] == 0 {\n            cancelled = false\n        } else {\n            cancelled = true;\n        }\n        assert_owned_by(bidder_metadata_info, &auction_program)?;\n        assert_derivation(\n            &auction_program,\n            bidder_metadata_info,\n            &[\n                mpl_auction::PREFIX.as_bytes(),\n                auction_program.as_ref(),\n                auction_info.key.as_ref(),\n                bidder_info.key.as_ref(),\n                \"metadata\".as_bytes(),\n            ],\n        )?;\n\n        let bidder_pubkey = Pubkey::new_from_array(*array_ref![bidder_metadata_data, 0, 32]);\n        if bidder_pubkey != *bidder_info.key {\n            return Err(MetaplexError::BidderMetadataBidderMismatch.into());\n        }\n        let auction_key = auction_manager.auction();\n        let redemption_path = [\n            PREFIX.as_bytes(),\n            auction_key.as_ref(),\n            bidder_metadata_info.key.as_ref(),\n        ];\n        let (redemption_key, actual_redemption_bump_seed) =\n            Pubkey::find_program_address(&redemption_path, &program_id);\n\n        redemption_bump_seed = actual_redemption_bump_seed;\n        if redemption_key != *bid_redemption_info.key {\n            return Err(MetaplexError::BidRedemptionMismatch.into());\n        }\n    }\n\n    let win_index = calculate_win_index(\n        bidder_info,\n        auction_info,\n        user_provided_win_index,\n        overwrite_win_index,\n    )?;\n\n    if !bid_redemption_info.data_is_empty()\n        && overwrite_win_index.is_none()\n        && !ignore_bid_redeemed_item_check\n    {\n        BidRedemptionTicket::check_ticket(\n            bid_redemption_info,\n            is_participation,\n            safety_deposit_config_info,\n        )?\n    }\n\n    if assert_bidder_signer {\n        assert_signer(bidder_info)?;\n    }\n\n    assert_owned_by(&destination_info, token_program_info.key)?;\n    assert_owned_by(&auction_manager_info, &program_id)?;\n    assert_owned_by(safety_deposit_token_store_info, token_program_info.key)?;\n    if !bid_redemption_info.data_is_empty() {\n        assert_owned_by(bid_redemption_info, &program_id)?;\n    }\n    assert_owned_by(safety_deposit_info, &token_vault_program)?;\n    assert_owned_by(vault_info, &token_vault_program)?;\n    assert_owned_by(auction_info, &auction_program)?;\n    assert_owned_by(store_info, &program_id)?;\n\n    assert_store_safety_vault_manager_match(\n        &auction_manager.vault(),\n        &safety_deposit_info,\n        &vault_info,\n        &token_vault_program,\n    )?;\n    assert_safety_deposit_config_valid(\n        program_id,\n        auction_manager_info,\n        safety_deposit_info,\n        safety_deposit_config_info,\n        &auction_manager.key(),\n    )?;\n    // looking out for you!\n    assert_rent_exempt(rent, &destination_info)?;\n\n    if auction_manager.auction() != *auction_info.key {\n        return Err(MetaplexError::AuctionManagerAuctionMismatch.into());\n    }\n\n    if *store_info.key != auction_manager.store() {\n        return Err(MetaplexError::AuctionManagerStoreMismatch.into());\n    }\n\n    if token_program != *token_program_info.key {\n        return Err(MetaplexError::AuctionManagerTokenProgramMismatch.into());\n    }\n\n    if token_vault_program != *token_vault_program_info.key {\n        return Err(MetaplexError::AuctionManagerTokenVaultProgramMismatch.into());\n    }\n\n    if token_metadata_program != *token_metadata_program_info.key {\n        return Err(MetaplexError::AuctionManagerTokenMetadataProgramMismatch.into());\n    }\n\n    assert_auction_is_ended_or_valid_instant_sale(\n        auction_info,\n        auction_extended_info,\n        bidder_metadata_info,\n        win_index,\n    )?;\n\n    // No-op if already set.\n    auction_manager.set_status(AuctionManagerStatus::Disbursing);\n\n    Ok(CommonRedeemReturn {\n        redemption_bump_seed,\n        auction_manager,\n        cancelled,\n        rent: *rent,\n        win_index,\n        token_metadata_program,\n    })\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_6",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:190:5: 207:6 \n\tfn find_bid_state_beginning(a: &AccountInfo) -> usize {\n        let data = a.data.borrow();\n        let mut bid_state_beginning = 32 + 32;\n\n        for i in 0..4 {\n            // One for each unix timestamp\n            if data[bid_state_beginning] == 1 {\n                bid_state_beginning += 9\n            } else {\n                bid_state_beginning += 1;\n            }\n        }\n\n        // Finally add price floor (enum + hash) and state, then the u32,\n        // then add 1 to position at the beginning of first bid.\n        bid_state_beginning += 1 + 32 + 1 + 4 + 1;\n        return bid_state_beginning;\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::calculate_win_index(){// metaplex/program/src/utils.rs:422:1: 471:2 }\n\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_is_winner(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:221:5: 252:6 }\n\t\t\t\t\t\tfn mpl_auction::processor::AuctionData::find_bid_state_beginning(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:190:5: 207:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_7",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:221:5: 252:6 \n\tpub fn get_is_winner(a: &AccountInfo, key: &Pubkey) -> Option<usize> {\n        let bid_state_beginning = AuctionData::find_bid_state_beginning(a);\n        let data = a.data.borrow();\n        let as_bytes = key.to_bytes();\n        let (bid_state_beginning, num_elements, max) = AuctionData::get_vec_info(a);\n        for idx in 0..std::cmp::min(num_elements, max) {\n            match AuctionData::get_winner_at_inner(\n                &a.data.borrow(),\n                idx,\n                bid_state_beginning,\n                num_elements,\n                max,\n            ) {\n                Some(bid_key) => {\n                    // why deserialize the entire key to compare the two with a short circuit comparison\n                    // when we can compare them immediately?\n                    let mut matching = true;\n                    for bid_key_idx in 0..32 {\n                        if bid_key[bid_key_idx] != as_bytes[bid_key_idx] {\n                            matching = false;\n                            break;\n                        }\n                    }\n                    if matching {\n                        return Some(idx as usize);\n                    }\n                }\n                None => return None,\n            }\n        }\n        None\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::calculate_win_index(){// metaplex/program/src/utils.rs:422:1: 471:2 }\n\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_is_winner(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:221:5: 252:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_8",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:190:5: 207:6 \n\tfn find_bid_state_beginning(a: &AccountInfo) -> usize {\n        let data = a.data.borrow();\n        let mut bid_state_beginning = 32 + 32;\n\n        for i in 0..4 {\n            // One for each unix timestamp\n            if data[bid_state_beginning] == 1 {\n                bid_state_beginning += 9\n            } else {\n                bid_state_beginning += 1;\n            }\n        }\n\n        // Finally add price floor (enum + hash) and state, then the u32,\n        // then add 1 to position at the beginning of first bid.\n        bid_state_beginning += 1 + 32 + 1 + 4 + 1;\n        return bid_state_beginning;\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::calculate_win_index(){// metaplex/program/src/utils.rs:422:1: 471:2 }\n\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_is_winner(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:221:5: 252:6 }\n\t\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_vec_info(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:209:5: 219:6 }\nfn mpl_auction::processor::AuctionData::find_bid_state_beginning(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:190:5: 207:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_9",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:209:5: 219:6 \n\tfn get_vec_info(a: &AccountInfo) -> (usize, usize, usize) {\n        let bid_state_beginning = AuctionData::find_bid_state_beginning(a);\n        let data = a.data.borrow();\n\n        let num_elements_data = array_ref![data, bid_state_beginning - 4, 4];\n        let num_elements = u32::from_le_bytes(*num_elements_data) as usize;\n        let max_data = array_ref![data, bid_state_beginning + BID_LENGTH * num_elements, 8];\n        let max = u64::from_le_bytes(*max_data) as usize;\n\n        (bid_state_beginning, num_elements, max)\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::calculate_win_index(){// metaplex/program/src/utils.rs:422:1: 471:2 }\n\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_is_winner(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:221:5: 252:6 }\n\t\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_vec_info(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:209:5: 219:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_10",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:190:5: 207:6 \n\tfn find_bid_state_beginning(a: &AccountInfo) -> usize {\n        let data = a.data.borrow();\n        let mut bid_state_beginning = 32 + 32;\n\n        for i in 0..4 {\n            // One for each unix timestamp\n            if data[bid_state_beginning] == 1 {\n                bid_state_beginning += 9\n            } else {\n                bid_state_beginning += 1;\n            }\n        }\n\n        // Finally add price floor (enum + hash) and state, then the u32,\n        // then add 1 to position at the beginning of first bid.\n        bid_state_beginning += 1 + 32 + 1 + 4 + 1;\n        return bid_state_beginning;\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::calculate_win_index(){// metaplex/program/src/utils.rs:422:1: 471:2 }\n\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_winner_at(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:254:5: 266:6 }\n\t\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_vec_info(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:209:5: 219:6 }\nfn mpl_auction::processor::AuctionData::find_bid_state_beginning(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:190:5: 207:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_11",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:209:5: 219:6 \n\tfn get_vec_info(a: &AccountInfo) -> (usize, usize, usize) {\n        let bid_state_beginning = AuctionData::find_bid_state_beginning(a);\n        let data = a.data.borrow();\n\n        let num_elements_data = array_ref![data, bid_state_beginning - 4, 4];\n        let num_elements = u32::from_le_bytes(*num_elements_data) as usize;\n        let max_data = array_ref![data, bid_state_beginning + BID_LENGTH * num_elements, 8];\n        let max = u64::from_le_bytes(*max_data) as usize;\n\n        (bid_state_beginning, num_elements, max)\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::calculate_win_index(){// metaplex/program/src/utils.rs:422:1: 471:2 }\n\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_winner_at(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:254:5: 266:6 }\n\t\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_vec_info(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:209:5: 219:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_12",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:254:5: 266:6 \n\tpub fn get_winner_at(a: &AccountInfo, idx: usize) -> Option<Pubkey> {\n        let (bid_state_beginning, num_elements, max) = AuctionData::get_vec_info(a);\n        match AuctionData::get_winner_at_inner(\n            &a.data.borrow(),\n            idx,\n            bid_state_beginning,\n            num_elements,\n            max,\n        ) {\n            Some(bid_key) => Some(Pubkey::new_from_array(*bid_key)),\n            None => None,\n        }\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn utils::calculate_win_index(){// metaplex/program/src/utils.rs:422:1: 471:2 }\n\t\t\t\t\tfn mpl_auction::processor::AuctionData::get_winner_at(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:254:5: 266:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_13",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_14",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:167:5: 171:6 \n\tpub fn get_token_mint(a: &AccountInfo) -> Pubkey {\n        let data = a.data.borrow();\n        let token_mint_data = array_ref![data, 32, 32];\n        Pubkey::new_from_array(*token_mint_data)\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn mpl_auction::processor::AuctionData::get_token_mint(){// /home/ubuntu/VRust/metaplex-program-library/auction/program/src/processor.rs:167:5: 171:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_15",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs:101:5: 105:6 \n\tpub fn try_borrow_data(&self) -> Result<Ref<&mut [u8]>, ProgramError> {\n        self.data\n            .try_borrow()\n            .map_err(|_| ProgramError::AccountBorrowFailed)\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn mpl_token_metadata::utils::get_supply_off_master_edition(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/mpl-token-metadata-1.1.0/src/utils.rs:483:1: 491:2 }\n\t\t\t\tfn solana_program::account_info::AccountInfo::<'a>::try_borrow_data(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs:101:5: 105:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_16",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs",
        "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs:101:5: 105:6 \n\tpub fn try_borrow_data(&self) -> Result<Ref<&mut [u8]>, ProgramError> {\n        self.data\n            .try_borrow()\n            .map_err(|_| ProgramError::AccountBorrowFailed)\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn processor::redeem_participation_bid::v2_validation(){// metaplex/program/src/processor/redeem_participation_bid.rs:65:1: 129:2 }\n\t\t\t\tfn utils::get_amount_from_token_account(){// metaplex/program/src/utils.rs:38:1: 45:2 }\n\t\t\t\t\tfn solana_program::account_info::AccountInfo::<'a>::try_borrow_data(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.9.5/src/account_info.rs:101:5: 105:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_17",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/redeem_printing_v2_bid.rs",
        "code": "metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 \n\tpub fn create_or_update_prize_tracking<'a>(\n    program_id: &'a Pubkey,\n    auction_manager_info: &AccountInfo<'a>,\n    prize_tracking_ticket_info: &AccountInfo<'a>,\n    metadata_account_info: &AccountInfo<'a>,\n    payer_info: &AccountInfo<'a>,\n    rent_info: &AccountInfo<'a>,\n    system_info: &AccountInfo<'a>,\n    master_edition_account_info: &AccountInfo<'a>,\n    expected_redemptions: u64,\n) -> Result<u64, ProgramError> {\n    let metadata_data = metadata_account_info.data.borrow();\n    let metadata_mint = Pubkey::new_from_array(*array_ref![metadata_data, 33, 32]);\n\n    let bump = assert_derivation(\n        program_id,\n        prize_tracking_ticket_info,\n        &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            auction_manager_info.key.as_ref(),\n            metadata_mint.as_ref(),\n        ],\n    )?;\n\n    let supply_snapshot: u64;\n    if prize_tracking_ticket_info.data_is_empty() {\n        create_or_allocate_account_raw(\n            *program_id,\n            prize_tracking_ticket_info,\n            rent_info,\n            system_info,\n            payer_info,\n            MAX_PRIZE_TRACKING_TICKET_SIZE,\n            &[\n                PREFIX.as_bytes(),\n                program_id.as_ref(),\n                auction_manager_info.key.as_ref(),\n                metadata_mint.as_ref(),\n                &[bump],\n            ],\n        )?;\n        let data = &mut prize_tracking_ticket_info.data.borrow_mut();\n        let output = array_mut_ref![data, 0, MAX_PRIZE_TRACKING_TICKET_SIZE];\n\n        let (key, metadata, supply_snapshot_ptr, expected_redemptions_ptr, redemptions, _padding) =\n            mut_array_refs![output, 1, 32, 8, 8, 8, 50];\n\n        *key = [Key::PrizeTrackingTicketV1 as u8];\n        metadata.copy_from_slice(metadata_account_info.key.as_ref());\n        supply_snapshot = get_supply_off_master_edition(master_edition_account_info)?;\n        *supply_snapshot_ptr = supply_snapshot.to_le_bytes();\n        *redemptions = 1u64.to_le_bytes();\n        *expected_redemptions_ptr = expected_redemptions.to_le_bytes();\n    } else {\n        // CPU is very precious in this large action, so we skip borsh's angry CPU usage.\n        let data = &mut prize_tracking_ticket_info.data.borrow_mut();\n        let output = array_mut_ref![data, 0, MAX_PRIZE_TRACKING_TICKET_SIZE];\n\n        let (_key, _metadata, supply_snapshot_ptr, _expected_redemptions, redemptions, _padding) =\n            mut_array_refs![output, 1, 32, 8, 8, 8, 50];\n        supply_snapshot = u64::from_le_bytes(*supply_snapshot_ptr);\n        let next_redemptions = u64::from_le_bytes(*redemptions)\n            .checked_add(1)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n        *redemptions = next_redemptions.to_le_bytes();\n    }\n\n    Ok(supply_snapshot)\n}",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn processor::redeem_participation_bid::v2_validation(){// metaplex/program/src/processor/redeem_participation_bid.rs:65:1: 129:2 }\n\t\t\t\tfn processor::redeem_printing_v2_bid::create_or_update_prize_tracking(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:96:1: 165:2 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_18",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 \n\tpub fn get_token_type_count(a: &AccountInfo) -> u8 {\n        return a.data.borrow()[194];\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn mpl_token_vault::state::Vault::get_token_type_count(){// /home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_19",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_participation_bid::process_redeem_participation_bid(){// metaplex/program/src/processor/redeem_participation_bid.rs:235:1: 447:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_20",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_21",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 \n\tpub fn get_token_type_count(a: &AccountInfo) -> u8 {\n        return a.data.borrow()[194];\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn mpl_token_vault::state::Vault::get_token_type_count(){// /home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_22",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_printing_v2_bid::process_redeem_printing_v2_bid(){// metaplex/program/src/processor/redeem_printing_v2_bid.rs:167:1: 350:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_23",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_24",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 \n\tpub fn get_token_type_count(a: &AccountInfo) -> u8 {\n        return a.data.borrow()[194];\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn mpl_token_vault::state::Vault::get_token_type_count(){// /home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_25",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_26",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_27",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 \n\tpub fn get_token_type_count(a: &AccountInfo) -> u8 {\n        return a.data.borrow()[194];\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn mpl_token_vault::state::Vault::get_token_type_count(){// /home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_28",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_unused_winning_config_items_as_auctioneer::process_redeem_unused_winning_config_items_as_auctioneer(){// metaplex/program/src/processor/redeem_unused_winning_config_items_as_auctioneer.rs:9:1: 32:2 }\n\t\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_29",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_30",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 \n\tpub fn get_token_type_count(a: &AccountInfo) -> u8 {\n        return a.data.borrow()[194];\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn mpl_token_vault::state::Vault::get_token_type_count(){// /home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_31",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_full_rights_transfer_bid::process_full_rights_transfer_bid(){// metaplex/program/src/processor/redeem_full_rights_transfer_bid.rs:17:1: 167:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_32",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_checks(){// metaplex/program/src/utils.rs:509:1: 681:2 }\n\t\t\t\tfn state::BidRedemptionTicket::check_ticket(){// metaplex/program/src/state.rs:1476:5: 1520:6 }\n\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_33",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs",
        "code": "/home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 \n\tpub fn get_token_type_count(a: &AccountInfo) -> u8 {\n        return a.data.borrow()[194];\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn mpl_token_vault::state::Vault::get_token_type_count(){// /home/ubuntu/VRust/metaplex-program-library/token-vault/program/src/state.rs:70:5: 72:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "InstructionId",
        "id": "TYP_CVE_34",
        "title": "Instruction id not checked error",
        "category": "Instruction id issue",
        "severity": "Critical",
        "location": "metaplex/program/src/state.rs",
        "code": "metaplex/program/src/state.rs:909:5: 912:6 \n\tpub fn get_order(a: &AccountInfo) -> u64 {\n        let data = a.data.borrow();\n        return u64::from_le_bytes(*array_ref![data, ORDER_POSITION, 8]);\n    }",
        "callstack": "fn entrypoint::process_instruction(){// metaplex/program/src/entrypoint.rs:14:1: 25:2 }\n\tfn processor::process_instruction(){// metaplex/program/src/processor.rs:50:1: 169:2 }\n\t\tfn processor::redeem_bid::process_redeem_bid(){// metaplex/program/src/processor/redeem_bid.rs:125:1: 284:2 }\n\t\t\tfn utils::common_redeem_finish(){// metaplex/program/src/utils.rs:702:1: 776:2 }\n\t\t\t\tfn state::BidRedemptionTicket::save(){// metaplex/program/src/state.rs:1546:5: 1599:6 }\n\t\t\t\t\tfn state::SafetyDepositConfig::get_order(){// metaplex/program/src/state.rs:909:5: 912:6 }\n",
        "status": "UnResolved",
        "description": "message",
        "link": "GitHub Link to be added.",
        "alleviation": "Description of the bug here."
      },
      {
        "type": "MissingCheckerCve",
        "id": "CHK_CVE_0",
        "title": "is_owner",
        "category": "Missing Owner Check",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/deprecated_validate_participation.rs",
        "code": "metaplex/program/src/processor/deprecated_validate_participation.rs:24:1: 176:2 \n\tpub fn process_deprecated_validate_participation(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n\n    let auction_manager_info = next_account_info(account_info_iter)?;\n    let open_edition_metadata_info = next_account_info(account_info_iter)?;\n    let open_master_edition_info = next_account_info(account_info_iter)?;\n    let printing_authorization_token_account_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let whitelisted_creator_info = next_account_info(account_info_iter)?;\n    let store_info = next_account_info(account_info_iter)?;\n    let safety_deposit_box_info = next_account_info(account_info_iter)?;\n    let safety_deposit_box_token_store_info = next_account_info(account_info_iter)?;\n    let vault_info = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n    let rent = &Rent::from_account_info(&rent_info)?;\n\n    let mut auction_manager = AuctionManagerV1::from_account_info(auction_manager_info)?;\n    let store = Store::from_account_info(store_info)?;\n    let vault = Vault::from_account_info(vault_info)?;\n    let safety_deposit_token_store: Account =\n        assert_initialized(safety_deposit_box_token_store_info)?;\n    let safety_deposit = SafetyDepositBox::from_account_info(safety_deposit_box_info)?;\n    let printing_token_account: Account =\n        assert_initialized(printing_authorization_token_account_info)?;\n    let open_edition_metadata = Metadata::from_account_info(open_edition_metadata_info)?;\n    let master_edition = MasterEditionV1::from_account_info(open_master_edition_info)?;\n\n    if vault.authority != *auction_manager_info.key {\n        return Err(MetaplexError::VaultAuthorityMismatch.into());\n    }\n\n    // top level authority and ownership check\n    assert_authority_correct(&auction_manager.authority, authority_info)?;\n    assert_owned_by(auction_manager_info, program_id)?;\n    assert_owned_by(open_edition_metadata_info, &store.token_metadata_program)?;\n    assert_owned_by(open_master_edition_info, &store.token_metadata_program)?;\n    assert_owned_by(\n        printing_authorization_token_account_info,\n        &store.token_program,\n    )?;\n    if *whitelisted_creator_info.key != solana_program::system_program::id() {\n        if whitelisted_creator_info.data_is_empty() {\n            return Err(MetaplexError::Uninitialized.into());\n        }\n        assert_owned_by(whitelisted_creator_info, program_id)?;\n    }\n    assert_owned_by(store_info, program_id)?;\n    assert_owned_by(safety_deposit_box_info, &store.token_vault_program)?;\n    assert_owned_by(safety_deposit_box_token_store_info, &store.token_program)?;\n    assert_owned_by(vault_info, &store.token_vault_program)?;\n    // is it the right vault, safety deposit, and token store?\n    assert_store_safety_vault_manager_match(\n        &auction_manager.vault,\n        &safety_deposit_box_info,\n        vault_info,\n        &store.token_vault_program,\n    )?;\n\n    // do the vault and store belong to this AM?\n    if auction_manager.store != *store_info.key {\n        return Err(MetaplexError::AuctionManagerStoreMismatch.into());\n    }\n\n    if auction_manager.vault != *vault_info.key {\n        return Err(MetaplexError::AuctionManagerVaultMismatch.into());\n    }\n    // Check creators\n    assert_at_least_one_creator_matches_or_store_public_and_all_verified(\n        program_id,\n        &auction_manager,\n        &open_edition_metadata,\n        whitelisted_creator_info,\n        store_info,\n    )?;\n\n    // Make sure master edition is the right master edition for this metadata given\n    assert_derivation(\n        &store.token_metadata_program,\n        open_master_edition_info,\n        &[\n            mpl_token_metadata::state::PREFIX.as_bytes(),\n            store.token_metadata_program.as_ref(),\n            &open_edition_metadata.mint.as_ref(),\n            mpl_token_metadata::state::EDITION.as_bytes(),\n        ],\n    )?;\n\n    // Assert the holding account for authorization tokens is rent filled, owned correctly, and ours\n    assert_owned_by(\n        printing_authorization_token_account_info,\n        &store.token_program,\n    )?;\n    assert_rent_exempt(rent, printing_authorization_token_account_info)?;\n\n    if printing_token_account.owner != *auction_manager_info.key {\n        return Err(MetaplexError::IncorrectOwner.into());\n    }\n\n    if printing_token_account.mint != master_edition.printing_mint {\n        return Err(MetaplexError::PrintingTokenAccountMintMismatch.into());\n    }\n\n    if printing_token_account.delegate != COption::None {\n        return Err(MetaplexError::DelegateShouldBeNone.into());\n    }\n\n    if printing_token_account.close_authority != COption::None {\n        return Err(MetaplexError::CloseAuthorityShouldBeNone.into());\n    }\n\n    if master_edition.max_supply.is_some() {\n        return Err(MetaplexError::CantUseLimitedSupplyEditionsWithOpenEditionAuction.into());\n    }\n\n    if master_edition.one_time_printing_authorization_mint != safety_deposit_token_store.mint {\n        return Err(MetaplexError::MasterEditionOneTimeAuthorizationMintMismatch.into());\n    }\n\n    if let Some(participation_config) = &auction_manager.settings.participation_config {\n        if participation_config.safety_deposit_box_index > vault.token_type_count {\n            return Err(MetaplexError::InvalidSafetyDepositBox.into());\n        }\n\n        if participation_config.safety_deposit_box_index != safety_deposit.order {\n            return Err(MetaplexError::SafetyDepositIndexMismatch.into());\n        }\n\n        if let Some(state) = auction_manager.state.participation_state {\n            if state.validated {\n                return Err(MetaplexError::AlreadyValidated.into());\n            }\n\n            auction_manager.state.participation_state = Some(ParticipationStateV1 {\n                collected_to_accept_payment: state.collected_to_accept_payment,\n                primary_sale_happened: open_edition_metadata.primary_sale_happened,\n                validated: true,\n                printing_authorization_token_account: Some(\n                    *printing_authorization_token_account_info.key,\n                ),\n            });\n        }\n\n        if auction_manager.settings.winning_configs.is_empty() {\n            auction_manager.state.status = AuctionManagerStatus::Validated;\n        }\n        auction_manager.serialize(&mut *auction_manager_info.data.borrow_mut())?;\n    }\n\n    Ok(())\n}",
        "callstack": "processor::deprecated_validate_participation::process_deprecated_validate_participation",
        "variable": "Todo: Add owner variable",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "MissingCheckerCve",
        "id": "CHK_CVE_1",
        "title": "is_owner",
        "category": "Missing Owner Check",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs",
        "code": "metaplex/program/src/processor/deprecated_validate_safety_deposit_box_v1.rs:67:1: 237:2 \n\tpub fn process_deprecated_validate_safety_deposit_box_v1<'a>(\n    program_id: &'a Pubkey,\n    accounts: &'a [AccountInfo<'a>],\n) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n    let safety_deposit_validation_ticket_info = next_account_info(account_info_iter)?;\n    let auction_manager_info = next_account_info(account_info_iter)?;\n    let metadata_info = next_account_info(account_info_iter)?;\n    let original_authority_lookup_info = next_account_info(account_info_iter)?;\n    let whitelisted_creator_info = next_account_info(account_info_iter)?;\n    let auction_manager_store_info = next_account_info(account_info_iter)?;\n    let safety_deposit_info = next_account_info(account_info_iter)?;\n    let safety_deposit_token_store_info = next_account_info(account_info_iter)?;\n    let mint_info = next_account_info(account_info_iter)?;\n    let edition_info = next_account_info(account_info_iter)?;\n    let vault_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let metadata_authority_info = next_account_info(account_info_iter)?;\n    let payer_info = next_account_info(account_info_iter)?;\n    let token_metadata_program_info = next_account_info(account_info_iter)?;\n    let system_info = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n\n    if !safety_deposit_validation_ticket_info.data_is_empty() {\n        return Err(MetaplexError::AlreadyValidated.into());\n    }\n\n    let mut auction_manager = AuctionManagerV1::from_account_info(auction_manager_info)?;\n    let safety_deposit = SafetyDepositBox::from_account_info(safety_deposit_info)?;\n    let _safety_deposit_token_store: Account = assert_initialized(safety_deposit_token_store_info)?;\n    let metadata = Metadata::from_account_info(metadata_info)?;\n    let store = Store::from_account_info(auction_manager_store_info)?;\n    // Is it a real vault?\n    let vault = Vault::from_account_info(vault_info)?;\n\n    let mut total_amount_requested: u64 = 0;\n    // At this point we know we have at least one config and they may have different amounts but all\n    // point at the same safety deposit box and so have the same winning config type.\n    // We default to TokenOnlyTransfer but this will get set by the loop.\n    let mut winning_config_type: WinningConfigType = WinningConfigType::TokenOnlyTransfer;\n    let mut winning_config_items_validated: u8 = 0;\n    let mut all_winning_config_items: u8 = 0;\n\n    for i in 0..auction_manager.settings.winning_configs.len() {\n        let possible_config = &auction_manager.settings.winning_configs[i];\n\n        for j in 0..possible_config.items.len() {\n            let possible_item = &possible_config.items[j];\n            all_winning_config_items = all_winning_config_items\n                .checked_add(1)\n                .ok_or(MetaplexError::NumericalOverflowError)?;\n\n            if possible_item.safety_deposit_box_index == safety_deposit.order {\n                winning_config_type = possible_item.winning_config_type;\n\n                winning_config_items_validated = winning_config_items_validated\n                    .checked_add(1)\n                    .ok_or(MetaplexError::NumericalOverflowError)?;\n\n                // Build array to sum total amount\n                total_amount_requested = total_amount_requested\n                    .checked_add(possible_item.amount.into())\n                    .ok_or(MetaplexError::NumericalOverflowError)?;\n                // Record that primary sale happened at time of validation for later royalties reconcilation\n                auction_manager.state.winning_config_states[i].items[j].primary_sale_happened =\n                    metadata.primary_sale_happened;\n            }\n        }\n    }\n\n    if let Some(participation_config) = &auction_manager.settings.participation_config {\n        if participation_config.safety_deposit_box_index == safety_deposit.order {\n            // Really it's unknown how many prints will be made\n            // but we set it to 1 since that's how many master edition tokens are in there.\n            total_amount_requested = total_amount_requested\n                .checked_add(1)\n                .ok_or(MetaplexError::NumericalOverflowError)?;\n\n            // now that participation configs can be validated through normal safety deposit endpoints, need to flip this boolean\n            // here too, until we can deprecate it later.\n            if let Some(state) = &auction_manager.state.participation_state {\n                auction_manager.state.participation_state = Some(ParticipationStateV1 {\n                    collected_to_accept_payment: state.collected_to_accept_payment,\n                    primary_sale_happened: state.primary_sale_happened,\n                    validated: true,\n                    printing_authorization_token_account: state\n                        .printing_authorization_token_account,\n                })\n            }\n        }\n    }\n\n    if total_amount_requested == 0 {\n        return Err(MetaplexError::SafetyDepositBoxNotUsedInAuction.into());\n    }\n\n    assert_common_checks(CommonCheckArgs {\n        program_id,\n        auction_manager_info,\n        metadata_info,\n        original_authority_lookup_info,\n        whitelisted_creator_info,\n        safety_deposit_info,\n        safety_deposit_token_store_info,\n        edition_info,\n        vault_info,\n        mint_info,\n        token_metadata_program_info,\n        auction_manager_store_info,\n        authority_info,\n        store: &store,\n        auction_manager: &auction_manager,\n        metadata: &metadata,\n        safety_deposit: &safety_deposit,\n        vault: &vault,\n        winning_config_type: &winning_config_type,\n    })?;\n\n    assert_supply_logic_check(SupplyLogicCheckArgs {\n        program_id,\n        auction_manager_info,\n        metadata_info,\n        edition_info,\n        metadata_authority_info,\n        original_authority_lookup_info,\n        rent_info,\n        system_info,\n        payer_info,\n        token_metadata_program_info,\n        auction_manager: &auction_manager,\n        winning_config_type: &winning_config_type,\n        metadata: &metadata,\n        safety_deposit: &safety_deposit,\n        store: &store,\n        safety_deposit_token_store_info,\n        total_amount_requested,\n    })?;\n\n    auction_manager.state.winning_config_items_validated = match auction_manager\n        .state\n        .winning_config_items_validated\n        .checked_add(winning_config_items_validated)\n    {\n        Some(val) => val,\n        None => return Err(MetaplexError::NumericalOverflowError.into()),\n    };\n\n    if auction_manager.state.winning_config_items_validated == all_winning_config_items {\n        let mut participation_okay = true;\n        if let Some(state) = &auction_manager.state.participation_state {\n            participation_okay = state.validated\n        }\n        if participation_okay {\n            auction_manager.state.status = AuctionManagerStatus::Validated\n        }\n    }\n\n    auction_manager.serialize(&mut *auction_manager_info.data.borrow_mut())?;\n\n    make_safety_deposit_validation(\n        program_id,\n        auction_manager_info,\n        safety_deposit_info,\n        safety_deposit_validation_ticket_info,\n        payer_info,\n        rent_info,\n        system_info,\n    )?;\n\n    Ok(())\n}",
        "callstack": "processor::deprecated_validate_safety_deposit_box_v1::process_deprecated_validate_safety_deposit_box_v1",
        "variable": "Todo: Add owner variable",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "MissingCheckerCve",
        "id": "CHK_CVE_2",
        "title": "is_owner",
        "category": "Missing Owner Check",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/empty_payment_account.rs",
        "code": "metaplex/program/src/processor/empty_payment_account.rs:212:1: 458:2 \n\tpub fn process_empty_payment_account(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    args: EmptyPaymentAccountArgs,\n) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n    let accept_payment_info = next_account_info(account_info_iter)?;\n    let destination_info = next_account_info(account_info_iter)?;\n    let auction_manager_info = next_account_info(account_info_iter)?;\n    let payout_ticket_info = next_account_info(account_info_iter)?;\n    let payer_info = next_account_info(account_info_iter)?;\n    let metadata_info = next_account_info(account_info_iter)?;\n    let master_edition_info = next_account_info(account_info_iter)?;\n    let safety_deposit_info = next_account_info(account_info_iter)?;\n    let store_info = next_account_info(account_info_iter)?;\n    let vault_info = next_account_info(account_info_iter)?;\n    let auction_info = next_account_info(account_info_iter)?;\n    let token_program_info = next_account_info(account_info_iter)?;\n    let system_info = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n    let auction_token_tracker_info = next_account_info(account_info_iter).ok();\n    let safety_deposit_config_info = next_account_info(account_info_iter).ok();\n\n    if let Some(tracker_info) = auction_token_tracker_info {\n        assert_derivation(\n            program_id,\n            tracker_info,\n            &[\n                PREFIX.as_bytes(),\n                &program_id.as_ref(),\n                auction_manager_info.key.as_ref(),\n                TOTALS.as_bytes(),\n            ],\n        )?;\n    }\n\n    let rent = &Rent::from_account_info(&rent_info)?;\n\n    let auction_manager = get_auction_manager(auction_manager_info)?;\n    let store = Store::from_account_info(store_info)?;\n    let safety_deposit = SafetyDepositBox::from_account_info(safety_deposit_info)?;\n    let metadata = Metadata::from_account_info(metadata_info)?;\n    let auction = AuctionData::from_account_info(auction_info)?;\n    let destination: Account = assert_initialized(destination_info)?;\n    let accept_payment: Account = assert_initialized(accept_payment_info)?;\n\n    if auction_manager.store() != *store_info.key {\n        return Err(MetaplexError::AuctionManagerStoreMismatch.into());\n    }\n\n    msg!(\n        \"At this point, accept payment has {:?} in it\",\n        accept_payment.amount\n    );\n\n    // Before continuing further, assert all bid monies have been pushed to the main escrow\n    // account so that we have a complete (less the unredeemed participation nft bids) accounting\n    // to work with\n    auction_manager.assert_all_bids_claimed(&auction)?;\n\n    if *token_program_info.key != store.token_program {\n        return Err(MetaplexError::AuctionManagerTokenProgramMismatch.into());\n    }\n\n    assert_owned_by(auction_manager_info, program_id)?;\n    if !payout_ticket_info.data_is_empty() {\n        assert_owned_by(payout_ticket_info, program_id)?;\n    }\n    assert_owned_by(destination_info, token_program_info.key)?;\n    assert_owned_by(accept_payment_info, token_program_info.key)?;\n    assert_owned_by(metadata_info, &store.token_metadata_program)?;\n    if *master_edition_info.key != solana_program::system_program::id() {\n        assert_owned_by(master_edition_info, &store.token_metadata_program)?;\n    }\n    assert_owned_by(safety_deposit_info, &store.token_vault_program)?;\n    assert_owned_by(store_info, program_id)?;\n    assert_owned_by(vault_info, &store.token_vault_program)?;\n    assert_owned_by(auction_info, &store.auction_program)?;\n    assert_rent_exempt(rent, destination_info)?;\n\n    // Assert the winning config points to the safety deposit you sent up\n    auction_manager.assert_winning_config_safety_deposit_validity(\n        &safety_deposit,\n        args.winning_config_index,\n        args.winning_config_item_index,\n    )?;\n\n    assert_safety_deposit_config_valid(\n        program_id,\n        auction_manager_info,\n        safety_deposit_info,\n        safety_deposit_config_info,\n        &auction_manager.key(),\n    )?;\n\n    // assert the destination account matches the ownership expected to creator or auction manager authority\n    // given in the argument's creator index\n    assert_destination_ownership_validity(\n        &auction_manager,\n        &metadata,\n        destination_info,\n        &destination,\n        &store,\n        args.creator_index,\n    )?;\n\n    // further assert that the vault and safety deposit are correctly matched to the auction manager\n    if auction_manager.vault() != *vault_info.key {\n        return Err(MetaplexError::AuctionManagerVaultMismatch.into());\n    }\n\n    if auction_manager.auction() != *auction_info.key {\n        return Err(MetaplexError::AuctionManagerAuctionMismatch.into());\n    }\n\n    if safety_deposit.vault != *vault_info.key {\n        return Err(MetaplexError::SafetyDepositBoxVaultMismatch.into());\n    }\n\n    // assert that the metadata sent up is the metadata in the safety deposit\n    if metadata.mint != safety_deposit.token_mint {\n        if master_edition_info.data.borrow()[0]\n            == mpl_token_metadata::state::Key::MasterEditionV1 as u8\n        {\n            // Could be a limited edition, in which case printing tokens or auth tokens were offered, not the original.\n            let master_edition: MasterEditionV1 =\n                MasterEditionV1::from_account_info(master_edition_info)?;\n            if master_edition.printing_mint != safety_deposit.token_mint\n                && master_edition.one_time_printing_authorization_mint != safety_deposit.token_mint\n            {\n                return Err(MetaplexError::SafetyDepositBoxMetadataMismatch.into());\n            }\n        } else {\n            return Err(MetaplexError::SafetyDepositBoxMetadataMismatch.into());\n        }\n    }\n\n    // make sure the accept payment account is right\n    if auction_manager.accept_payment() != *accept_payment_info.key {\n        return Err(MetaplexError::AcceptPaymentMismatch.into());\n    }\n\n    if destination.mint != accept_payment.mint {\n        return Err(MetaplexError::AcceptPaymentMintMismatch.into());\n    }\n\n    let winning_config_index_key: String = match args.winning_config_index {\n        Some(val) => val.to_string(),\n        None => \"participation\".to_owned(),\n    };\n\n    let winning_config_item_index_key: String = match args.winning_config_item_index {\n        Some(val) => val.to_string(),\n        None => \"0\".to_owned(),\n    };\n\n    let creator_index_key: String = match args.creator_index {\n        Some(val) => val.to_string(),\n        None => \"auctioneer\".to_owned(),\n    };\n\n    let payout_bump = assert_derivation(\n        program_id,\n        payout_ticket_info,\n        &[\n            PREFIX.as_bytes(),\n            auction_manager_info.key.as_ref(),\n            winning_config_index_key.as_bytes(),\n            winning_config_item_index_key.as_bytes(),\n            creator_index_key.as_bytes(),\n            &safety_deposit_info.key.as_ref(),\n            &destination.owner.as_ref(),\n        ],\n    )?;\n\n    let payout_seeds = &[\n        PREFIX.as_bytes(),\n        auction_manager_info.key.as_ref(),\n        winning_config_index_key.as_bytes(),\n        winning_config_item_index_key.as_bytes(),\n        creator_index_key.as_bytes(),\n        &safety_deposit_info.key.as_ref(),\n        &destination.owner.as_ref(),\n        &[payout_bump],\n    ];\n\n    if payout_ticket_info.data_is_empty() {\n        create_or_allocate_account_raw(\n            *program_id,\n            payout_ticket_info,\n            rent_info,\n            system_info,\n            payer_info,\n            MAX_PAYOUT_TICKET_SIZE,\n            payout_seeds,\n        )?;\n    }\n\n    let mut payout_ticket = PayoutTicket::from_account_info(payout_ticket_info)?;\n    payout_ticket.recipient = destination.owner;\n    payout_ticket.key = Key::PayoutTicketV1;\n\n    let amount = calculate_owed_amount(\n        auction_token_tracker_info,\n        safety_deposit_config_info,\n        &auction_manager,\n        &auction,\n        &metadata,\n        &args.winning_config_index,\n        &args.winning_config_item_index,\n        &args.creator_index,\n    )?;\n\n    let final_amount = amount\n        .checked_sub(payout_ticket.amount_paid)\n        .ok_or(MetaplexError::NumericalOverflowError)?;\n\n    if final_amount > 0 {\n        payout_ticket.amount_paid = payout_ticket\n            .amount_paid\n            .checked_add(final_amount)\n            .ok_or(MetaplexError::NumericalOverflowError)?;\n\n        let auction_key = auction_manager.auction();\n\n        let bump_seed = assert_derivation(\n            program_id,\n            auction_manager_info,\n            &[PREFIX.as_bytes(), auction_key.as_ref()],\n        )?;\n\n        let authority_seeds = &[PREFIX.as_bytes(), auction_key.as_ref(), &[bump_seed]];\n\n        spl_token_transfer(\n            accept_payment_info.clone(),\n            destination_info.clone(),\n            final_amount,\n            auction_manager_info.clone(),\n            authority_seeds,\n            token_program_info.clone(),\n        )?;\n    }\n\n    payout_ticket.serialize(&mut *payout_ticket_info.data.borrow_mut())?;\n\n    Ok(())\n}",
        "callstack": "processor::empty_payment_account::process_empty_payment_account",
        "variable": "Todo: Add owner variable",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "MissingCheckerCve",
        "id": "CHK_CVE_3",
        "title": "is_owner",
        "category": "Missing Owner Check",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/validate_safety_deposit_box_v2.rs",
        "code": "metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:205:1: 381:2 \n\tpub fn assert_supply_logic_check(args: SupplyLogicCheckArgs) -> ProgramResult {\n    let SupplyLogicCheckArgs {\n        program_id,\n        auction_manager_info,\n        metadata_info,\n        edition_info,\n        metadata_authority_info,\n        original_authority_lookup_info,\n        rent_info,\n        system_info,\n        payer_info,\n        token_metadata_program_info,\n        auction_manager,\n        winning_config_type,\n        metadata,\n        safety_deposit,\n        store,\n        safety_deposit_token_store_info,\n        total_amount_requested,\n    } = args;\n\n    let safety_deposit_token_store: Account = assert_initialized(safety_deposit_token_store_info)?;\n\n    let edition_seeds = &[\n        mpl_token_metadata::state::PREFIX.as_bytes(),\n        store.token_metadata_program.as_ref(),\n        &metadata.mint.as_ref(),\n        mpl_token_metadata::state::EDITION.as_bytes(),\n    ];\n\n    let (edition_key, _) =\n        Pubkey::find_program_address(edition_seeds, &store.token_metadata_program);\n\n    let auction_key = auction_manager.auction();\n    let seeds = &[PREFIX.as_bytes(), auction_key.as_ref()];\n    let (_, bump_seed) = Pubkey::find_program_address(seeds, &program_id);\n    let authority_seeds = &[PREFIX.as_bytes(), auction_key.as_ref(), &[bump_seed]];\n    // Supply logic check\n    match winning_config_type {\n        WinningConfigType::FullRightsTransfer => {\n            assert_update_authority_is_correct(&metadata, metadata_authority_info)?;\n\n            if safety_deposit.token_mint != metadata.mint {\n                return Err(MetaplexError::SafetyDepositBoxMetadataMismatch.into());\n            }\n            if edition_key != *edition_info.key {\n                return Err(MetaplexError::InvalidEditionAddress.into());\n            }\n\n            if safety_deposit_token_store.amount != 1 {\n                return Err(MetaplexError::StoreIsEmpty.into());\n            }\n\n            if total_amount_requested != 1 {\n                return Err(MetaplexError::NotEnoughTokensToSupplyWinners.into());\n            }\n\n            let auction_key = auction_manager.auction();\n\n            let original_authority_lookup_seeds = &[\n                PREFIX.as_bytes(),\n                auction_key.as_ref(),\n                metadata_info.key.as_ref(),\n            ];\n\n            let (expected_key, original_bump_seed) =\n                Pubkey::find_program_address(original_authority_lookup_seeds, &program_id);\n            let original_authority_seeds = &[\n                PREFIX.as_bytes(),\n                auction_key.as_ref(),\n                metadata_info.key.as_ref(),\n                &[original_bump_seed],\n            ];\n\n            if expected_key != *original_authority_lookup_info.key {\n                return Err(MetaplexError::OriginalAuthorityLookupKeyMismatch.into());\n            }\n\n            // We may need to transfer authority back, or to the new owner, so we need to keep track\n            // of original ownership\n            create_or_allocate_account_raw(\n                *program_id,\n                original_authority_lookup_info,\n                rent_info,\n                system_info,\n                payer_info,\n                MAX_AUTHORITY_LOOKUP_SIZE,\n                original_authority_seeds,\n            )?;\n\n            let mut original_authority_lookup =\n                OriginalAuthorityLookup::from_account_info(original_authority_lookup_info)?;\n            original_authority_lookup.key = Key::OriginalAuthorityLookupV1;\n\n            original_authority_lookup.original_authority = *metadata_authority_info.key;\n\n            transfer_metadata_ownership(\n                token_metadata_program_info.clone(),\n                metadata_info.clone(),\n                metadata_authority_info.clone(),\n                auction_manager_info.clone(),\n                authority_seeds,\n            )?;\n\n            original_authority_lookup\n                .serialize(&mut *original_authority_lookup_info.data.borrow_mut())?;\n        }\n        WinningConfigType::TokenOnlyTransfer => {\n            if safety_deposit.token_mint != metadata.mint {\n                return Err(MetaplexError::SafetyDepositBoxMetadataMismatch.into());\n            }\n            if safety_deposit_token_store.amount < total_amount_requested {\n                return Err(MetaplexError::NotEnoughTokensToSupplyWinners.into());\n            }\n        }\n        WinningConfigType::PrintingV1 => {\n            if edition_key != *edition_info.key {\n                return Err(MetaplexError::InvalidEditionAddress.into());\n            }\n            let master_edition = MasterEditionV1::from_account_info(edition_info)?;\n            if safety_deposit.token_mint != master_edition.printing_mint {\n                return Err(MetaplexError::SafetyDepositBoxMasterMintMismatch.into());\n            }\n\n            if safety_deposit_token_store.amount != total_amount_requested {\n                return Err(MetaplexError::NotEnoughTokensToSupplyWinners.into());\n            }\n        }\n        WinningConfigType::PrintingV2 => {\n            if edition_key != *edition_info.key {\n                return Err(MetaplexError::InvalidEditionAddress.into());\n            }\n            let master_edition = MasterEditionV2::from_account_info(edition_info)?;\n            if safety_deposit.token_mint != metadata.mint {\n                return Err(MetaplexError::SafetyDepositBoxMetadataMismatch.into());\n            }\n\n            if safety_deposit_token_store.amount != 1 {\n                return Err(MetaplexError::NotEnoughTokensToSupplyWinners.into());\n            }\n\n            if let Some(max) = master_edition.max_supply {\n                let amount_available = max\n                    .checked_sub(master_edition.supply)\n                    .ok_or(MetaplexError::NumericalOverflowError)?;\n                if amount_available < total_amount_requested {\n                    return Err(MetaplexError::NotEnoughTokensToSupplyWinners.into());\n                }\n            }\n        }\n        WinningConfigType::Participation => {\n            // Impossible to use a MEV1 through this avenue of participation...no one time auth token allowed here...\n            // If you wish to use those, you must use the AuctionManagerV1 pathway which allows use of the older endpoints,\n            // which will classify Participation as a PrintingV2 if it's an MEv2 or use the validate_participation endpoint\n            // if it's an MEv1.\n            if edition_key != *edition_info.key {\n                return Err(MetaplexError::InvalidEditionAddress.into());\n            }\n            let master_edition = MasterEditionV2::from_account_info(edition_info)?;\n            if safety_deposit.token_mint != metadata.mint {\n                return Err(MetaplexError::SafetyDepositBoxMetadataMismatch.into());\n            }\n\n            if safety_deposit_token_store.amount != 1 {\n                return Err(MetaplexError::NotEnoughTokensToSupplyWinners.into());\n            }\n\n            if master_edition.max_supply.is_some() {\n                return Err(\n                    MetaplexError::CantUseLimitedSupplyEditionsWithOpenEditionAuction.into(),\n                );\n            }\n        }\n    }\n\n    Ok(())\n}",
        "callstack": "processor::validate_safety_deposit_box_v2::assert_supply_logic_check",
        "variable": "Todo: Add owner variable",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "MissingCheckerCve",
        "id": "CHK_CVE_4",
        "title": "is_owner",
        "category": "Missing Owner Check",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/set_whitelisted_creator.rs",
        "code": "metaplex/program/src/processor/set_whitelisted_creator.rs:16:1: 84:2 \n\tpub fn process_set_whitelisted_creator<'a>(\n    program_id: &'a Pubkey,\n    accounts: &'a [AccountInfo<'a>],\n    activated: bool,\n) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n\n    let whitelisted_creator_info = next_account_info(account_info_iter)?;\n    let admin_wallet_info = next_account_info(account_info_iter)?;\n    let payer_info = next_account_info(account_info_iter)?;\n    let creator_info = next_account_info(account_info_iter)?;\n    let store_info = next_account_info(account_info_iter)?;\n    let system_info = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n\n    assert_signer(payer_info)?;\n    assert_signer(admin_wallet_info)?;\n    if !whitelisted_creator_info.data_is_empty() {\n        assert_owned_by(whitelisted_creator_info, program_id)?;\n    }\n    assert_owned_by(store_info, program_id)?;\n\n    assert_derivation(\n        program_id,\n        store_info,\n        &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            admin_wallet_info.key.as_ref(),\n        ],\n    )?;\n\n    let creator_bump = assert_derivation(\n        program_id,\n        whitelisted_creator_info,\n        &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            store_info.key.as_ref(),\n            creator_info.key.as_ref(),\n        ],\n    )?;\n\n    if whitelisted_creator_info.data_is_empty() {\n        create_or_allocate_account_raw(\n            *program_id,\n            whitelisted_creator_info,\n            rent_info,\n            system_info,\n            payer_info,\n            MAX_WHITELISTED_CREATOR_SIZE,\n            &[\n                PREFIX.as_bytes(),\n                program_id.as_ref(),\n                store_info.key.as_ref(),\n                creator_info.key.as_ref(),\n                &[creator_bump],\n            ],\n        )?;\n    }\n\n    let mut whitelisted_creator = WhitelistedCreator::from_account_info(whitelisted_creator_info)?;\n    whitelisted_creator.key = Key::WhitelistedCreatorV1;\n    whitelisted_creator.address = *creator_info.key;\n    whitelisted_creator.activated = activated;\n\n    whitelisted_creator.serialize(&mut *whitelisted_creator_info.data.borrow_mut())?;\n    Ok(())\n}",
        "callstack": "processor::set_whitelisted_creator::process_set_whitelisted_creator",
        "variable": "Todo: Add owner variable",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "MissingCheckerCve",
        "id": "CHK_CVE_5",
        "title": "is_owner",
        "category": "Missing Owner Check",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/set_store_index.rs",
        "code": "metaplex/program/src/processor/set_store_index.rs:22:1: 217:2 \n\tpub fn process_set_store_index<'a>(\n    program_id: &'a Pubkey,\n    accounts: &'a [AccountInfo<'a>],\n    args: SetStoreIndexArgs,\n) -> ProgramResult {\n    let SetStoreIndexArgs { offset, page } = args;\n\n    let offset_u = offset as usize;\n\n    let account_info_iter = &mut accounts.iter();\n\n    let store_index_info = next_account_info(account_info_iter)?;\n    let payer_info = next_account_info(account_info_iter)?;\n    let auction_cache_info = next_account_info(account_info_iter)?;\n    let store_info = next_account_info(account_info_iter)?;\n    let system_info = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n    let above_cache_info = next_account_info(account_info_iter).ok();\n    let below_cache_info = next_account_info(account_info_iter).ok();\n    let _store = Store::from_account_info(store_info)?;\n    let auction_cache = AuctionCache::from_account_info(auction_cache_info)?;\n\n    let mut below_cache: Option<AuctionCache> = None;\n    let mut above_cache: Option<AuctionCache> = None;\n\n    assert_signer(payer_info)?;\n    assert_owned_by(store_info, program_id)?;\n    assert_owned_by(auction_cache_info, program_id)?;\n\n    if system_info.key != &solana_program::system_program::id() {\n        return Err(MetaplexError::InvalidSystemProgram.into());\n    }\n\n    assert_derivation(\n        program_id,\n        auction_cache_info,\n        &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            store_info.key.as_ref(),\n            auction_cache.auction.as_ref(),\n            CACHE.as_bytes(),\n        ],\n    )?;\n\n    if let Some(below) = below_cache_info {\n        let unwrapped = AuctionCache::from_account_info(below)?;\n\n        assert_derivation(\n            program_id,\n            below,\n            &[\n                PREFIX.as_bytes(),\n                program_id.as_ref(),\n                store_info.key.as_ref(),\n                unwrapped.auction.as_ref(),\n                CACHE.as_bytes(),\n            ],\n        )?;\n        assert_owned_by(below, program_id)?;\n\n        below_cache = Some(unwrapped);\n    }\n\n    if let Some(above) = &above_cache_info {\n        let unwrapped = AuctionCache::from_account_info(above)?;\n\n        assert_derivation(\n            program_id,\n            above,\n            &[\n                PREFIX.as_bytes(),\n                program_id.as_ref(),\n                store_info.key.as_ref(),\n                unwrapped.auction.as_ref(),\n                CACHE.as_bytes(),\n            ],\n        )?;\n        assert_owned_by(above, program_id)?;\n\n        above_cache = Some(unwrapped);\n    }\n\n    let as_string = page.to_string();\n    let bump = assert_derivation(\n        program_id,\n        store_index_info,\n        &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            store_info.key.as_ref(),\n            INDEX.as_bytes(),\n            as_string.as_bytes(),\n        ],\n    )?;\n\n    if store_index_info.data_is_empty() {\n        let signer_seeds = &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            store_info.key.as_ref(),\n            INDEX.as_bytes(),\n            as_string.as_bytes(),\n            &[bump],\n        ];\n\n        create_or_allocate_account_raw(\n            *program_id,\n            store_index_info,\n            rent_info,\n            system_info,\n            payer_info,\n            MAX_STORE_INDEXER_SIZE,\n            signer_seeds,\n        )?;\n    }\n\n    assert_owned_by(store_index_info, program_id)?;\n\n    let mut indexer = StoreIndexer::from_account_info(store_index_info)?;\n    indexer.key = Key::StoreIndexerV1;\n    indexer.store = *store_info.key;\n    indexer.page = page;\n\n    if offset_u > indexer.auction_caches.len() {\n        return Err(MetaplexError::InvalidCacheOffset.into());\n    }\n\n    if indexer.auction_caches.len() > 0 && offset_u < indexer.auction_caches.len() - 1 {\n        let above_key = &indexer.auction_caches[offset_u];\n        if let Some(abo) = &above_cache {\n            if let Some(above_cache_info_unwrapped) = above_cache_info {\n                if above_cache_info_unwrapped.key != above_key {\n                    return Err(MetaplexError::CacheMismatch.into());\n                } else if abo.timestamp > auction_cache.timestamp {\n                    return Err(MetaplexError::CacheAboveIsNewer.into());\n                }\n            } else {\n                msg!(\"Should never happen\");\n                return Err(MetaplexError::InvalidOperation.into());\n            }\n        } else {\n            return Err(MetaplexError::ExpectedAboveAuctionCacheToBeProvided.into());\n        }\n    }\n\n    if offset_u > 0 {\n        let below_key = &indexer.auction_caches[offset_u - 1];\n        // special case where you're at top of stack, there is no above\n        let cache_used_for_below = if offset_u == indexer.auction_caches.len() - 1 {\n            &above_cache\n        } else {\n            &below_cache\n        };\n\n        let cache_info_used_for_below = if offset_u == indexer.auction_caches.len() - 1 {\n            above_cache_info\n        } else {\n            below_cache_info\n        };\n\n        if let Some(bel) = cache_used_for_below {\n            if let Some(below_cache_info_unwrapped) = cache_info_used_for_below {\n                if below_cache_info_unwrapped.key != below_key {\n                    return Err(MetaplexError::CacheMismatch.into());\n                } else if bel.timestamp < auction_cache.timestamp {\n                    return Err(MetaplexError::CacheBelowIsOlder.into());\n                }\n            } else {\n                msg!(\"Should never happen\");\n                return Err(MetaplexError::InvalidOperation.into());\n            }\n        } else {\n            return Err(MetaplexError::ExpectedAboveAuctionCacheToBeProvided.into());\n        }\n    }\n\n    let mut new_vec = vec![];\n\n    for n in 0..offset_u {\n        new_vec.push(indexer.auction_caches[n])\n    }\n\n    new_vec.push(*auction_cache_info.key);\n\n    for n in offset_u..indexer.auction_caches.len() {\n        if new_vec.len() == MAX_INDEXED_ELEMENTS {\n            break;\n        }\n        new_vec.push(indexer.auction_caches[n])\n    }\n\n    indexer.auction_caches = new_vec;\n    indexer.serialize(&mut *store_index_info.data.borrow_mut())?;\n    Ok(())\n}",
        "callstack": "processor::set_store_index::process_set_store_index",
        "variable": "Todo: Add owner variable",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "MissingCheckerCve",
        "id": "CHK_CVE_6",
        "title": "is_owner",
        "category": "Missing Owner Check",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/deprecated_init_auction_manager_v1.rs",
        "code": "metaplex/program/src/processor/deprecated_init_auction_manager_v1.rs:20:1: 133:2 \n\tpub fn process_deprecated_init_auction_manager_v1(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    auction_manager_settings: AuctionManagerSettingsV1,\n) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n\n    let auction_manager_info = next_account_info(account_info_iter)?;\n    let vault_info = next_account_info(account_info_iter)?;\n    let auction_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let payer_info = next_account_info(account_info_iter)?;\n    let accept_payment_info = next_account_info(account_info_iter)?;\n    let store_info = next_account_info(account_info_iter)?;\n    let system_info = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n    let (bump_seed, vault, auction) = assert_common_checks(\n        program_id,\n        auction_manager_info,\n        vault_info,\n        auction_info,\n        store_info,\n        accept_payment_info,\n        authority_info,\n    )?;\n\n    if auction_manager_settings.winning_configs.len() != auction.num_possible_winners() as usize {\n        return Err(MetaplexError::WinnerAmountMismatch.into());\n    }\n\n    let mut winning_config_states: Vec<WinningConfigState> = vec![];\n    let mut winning_item_count: u8 = 0;\n    let mut any_with_more_than_one = false;\n    for winning_config in &auction_manager_settings.winning_configs {\n        let mut winning_config_state_items = vec![];\n        let mut safety_deposit_box_found_lookup: Vec<bool> = vec![];\n        for _ in 0..vault.token_type_count {\n            safety_deposit_box_found_lookup.push(false)\n        }\n        if winning_config.items.len() > 1 {\n            any_with_more_than_one = true;\n        }\n        for item in &winning_config.items {\n            // If this blows then they have more than 255 total items which is unacceptable in current impl\n            winning_item_count = winning_item_count\n                .checked_add(1)\n                .ok_or(MetaplexError::NumericalOverflowError)?;\n\n            // Check if index referenced exists\n            if item.safety_deposit_box_index as usize >= safety_deposit_box_found_lookup.len() {\n                return Err(MetaplexError::InvalidWinningConfigSafetyDepositIndex.into());\n            }\n\n            // Should never have same deposit index appear twice in one config.\n            let lookup = safety_deposit_box_found_lookup[item.safety_deposit_box_index as usize];\n            if lookup {\n                return Err(MetaplexError::DuplicateWinningConfigItemDetected.into());\n            } else {\n                safety_deposit_box_found_lookup[item.safety_deposit_box_index as usize] = true\n            }\n\n            if item.safety_deposit_box_index > vault.token_type_count {\n                return Err(MetaplexError::InvalidSafetyDepositBox.into());\n            }\n\n            winning_config_state_items.push(WinningConfigStateItem {\n                claimed: false,\n                primary_sale_happened: false,\n            })\n        }\n        winning_config_states.push(WinningConfigState {\n            items: winning_config_state_items,\n            money_pushed_to_accept_payment: false,\n        })\n    }\n\n    let authority_seeds = &[PREFIX.as_bytes(), &auction_info.key.as_ref(), &[bump_seed]];\n\n    create_or_allocate_account_raw(\n        *program_id,\n        auction_manager_info,\n        rent_info,\n        system_info,\n        payer_info,\n        MAX_AUCTION_MANAGER_V1_SIZE,\n        authority_seeds,\n    )?;\n\n    let mut auction_manager = AuctionManagerV1::from_account_info(auction_manager_info)?;\n\n    auction_manager.key = Key::AuctionManagerV1;\n    auction_manager.store = *store_info.key;\n    auction_manager.state.status = AuctionManagerStatus::Initialized;\n    auction_manager.settings = auction_manager_settings;\n    auction_manager.vault = *vault_info.key;\n    auction_manager.auction = *auction_info.key;\n    auction_manager.authority = *authority_info.key;\n    auction_manager.accept_payment = *accept_payment_info.key;\n    auction_manager.state.winning_config_items_validated = 0;\n    auction_manager.state.winning_config_states = winning_config_states;\n    auction_manager.straight_shot_optimization = !any_with_more_than_one;\n\n    if auction_manager.settings.participation_config.is_some() {\n        auction_manager.state.participation_state = Some(ParticipationStateV1 {\n            collected_to_accept_payment: 0,\n            validated: false,\n            primary_sale_happened: false,\n            printing_authorization_token_account: None,\n        })\n    }\n    auction_manager.serialize(&mut *auction_manager_info.data.borrow_mut())?;\n\n    Ok(())\n}",
        "callstack": "processor::deprecated_init_auction_manager_v1::process_deprecated_init_auction_manager_v1",
        "variable": "Todo: Add owner variable",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "MissingCheckerCve",
        "id": "CHK_CVE_7",
        "title": "is_owner",
        "category": "Missing Owner Check",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/init_auction_manager_v2.rs",
        "code": "metaplex/program/src/processor/init_auction_manager_v2.rs:97:1: 196:2 \n\tpub fn process_init_auction_manager_v2(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    amount_type: TupleNumericType,\n    length_type: TupleNumericType,\n    max_ranges: u64,\n) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n\n    let auction_manager_info = next_account_info(account_info_iter)?;\n    let auction_token_tracker_info = next_account_info(account_info_iter)?;\n    let vault_info = next_account_info(account_info_iter)?;\n    let auction_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let payer_info = next_account_info(account_info_iter)?;\n    let accept_payment_info = next_account_info(account_info_iter)?;\n    let store_info = next_account_info(account_info_iter)?;\n    let system_info = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n\n    let (bump_seed, _vault, _auction) = assert_common_checks(\n        program_id,\n        auction_manager_info,\n        vault_info,\n        auction_info,\n        store_info,\n        accept_payment_info,\n        authority_info,\n    )?;\n\n    let authority_seeds = &[PREFIX.as_bytes(), &auction_info.key.as_ref(), &[bump_seed]];\n\n    create_or_allocate_account_raw(\n        *program_id,\n        auction_manager_info,\n        rent_info,\n        system_info,\n        payer_info,\n        MAX_AUCTION_MANAGER_V2_SIZE,\n        authority_seeds,\n    )?;\n\n    let mut auction_manager = AuctionManagerV2::from_account_info(auction_manager_info)?;\n\n    auction_manager.key = Key::AuctionManagerV2;\n    auction_manager.store = *store_info.key;\n    auction_manager.state.status = AuctionManagerStatus::Initialized;\n    auction_manager.vault = *vault_info.key;\n    auction_manager.auction = *auction_info.key;\n    auction_manager.authority = *authority_info.key;\n    auction_manager.accept_payment = *accept_payment_info.key;\n    auction_manager.state.safety_config_items_validated = 0;\n    auction_manager.state.bids_pushed_to_accept_payment = 0;\n\n    auction_manager.serialize(&mut *auction_manager_info.data.borrow_mut())?;\n\n    if !auction_token_tracker_info.data_is_empty() {\n        return Err(ProgramError::AccountAlreadyInitialized);\n    } else {\n        let token_bump = assert_derivation(\n            program_id,\n            auction_token_tracker_info,\n            &[\n                PREFIX.as_bytes(),\n                &program_id.as_ref(),\n                auction_manager_info.key.as_ref(),\n                TOTALS.as_bytes(),\n            ],\n        )?;\n\n        let token_type_tracker = AuctionWinnerTokenTypeTracker {\n            key: Key::AuctionWinnerTokenTypeTrackerV1,\n            amount_type,\n            length_type,\n            amount_ranges: vec![],\n        };\n\n        let token_seeds = &[\n            PREFIX.as_bytes(),\n            &program_id.as_ref(),\n            auction_manager_info.key.as_ref(),\n            TOTALS.as_bytes(),\n            &[token_bump],\n        ];\n\n        create_or_allocate_account_raw(\n            *program_id,\n            auction_token_tracker_info,\n            rent_info,\n            system_info,\n            payer_info,\n            token_type_tracker.created_size(max_ranges),\n            token_seeds,\n        )?;\n\n        token_type_tracker.save(&auction_token_tracker_info);\n    }\n\n    Ok(())\n}",
        "callstack": "processor::init_auction_manager_v2::process_init_auction_manager_v2",
        "variable": "Todo: Add owner variable",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "MissingCheckerCve",
        "id": "CHK_CVE_8",
        "title": "is_owner",
        "category": "Missing Owner Check",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/set_auction_cache.rs",
        "code": "metaplex/program/src/processor/set_auction_cache.rs:19:1: 143:2 \n\tpub fn process_set_auction_cache<'a>(\n    program_id: &'a Pubkey,\n    accounts: &'a [AccountInfo<'a>],\n) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n\n    let auction_cache_info = next_account_info(account_info_iter)?;\n    let payer_info = next_account_info(account_info_iter)?;\n    let auction_info = next_account_info(account_info_iter)?;\n    let safety_deposit_box_info = next_account_info(account_info_iter)?;\n    let auction_manager_info = next_account_info(account_info_iter)?;\n    let store_info = next_account_info(account_info_iter)?;\n    let system_info = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n    let clock_info = next_account_info(account_info_iter)?;\n    let clock = Clock::from_account_info(clock_info)?;\n    let store = Store::from_account_info(store_info)?;\n    let _auction = AuctionData::from_account_info(auction_info)?;\n    let auction_manager = AuctionManagerV2::from_account_info(auction_manager_info)?;\n    let deposit_box = SafetyDepositBox::from_account_info(safety_deposit_box_info)?;\n\n    assert_signer(payer_info)?;\n\n    assert_owned_by(store_info, program_id)?;\n    assert_owned_by(auction_manager_info, program_id)?;\n    assert_owned_by(auction_info, &store.auction_program)?;\n    assert_owned_by(safety_deposit_box_info, &store.token_vault_program)?;\n\n    assert_derivation(\n        &store.auction_program,\n        auction_info,\n        &[\n            mpl_auction::PREFIX.as_bytes(),\n            store.auction_program.as_ref(),\n            deposit_box.vault.as_ref(),\n        ],\n    )?;\n\n    assert_derivation(\n        &store.token_vault_program,\n        safety_deposit_box_info,\n        &[\n            mpl_token_vault::state::PREFIX.as_bytes(),\n            auction_manager.vault.as_ref(),\n            deposit_box.token_mint.as_ref(),\n        ],\n    )?;\n\n    if deposit_box.vault != auction_manager.vault {\n        return Err(MetaplexError::InvalidSafetyDepositBox.into());\n    }\n\n    if system_info.key != &solana_program::system_program::id() {\n        return Err(MetaplexError::InvalidSystemProgram.into());\n    }\n\n    let bump = assert_derivation(\n        program_id,\n        auction_cache_info,\n        &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            store_info.key.as_ref(),\n            auction_info.key.as_ref(),\n            CACHE.as_bytes(),\n        ],\n    )?;\n\n    let (metadata, _) = Pubkey::find_program_address(\n        &[\n            mpl_token_metadata::state::PREFIX.as_bytes(),\n            store.token_metadata_program.as_ref(),\n            deposit_box.token_mint.as_ref(),\n        ],\n        &store.token_metadata_program,\n    );\n\n    let mut cache: AuctionCache;\n    if auction_cache_info.data_is_empty() {\n        let signer_seeds = &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            store_info.key.as_ref(),\n            auction_info.key.as_ref(),\n            CACHE.as_bytes(),\n            &[bump],\n        ];\n\n        create_or_allocate_account_raw(\n            *program_id,\n            auction_cache_info,\n            rent_info,\n            system_info,\n            payer_info,\n            MAX_AUCTION_CACHE_SIZE,\n            signer_seeds,\n        )?;\n        cache = AuctionCache::from_account_info(auction_cache_info)?;\n        cache.timestamp = clock.unix_timestamp;\n        cache.store = *store_info.key;\n    } else {\n        cache = AuctionCache::from_account_info(auction_cache_info)?;\n    }\n\n    assert_owned_by(auction_cache_info, program_id)?;\n\n    cache.key = Key::AuctionCacheV1;\n    cache.vault = auction_manager.vault;\n    cache.auction_manager = *auction_manager_info.key;\n    cache.auction = *auction_info.key;\n\n    if cache.metadata.len() == MAX_METADATA_PER_CACHE {\n        return Err(MetaplexError::MaxMetadataCacheSizeReached.into());\n    }\n    for key in &cache.metadata {\n        if key == &metadata {\n            return Err(MetaplexError::DuplicateKeyDetected.into());\n        }\n    }\n\n    cache.metadata.push(metadata);\n    cache.serialize(&mut *auction_cache_info.data.borrow_mut())?;\n\n    Ok(())\n}",
        "callstack": "processor::set_auction_cache::process_set_auction_cache",
        "variable": "Todo: Add owner variable",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      },
      {
        "type": "MissingCheckerCve",
        "id": "CHK_CVE_9",
        "title": "is_owner",
        "category": "Missing Owner Check",
        "severity": "Critical",
        "location": "metaplex/program/src/processor/set_store.rs",
        "code": "metaplex/program/src/processor/set_store.rs:122:1: 193:2 \n\tpub fn process_set_store_v2<'a>(\n    program_id: &'a Pubkey,\n    accounts: &'a [AccountInfo<'a>],\n    public: bool,\n    settings_uri: Option<String>,\n) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n\n    let store_info = next_account_info(account_info_iter)?;\n    let store_config_info = next_account_info(account_info_iter)?;\n    let admin_wallet_info = next_account_info(account_info_iter)?;\n    let payer_info = next_account_info(account_info_iter)?;\n    let token_program_info = next_account_info(account_info_iter)?;\n    let token_vault_program_info = next_account_info(account_info_iter)?;\n    let token_metadata_program_info = next_account_info(account_info_iter)?;\n    let auction_program_info = next_account_info(account_info_iter)?;\n    let system_info = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n\n    let res = set_store_logic(\n        public,\n        program_id,\n        auction_program_info,\n        token_vault_program_info,\n        rent_info,\n        system_info,\n        token_metadata_program_info,\n        token_program_info,\n        store_info,\n        admin_wallet_info,\n        payer_info,\n    );\n    if res.is_err() {\n        return res;\n    }\n    if !store_config_info.data_is_empty() {\n        assert_owned_by(store_config_info, program_id)?;\n    }\n    let store_config_bump = assert_derivation(\n        program_id,\n        store_config_info,\n        &[\n            PREFIX.as_bytes(),\n            program_id.as_ref(),\n            CONFIG.as_bytes(),\n            store_info.key.as_ref(),\n        ],\n    )?;\n\n    if store_config_info.data_is_empty() {\n        create_or_allocate_account_raw(\n            *program_id,\n            store_config_info,\n            rent_info,\n            system_info,\n            payer_info,\n            MAX_STORE_CONFIG_V1_SIZE,\n            &[\n                PREFIX.as_bytes(),\n                program_id.as_ref(),\n                CONFIG.as_bytes(),\n                store_info.key.as_ref(),\n                &[store_config_bump],\n            ],\n        )?;\n    }\n    let mut config = StoreConfig::from_account_info(store_config_info)?;\n    config.key = Key::StoreConfigV1;\n    config.settings_uri = settings_uri;\n    config.serialize(&mut *store_config_info.data.borrow_mut())?;\n    Ok(())\n}",
        "callstack": "processor::set_store::process_set_store_v2",
        "variable": "Todo: Add owner variable",
        "status": "UnResolved",
        "description": "Description of the bug here.",
        "link": "GitHub Link to be added.",
        "alleviation": "Some alleviation steps here."
      }
    ]
  }