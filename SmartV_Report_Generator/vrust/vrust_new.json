{
  "id": "VRust",
  "user": "O2Lab VRust Team",
  "crate": "level1",
  "git-loc": "https://github.com/parasol-aser/vrust",
  "timestamp": "1644594260",
  "int_cnt": 2,
  "chk_cnt": 3,
  "typ_cnt": 0,
  "oth_cnt": 1,
  "errors": [
    {
      "type": "IntegerCve",
      "id": "INT_CVE_0",
      "title": "Overflow",
      "category": "Integer Overflow wpa",
      "severity": "Critical",
      "location": "processor::withdraw",
      "code": "level1/src/processor.rs:181:5: 181:50 \n\t**wallet_info.lamports.borrow_mut() -= amount",
      "context": "level1/src/processor.rs:153:1: 189:2 \n\tfn withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {\n    msg!(\"withdraw {}\", amount);\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let destination_info = next_account_info(account_info_iter)?;\n    let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?;\n\n    assert_eq!(wallet_info.owner, program_id);\n    assert_eq!(wallet.authority, *authority_info.key);\n\n    let res = check_assert(authority_info.is_signer);\n    if res.is_ok(){\n        msg!(\"check assert success.\");\n    }\n\n    // if !authority_info.is_signer { // authority_info authority owner admin manager \n    //     return  Err(ProgramError::InsufficientFunds);\n    // }\n\n    // Mitigation:\n    // assert!(authority_info.is_signer);    // assert_eq!(authority_info.is_signer, true);\n    // assert_eq!(authority_info.is_signer, true);\n\n    if amount > **wallet_info.lamports.borrow_mut() {\n        return Err(ProgramError::InsufficientFunds);\n    }\n\n    **wallet_info.lamports.borrow_mut() -= amount;\n    **destination_info.lamports.borrow_mut() += amount;\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
      "callstack": "level1/src/processor.rs",
      "status": "UnResolved",
      "description": "Description of the bug here.",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "IntegerCve",
      "id": "INT_CVE_1",
      "title": "Overflow",
      "category": "Integer Overflow wpa",
      "severity": "Critical",
      "location": "processor::withdraw",
      "code": "level1/src/processor.rs:182:5: 182:55 \n\t**destination_info.lamports.borrow_mut() += amount",
      "context": "level1/src/processor.rs:153:1: 189:2 \n\tfn withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {\n    msg!(\"withdraw {}\", amount);\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let destination_info = next_account_info(account_info_iter)?;\n    let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?;\n\n    assert_eq!(wallet_info.owner, program_id);\n    assert_eq!(wallet.authority, *authority_info.key);\n\n    let res = check_assert(authority_info.is_signer);\n    if res.is_ok(){\n        msg!(\"check assert success.\");\n    }\n\n    // if !authority_info.is_signer { // authority_info authority owner admin manager \n    //     return  Err(ProgramError::InsufficientFunds);\n    // }\n\n    // Mitigation:\n    // assert!(authority_info.is_signer);    // assert_eq!(authority_info.is_signer, true);\n    // assert_eq!(authority_info.is_signer, true);\n\n    if amount > **wallet_info.lamports.borrow_mut() {\n        return Err(ProgramError::InsufficientFunds);\n    }\n\n    **wallet_info.lamports.borrow_mut() -= amount;\n    **destination_info.lamports.borrow_mut() += amount;\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
      "callstack": "level1/src/processor.rs",
      "status": "UnResolved",
      "description": "Description of the bug here.",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "VulnCrateDep",
      "id": "TYP_CVE_0",
      "title": "Vulnerable Dependent Crate Version",
      "category": "Vulnerable crate dependency",
      "severity": "Informational",
      "location": "Cargo.lock",
      "code": "Cargo.lock",
      "callstack": "Cargo.lock",
      "status": "UnResolved",
      "description": "message",
      "link": "GitHub Link to be added.",
      "alleviation": "Update to newer version.",
      "Vulnerable dependent crate": "spl-token",
      "Vulnerable dependent crate version": "3.1.0",
      "Safe version for the vulnerable dependent crate": "3.1.1"
    },
    {
      "type": "MissingCheckerCve",
      "id": "CHK_CVE_0",
      "title": "is_signer",
      "category": "Captured Signer Check",
      "severity": "Informational",
      "location": "level1/src/processor.rs",
      "code": "level1/src/processor.rs:153:1: 189:2 \n\tfn withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {\n    msg!(\"withdraw {}\", amount);\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let destination_info = next_account_info(account_info_iter)?;\n    let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?;\n\n    assert_eq!(wallet_info.owner, program_id);\n    assert_eq!(wallet.authority, *authority_info.key);\n\n    let res = check_assert(authority_info.is_signer);\n    if res.is_ok(){\n        msg!(\"check assert success.\");\n    }\n\n    // if !authority_info.is_signer { // authority_info authority owner admin manager \n    //     return  Err(ProgramError::InsufficientFunds);\n    // }\n\n    // Mitigation:\n    // assert!(authority_info.is_signer);    // assert_eq!(authority_info.is_signer, true);\n    // assert_eq!(authority_info.is_signer, true);\n\n    if amount > **wallet_info.lamports.borrow_mut() {\n        return Err(ProgramError::InsufficientFunds);\n    }\n\n    **wallet_info.lamports.borrow_mut() -= amount;\n    **destination_info.lamports.borrow_mut() += amount;\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
      "callstack": "processor::withdraw",
      "variable": "authority_info",
      "status": "Resolved",
      "description": "Captured is_signer check for function: processor::withdraw\nWe captured an is_signer check for variable: authority_info",
      "link": "https://github.com/parasol-aser/vrust/blob/yifei/patterns/01/README.md",
      "alleviation": "Nothing needs to be done."
    },
    {
      "type": "MissingCheckerCve",
      "id": "CHK_CVE_1",
      "title": "is_owner",
      "category": "Missing Owner Check",
      "severity": "Critical",
      "location": "level1/src/processor.rs",
      "code": "level1/src/processor.rs:28:1: 63:2 \n\tfn initialize(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {\n    msg!(\"init\");\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n    let (wallet_address, wallet_seed) =\n        Pubkey::find_program_address(&[&authority.key.to_bytes()], program_id);\n    let rent = Rent::from_account_info(rent_info)?;\n\n    assert_eq!(*wallet_info.key, wallet_address);\n    assert!(wallet_info.data_is_empty());\n    assert!(authority.is_signer, \"authority must sign!\");\n\n    invoke_signed(\n        &system_instruction::create_account(\n            &authority.key,\n            &wallet_address,\n            rent.minimum_balance(WALLET_LEN as usize),\n            WALLET_LEN,\n            &program_id,\n        ),\n        &[authority.clone(), wallet_info.clone()],\n        &[&[&authority.key.to_bytes(), &[wallet_seed]]],\n    )?;\n\n    let wallet = Wallet {\n        authority: *authority.key,\n    };\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
      "callstack": "processor::initialize",
      "variable": "Todo: Add owner variable",
      "status": "UnResolved",
      "description": "Description of the bug here.",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "MissingCheckerCve",
      "id": "CHK_CVE_2",
      "title": "is_signer",
      "category": "Missing Signer Check",
      "severity": "Major",
      "location": "level1/src/processor.rs",
      "code": "level1/src/processor.rs:28:1: 63:2 \n\tfn initialize(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {\n    msg!(\"init\");\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n    let (wallet_address, wallet_seed) =\n        Pubkey::find_program_address(&[&authority.key.to_bytes()], program_id);\n    let rent = Rent::from_account_info(rent_info)?;\n\n    assert_eq!(*wallet_info.key, wallet_address);\n    assert!(wallet_info.data_is_empty());\n    assert!(authority.is_signer, \"authority must sign!\");\n\n    invoke_signed(\n        &system_instruction::create_account(\n            &authority.key,\n            &wallet_address,\n            rent.minimum_balance(WALLET_LEN as usize),\n            WALLET_LEN,\n            &program_id,\n        ),\n        &[authority.clone(), wallet_info.clone()],\n        &[&[&authority.key.to_bytes(), &[wallet_seed]]],\n    )?;\n\n    let wallet = Wallet {\n        authority: *authority.key,\n    };\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
      "callstack": "processor::initialize",
      "variable": "authority",
      "status": "UnResolved",
      "description": "Missing is_signer check for function: processor::initialize\nWe should add an is_signer check for variable: authority",
      "link": "https://github.com/parasol-aser/vrust/blob/yifei/patterns/01/README.md",
      "alleviation": "The contract should add an is_signer check in this function."
    }
    
  ]
}