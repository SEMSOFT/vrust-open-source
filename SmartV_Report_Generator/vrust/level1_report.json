{
  "id": "VRust",
  "user": "O2Lab VRust Team",
  "crate": "level1",
  "git-loc": "https://github.com/parasol-aser/vrust",
  "timestamp": "1644960186",
  "int_cnt": 4,
  "chk_cnt": 0,
  "typ_cnt": 0,
  "oth_cnt": 9,
  "errors": [
    {
      "type": "IntegerCve",
      "id": "INT_CVE_0",
      "title": "Overflow",
      "category": "Integer Overflow wpa",
      "severity": "Critical",
      "location": "processor::withdraw",
      "code": "level1/src/processor.rs:181:5: 181:50 \n\t**wallet_info.lamports.borrow_mut() -= amount",
      "context": "level1/src/processor.rs:153:1: 189:2 \n\tfn withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {\n    msg!(\"withdraw {}\", amount);\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let destination_info = next_account_info(account_info_iter)?;\n    let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?;\n\n    assert_eq!(wallet_info.owner, program_id);\n    assert_eq!(wallet.authority, *authority_info.key);\n\n    let res = check_assert(authority_info.is_signer);\n    if res.is_ok(){\n        msg!(\"check assert success.\");\n    }\n\n    // if !authority_info.is_signer { // authority_info authority owner admin manager \n    //     return  Err(ProgramError::InsufficientFunds);\n    // }\n\n    // Mitigation:\n    // assert!(authority_info.is_signer);    // assert_eq!(authority_info.is_signer, true);\n    // assert_eq!(authority_info.is_signer, true);\n\n    if amount > **wallet_info.lamports.borrow_mut() {\n        return Err(ProgramError::InsufficientFunds);\n    }\n\n    **wallet_info.lamports.borrow_mut() -= amount;\n    **destination_info.lamports.borrow_mut() += amount;\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
      "callstack": "level1/src/processor.rs",
      "status": "UnResolved",
      "description": "Description of the bug here.",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "IntegerCve",
      "id": "INT_CVE_1",
      "title": "Overflow",
      "category": "Integer Overflow wpa",
      "severity": "Critical",
      "location": "processor::withdraw",
      "code": "level1/src/processor.rs:182:5: 182:55 \n\t**destination_info.lamports.borrow_mut() += amount",
      "context": "level1/src/processor.rs:153:1: 189:2 \n\tfn withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {\n    msg!(\"withdraw {}\", amount);\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let destination_info = next_account_info(account_info_iter)?;\n    let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?;\n\n    assert_eq!(wallet_info.owner, program_id);\n    assert_eq!(wallet.authority, *authority_info.key);\n\n    let res = check_assert(authority_info.is_signer);\n    if res.is_ok(){\n        msg!(\"check assert success.\");\n    }\n\n    // if !authority_info.is_signer { // authority_info authority owner admin manager \n    //     return  Err(ProgramError::InsufficientFunds);\n    // }\n\n    // Mitigation:\n    // assert!(authority_info.is_signer);    // assert_eq!(authority_info.is_signer, true);\n    // assert_eq!(authority_info.is_signer, true);\n\n    if amount > **wallet_info.lamports.borrow_mut() {\n        return Err(ProgramError::InsufficientFunds);\n    }\n\n    **wallet_info.lamports.borrow_mut() -= amount;\n    **destination_info.lamports.borrow_mut() += amount;\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
      "callstack": "level1/src/processor.rs",
      "status": "UnResolved",
      "description": "Description of the bug here.",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "IntegerCve",
      "id": "INT_CVE_2",
      "title": "Overflow",
      "category": "Integer Overflow wpa",
      "severity": "Critical",
      "location": "solana_program::rent::Rent::minimum_balance",
      "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/rent.rs:57:10: 57:76 \n\t((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year)",
      "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
      "callstack": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/rent.rs",
      "status": "UnResolved",
      "description": "Description of the bug here.",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "IntegerCve",
      "id": "INT_CVE_3",
      "title": "Overflow",
      "category": "Integer Overflow wpa",
      "severity": "Critical",
      "location": "solana_program::rent::Rent::minimum_balance",
      "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/rent.rs:57:9: 58:40 \n\t(((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold)",
      "context": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/rent.rs:55:5: 59:6 \n\tpub fn minimum_balance(&self, data_len: usize) -> u64 {\n        let bytes = data_len as u64;\n        (((ACCOUNT_STORAGE_OVERHEAD + bytes) * self.lamports_per_byte_year) as f64\n            * self.exemption_threshold) as u64\n    }",
      "callstack": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/rent.rs",
      "status": "UnResolved",
      "description": "Description of the bug here.",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "InstructionId",
      "id": "TYP_CVE_0",
      "title": "Instruction id not checked error",
      "category": "Instruction id issue",
      "severity": "Critical",
      "location": "level1/src/processor.rs",
      "code": "level1/src/processor.rs:153:1: 189:2 \n\tfn withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {\n    msg!(\"withdraw {}\", amount);\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let destination_info = next_account_info(account_info_iter)?;\n    let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?;\n\n    assert_eq!(wallet_info.owner, program_id);\n    assert_eq!(wallet.authority, *authority_info.key);\n\n    let res = check_assert(authority_info.is_signer);\n    if res.is_ok(){\n        msg!(\"check assert success.\");\n    }\n\n    // if !authority_info.is_signer { // authority_info authority owner admin manager \n    //     return  Err(ProgramError::InsufficientFunds);\n    // }\n\n    // Mitigation:\n    // assert!(authority_info.is_signer);    // assert_eq!(authority_info.is_signer, true);\n    // assert_eq!(authority_info.is_signer, true);\n\n    if amount > **wallet_info.lamports.borrow_mut() {\n        return Err(ProgramError::InsufficientFunds);\n    }\n\n    **wallet_info.lamports.borrow_mut() -= amount;\n    **destination_info.lamports.borrow_mut() += amount;\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
      "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::withdraw(){// level1/src/processor.rs:153:1: 189:2 }\n",
      "status": "UnResolved",
      "description": "message",
      "link": "GitHub Link to be added.",
      "alleviation": "Description of the bug here."
    },
    {
      "type": "InstructionId",
      "id": "TYP_CVE_1",
      "title": "Instruction id not checked error",
      "category": "Instruction id issue",
      "severity": "Critical",
      "location": "level1/src/processor.rs",
      "code": "level1/src/processor.rs:153:1: 189:2 \n\tfn withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {\n    msg!(\"withdraw {}\", amount);\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority_info = next_account_info(account_info_iter)?;\n    let destination_info = next_account_info(account_info_iter)?;\n    let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?;\n\n    assert_eq!(wallet_info.owner, program_id);\n    assert_eq!(wallet.authority, *authority_info.key);\n\n    let res = check_assert(authority_info.is_signer);\n    if res.is_ok(){\n        msg!(\"check assert success.\");\n    }\n\n    // if !authority_info.is_signer { // authority_info authority owner admin manager \n    //     return  Err(ProgramError::InsufficientFunds);\n    // }\n\n    // Mitigation:\n    // assert!(authority_info.is_signer);    // assert_eq!(authority_info.is_signer, true);\n    // assert_eq!(authority_info.is_signer, true);\n\n    if amount > **wallet_info.lamports.borrow_mut() {\n        return Err(ProgramError::InsufficientFunds);\n    }\n\n    **wallet_info.lamports.borrow_mut() -= amount;\n    **destination_info.lamports.borrow_mut() += amount;\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
      "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::withdraw(){// level1/src/processor.rs:153:1: 189:2 }\n",
      "status": "UnResolved",
      "description": "message",
      "link": "GitHub Link to be added.",
      "alleviation": "Description of the bug here."
    },
    {
      "type": "InstructionId",
      "id": "TYP_CVE_2",
      "title": "Instruction id not checked error",
      "category": "Instruction id issue",
      "severity": "Critical",
      "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs",
      "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs:111:5: 115:6 \n\tpub fn try_borrow_mut_data(&self) -> Result<RefMut<&'a mut [u8]>, ProgramError> {\n        self.data\n            .try_borrow_mut()\n            .map_err(|_| ProgramError::AccountBorrowFailed)\n    }",
      "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::deposit(){// level1/src/processor.rs:137:1: 151:2 }\n\t\t\tfn solana_program::program::invoke(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/program.rs:12:1: 14:2 }\n\t\t\t\tfn solana_program::program::invoke_signed(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/program.rs:35:1: 57:2 }\n\t\t\t\t\tfn solana_program::account_info::AccountInfo::<'a>::try_borrow_mut_data(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs:111:5: 115:6 }\n",
      "status": "UnResolved",
      "description": "message",
      "link": "GitHub Link to be added.",
      "alleviation": "Description of the bug here."
    },
    {
      "type": "InstructionId",
      "id": "TYP_CVE_3",
      "title": "Instruction id not checked error",
      "category": "Instruction id issue",
      "severity": "Critical",
      "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs",
      "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs:105:5: 109:6 \n\tpub fn try_borrow_data(&self) -> Result<Ref<&mut [u8]>, ProgramError> {\n        self.data\n            .try_borrow()\n            .map_err(|_| ProgramError::AccountBorrowFailed)\n    }",
      "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::deposit(){// level1/src/processor.rs:137:1: 151:2 }\n\t\t\tfn solana_program::program::invoke(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/program.rs:12:1: 14:2 }\n\t\t\t\tfn solana_program::program::invoke_signed(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/program.rs:35:1: 57:2 }\n\t\t\t\t\tfn solana_program::account_info::AccountInfo::<'a>::try_borrow_data(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs:105:5: 109:6 }\n",
      "status": "UnResolved",
      "description": "message",
      "link": "GitHub Link to be added.",
      "alleviation": "Description of the bug here."
    },
    {
      "type": "InstructionId",
      "id": "TYP_CVE_4",
      "title": "Instruction id not checked error",
      "category": "Instruction id issue",
      "severity": "Critical",
      "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/sysvar/mod.rs",
      "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/sysvar/mod.rs:70:5: 75:6 \n\tfn from_account_info(account_info: &AccountInfo) -> Result<Self, ProgramError> {\n        if !Self::check_id(account_info.unsigned_key()) {\n            return Err(ProgramError::InvalidArgument);\n        }\n        bincode::deserialize(&account_info.data.borrow()).map_err(|_| ProgramError::InvalidArgument)\n    }",
      "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::initialize(){// level1/src/processor.rs:28:1: 63:2 }\n\t\t\tfn solana_program::sysvar::Sysvar::from_account_info(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/sysvar/mod.rs:70:5: 75:6 }\n",
      "status": "UnResolved",
      "description": "message",
      "link": "GitHub Link to be added.",
      "alleviation": "Description of the bug here."
    },
    {
      "type": "InstructionId",
      "id": "TYP_CVE_5",
      "title": "Instruction id not checked error",
      "category": "Instruction id issue",
      "severity": "Critical",
      "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs",
      "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs:85:5: 87:6 \n\tpub fn data_is_empty(&self) -> bool {\n        self.data.borrow().is_empty()\n    }",
      "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::initialize(){// level1/src/processor.rs:28:1: 63:2 }\n\t\t\tfn solana_program::account_info::AccountInfo::<'a>::data_is_empty(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs:85:5: 87:6 }\n",
      "status": "UnResolved",
      "description": "message",
      "link": "GitHub Link to be added.",
      "alleviation": "Description of the bug here."
    },
    {
      "type": "InstructionId",
      "id": "TYP_CVE_6",
      "title": "Instruction id not checked error",
      "category": "Instruction id issue",
      "severity": "Critical",
      "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs",
      "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs:111:5: 115:6 \n\tpub fn try_borrow_mut_data(&self) -> Result<RefMut<&'a mut [u8]>, ProgramError> {\n        self.data\n            .try_borrow_mut()\n            .map_err(|_| ProgramError::AccountBorrowFailed)\n    }",
      "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::initialize(){// level1/src/processor.rs:28:1: 63:2 }\n\t\t\tfn solana_program::program::invoke_signed(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/program.rs:35:1: 57:2 }\n\t\t\t\tfn solana_program::account_info::AccountInfo::<'a>::try_borrow_mut_data(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs:111:5: 115:6 }\n",
      "status": "UnResolved",
      "description": "message",
      "link": "GitHub Link to be added.",
      "alleviation": "Description of the bug here."
    },
    {
      "type": "InstructionId",
      "id": "TYP_CVE_7",
      "title": "Instruction id not checked error",
      "category": "Instruction id issue",
      "severity": "Critical",
      "location": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs",
      "code": "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs:105:5: 109:6 \n\tpub fn try_borrow_data(&self) -> Result<Ref<&mut [u8]>, ProgramError> {\n        self.data\n            .try_borrow()\n            .map_err(|_| ProgramError::AccountBorrowFailed)\n    }",
      "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::initialize(){// level1/src/processor.rs:28:1: 63:2 }\n\t\t\tfn solana_program::program::invoke_signed(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/program.rs:35:1: 57:2 }\n\t\t\t\tfn solana_program::account_info::AccountInfo::<'a>::try_borrow_data(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/account_info.rs:105:5: 109:6 }\n",
      "status": "UnResolved",
      "description": "message",
      "link": "GitHub Link to be added.",
      "alleviation": "Description of the bug here."
    },
    {
      "type": "InstructionId",
      "id": "TYP_CVE_8",
      "title": "Instruction id not checked error",
      "category": "Instruction id issue",
      "severity": "Critical",
      "location": "level1/src/processor.rs",
      "code": "level1/src/processor.rs:28:1: 63:2 \n\tfn initialize(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {\n    msg!(\"init\");\n    let account_info_iter = &mut accounts.iter();\n    let wallet_info = next_account_info(account_info_iter)?;\n    let authority = next_account_info(account_info_iter)?;\n    let rent_info = next_account_info(account_info_iter)?;\n    let (wallet_address, wallet_seed) =\n        Pubkey::find_program_address(&[&authority.key.to_bytes()], program_id);\n    let rent = Rent::from_account_info(rent_info)?;\n\n    assert_eq!(*wallet_info.key, wallet_address);\n    assert!(wallet_info.data_is_empty());\n    assert!(authority.is_signer, \"authority must sign!\");\n\n    invoke_signed(\n        &system_instruction::create_account(\n            &authority.key,\n            &wallet_address,\n            rent.minimum_balance(WALLET_LEN as usize),\n            WALLET_LEN,\n            &program_id,\n        ),\n        &[authority.clone(), wallet_info.clone()],\n        &[&[&authority.key.to_bytes(), &[wallet_seed]]],\n    )?;\n\n    let wallet = Wallet {\n        authority: *authority.key,\n    };\n\n    wallet\n        .serialize(&mut &mut (*wallet_info.data).borrow_mut()[..])\n        .unwrap();\n\n    Ok(())\n}",
      "callstack": "fn entrypoint(){// /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-1.8.2/src/entrypoint.rs:119:9: 126:10 }\n\tfn processor::process_instruction(){// level1/src/processor.rs:16:1: 26:2 }\n\t\tfn processor::initialize(){// level1/src/processor.rs:28:1: 63:2 }\n",
      "status": "UnResolved",
      "description": "message",
      "link": "GitHub Link to be added.",
      "alleviation": "Description of the bug here."
    }
  ]
}