{
  "id": "VRust",
  "user": "O2Lab VRust Team",
  "crate": "mpl_metaplex",
  "git-loc": "https://github.com/parasol-aser/vrust",
  "timestamp": "1644426018",
  "errors": [
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_0",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/processor/redeem_participation_bid.rs:25:1: 27:2 \n\tstruct LegacyAccounts<'a> {\n    pub participation_printing_holding_account_info: &'a AccountInfo<'a>,\n}\nmetaplex/program/src/state.rs:558:1: 566:2 \n\tpub struct ParticipationStateV2 {\n    /// We have this variable below to keep track in the case of the participation NFTs, whose\n    /// income will trickle in over time, how much the artists have in the escrow account and\n    /// how much would/should be owed to them if they try to claim it relative to the winning bids.\n    /// It's  abit tougher than a straightforward bid which has a price attached to it, because\n    /// there are many bids of differing amounts (in the case of GivenForBidPrice) and they dont all\n    /// come in at one time, so this little ledger here keeps track.\n    pub collected_to_accept_payment: u64,\n}\nmetaplex/program/src/instruction.rs:52:1: 55:2 \n\tpub struct RedeemPrintingV2BidArgs {\n    pub edition_offset: u64,\n    pub win_index: u64,\n}\nmetaplex/program/src/instruction.rs:82:1: 85:2 \n\tpub struct SetStoreIndexArgs {\n    pub page: u64,\n    pub offset: u64,\n}\nmetaplex/program/src/state.rs:805:1: 805:42 \n\tpub struct AmountRange(pub u64, pub u64);\nmetaplex/program/src/state.rs:118:1: 122:2 \n\tpub struct CommonWinningIndexReturn {\n    pub amount: u64,\n    pub winning_config_type: WinningConfigType,\n    pub winning_config_item_index: Option<usize>,\n}\nmetaplex/program/src/state.rs:124:1: 128:2 \n\tpub struct PrintingV2CalculationCheckReturn {\n    pub expected_redemptions: u64,\n    pub winning_config_type: WinningConfigType,\n    pub winning_config_item_index: Option<usize>,\n}\nmetaplex/program/src/state.rs:849:1: 853:2 \n\tpub struct AmountCumulativeReturn {\n    pub amount: u64,\n    pub cumulative_amount: u64,\n    pub total_amount: u64,\n}\nmetaplex/program/src/state.rs:101:1: 106:2 \n\tpub struct CommonWinningIndexChecks<'a> {\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub winning_index: usize,\n    pub auction_manager_v1_ignore_claim: bool,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n}\nmetaplex/program/src/deprecated_state.rs:557:1: 575:2 \n\tpub struct ParticipationStateV1 {\n    /// We have this variable below to keep track in the case of the participation NFTs, whose\n    /// income will trickle in over time, how much the artists have in the escrow account and\n    /// how much would/should be owed to them if they try to claim it relative to the winning bids.\n    /// It's  abit tougher than a straightforward bid which has a price attached to it, because\n    /// there are many bids of differing amounts (in the case of GivenForBidPrice) and they dont all\n    /// come in at one time, so this little ledger here keeps track.\n    pub collected_to_accept_payment: u64,\n\n    /// Record of primary sale or not at time of auction creation, set during validation step\n    pub primary_sale_happened: bool,\n\n    pub validated: bool,\n\n    /// NOTE: DEPRECATED.\n    /// An account for printing authorization tokens that are made with the one time use token\n    /// after the auction ends. Provided during validation step.\n    pub printing_authorization_token_account: Option<Pubkey>,\n}\nmetaplex/program/src/state.rs:108:1: 116:2 \n\tpub struct PrintingV2CalculationChecks<'a> {\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub winning_index: usize,\n    pub auction_manager_v1_ignore_claim: bool,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n    pub short_circuit_total: bool,\n    pub edition_offset: u64,\n    pub winners: usize,\n}\nmetaplex/program/src/processor/redeem_participation_bid.rs:29:1: 39:2 \n\tstruct V2Accounts<'a> {\n    pub prize_tracking_ticket_info: &'a AccountInfo<'a>,\n    pub new_metadata_account_info: &'a AccountInfo<'a>,\n    pub new_edition_account_info: &'a AccountInfo<'a>,\n    pub master_edition_account_info: &'a AccountInfo<'a>,\n    pub mint_info: &'a AccountInfo<'a>,\n    pub edition_marker_info: &'a AccountInfo<'a>,\n    pub mint_authority_info: &'a AccountInfo<'a>,\n    pub metadata_account_info: &'a AccountInfo<'a>,\n    pub auction_extended_info: &'a AccountInfo<'a>,\n}\nmetaplex/program/src/utils.rs:683:1: 700:2 \n\tpub struct CommonRedeemFinishArgs<'a> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager: Box<dyn AuctionManager>,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub bidder_metadata_info: &'a AccountInfo<'a>,\n    pub rent_info: &'a AccountInfo<'a>,\n    pub system_info: &'a AccountInfo<'a>,\n    pub payer_info: &'a AccountInfo<'a>,\n    pub bid_redemption_info: &'a AccountInfo<'a>,\n    pub vault_info: &'a AccountInfo<'a>,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n    pub winning_index: Option<usize>,\n    pub redemption_bump_seed: u8,\n    pub bid_redeemed: bool,\n    pub participation_redeemed: bool,\n    pub winning_item_index: Option<usize>,\n    pub overwrite_win_index: Option<usize>,\n}\nmetaplex/program/src/processor/validate_safety_deposit_box_v2.rs:185:1: 203:2 \n\tpub struct SupplyLogicCheckArgs<'a, 'b> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub metadata_info: &'a AccountInfo<'a>,\n    pub edition_info: &'a AccountInfo<'a>,\n    pub metadata_authority_info: &'a AccountInfo<'a>,\n    pub original_authority_lookup_info: &'a AccountInfo<'a>,\n    pub rent_info: &'a AccountInfo<'a>,\n    pub system_info: &'a AccountInfo<'a>,\n    pub payer_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub auction_manager: &'b dyn AuctionManager,\n    pub winning_config_type: &'b WinningConfigType,\n    pub metadata: &'b Metadata,\n    pub safety_deposit: &'b SafetyDepositBox,\n    pub store: &'b Store,\n    pub total_amount_requested: u64,\n}\nmetaplex/program/src/processor/validate_safety_deposit_box_v2.rs:69:1: 89:2 \n\tpub struct CommonCheckArgs<'a, 'b> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub metadata_info: &'a AccountInfo<'a>,\n    pub original_authority_lookup_info: &'a AccountInfo<'a>,\n    pub whitelisted_creator_info: &'a AccountInfo<'a>,\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub edition_info: &'a AccountInfo<'a>,\n    pub vault_info: &'a AccountInfo<'a>,\n    pub mint_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub auction_manager_store_info: &'a AccountInfo<'a>,\n    pub authority_info: &'a AccountInfo<'a>,\n    pub store: &'b Store,\n    pub auction_manager: &'b dyn AuctionManager,\n    pub metadata: &'b Metadata,\n    pub safety_deposit: &'b SafetyDepositBox,\n    pub vault: &'b Vault,\n    pub winning_config_type: &'b WinningConfigType,\n}\nmetaplex/program/src/utils.rs:389:1: 420:2 \n\tpub struct CommonRedeemCheckArgs<'a> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub destination_info: &'a AccountInfo<'a>,\n    pub bid_redemption_info: &'a AccountInfo<'a>,\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub vault_info: &'a AccountInfo<'a>,\n    pub auction_info: &'a AccountInfo<'a>,\n    pub auction_extended_info: Option<&'a AccountInfo<'a>>,\n    pub bidder_metadata_info: &'a AccountInfo<'a>,\n    pub bidder_info: &'a AccountInfo<'a>,\n    pub token_program_info: &'a AccountInfo<'a>,\n    pub token_vault_program_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub store_info: &'a AccountInfo<'a>,\n    pub rent_info: &'a AccountInfo<'a>,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n    pub is_participation: bool,\n    // If this is being called by the auctioneer to pull prizes out they overwrite the win index\n    // they would normally get if they themselves bid for whatever win index they choose.\n    pub overwrite_win_index: Option<usize>,\n    // In newer endpoints, to conserve CPU and make way for 10,000 person auctions,\n    // client must specify win index and then we simply check if the address matches for O(1) lookup vs O(n)\n    // scan. This is an option so older actions which rely on the O(n) lookup because we can't change their call structure\n    // can continue to work.\n    pub user_provided_win_index: Option<Option<usize>>,\n    pub assert_bidder_signer: bool,\n    // For printing v2, the edition pda is what essentially forms a backstop for bad bidders. We do not need this additional\n    // check which isn't accurate anyway when one winning config item has an amount > 1.\n    pub ignore_bid_redeemed_item_check: bool,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: processor::redeem_participation_bid::LegacyAccounts, layout: [&'a solana_program::account_info::AccountInfo<'a>], span: metaplex/program/src/processor/redeem_participation_bid.rs:25:1: 27:2 (#0) }, StructDefLayout { struct_def: state::ParticipationStateV2, layout: [u64], span: metaplex/program/src/state.rs:558:1: 566:2 (#0) }, StructDefLayout { struct_def: instruction::RedeemPrintingV2BidArgs, layout: [u64, u64], span: metaplex/program/src/instruction.rs:52:1: 55:2 (#0) }, StructDefLayout { struct_def: instruction::SetStoreIndexArgs, layout: [u64, u64], span: metaplex/program/src/instruction.rs:82:1: 85:2 (#0) }, StructDefLayout { struct_def: state::AmountRange, layout: [u64, u64], span: metaplex/program/src/state.rs:805:1: 805:42 (#0) }, StructDefLayout { struct_def: state::CommonWinningIndexReturn, layout: [u64, state::WinningConfigType, std::option::Option<usize>], span: metaplex/program/src/state.rs:118:1: 122:2 (#0) }, StructDefLayout { struct_def: state::PrintingV2CalculationCheckReturn, layout: [u64, state::WinningConfigType, std::option::Option<usize>], span: metaplex/program/src/state.rs:124:1: 128:2 (#0) }, StructDefLayout { struct_def: state::AmountCumulativeReturn, layout: [u64, u64, u64], span: metaplex/program/src/state.rs:849:1: 853:2 (#0) }, StructDefLayout { struct_def: state::CommonWinningIndexChecks, layout: [&'a solana_program::account_info::AccountInfo<'a>, usize, bool, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>], span: metaplex/program/src/state.rs:101:1: 106:2 (#0) }, StructDefLayout { struct_def: deprecated_state::ParticipationStateV1, layout: [u64, bool, bool, std::option::Option<solana_program::pubkey::Pubkey>], span: metaplex/program/src/deprecated_state.rs:557:1: 575:2 (#0) }, StructDefLayout { struct_def: state::PrintingV2CalculationChecks, layout: [&'a solana_program::account_info::AccountInfo<'a>, usize, bool, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, bool, u64, usize], span: metaplex/program/src/state.rs:108:1: 116:2 (#0) }, StructDefLayout { struct_def: processor::redeem_participation_bid::V2Accounts, layout: [&'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>], span: metaplex/program/src/processor/redeem_participation_bid.rs:29:1: 39:2 (#0) }, StructDefLayout { struct_def: utils::CommonRedeemFinishArgs, layout: [&'a solana_program::pubkey::Pubkey, std::boxed::Box<(dyn state::AuctionManager + 'static)>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, std::option::Option<usize>, u8, bool, bool, std::option::Option<usize>, std::option::Option<usize>], span: metaplex/program/src/utils.rs:683:1: 700:2 (#0) }, StructDefLayout { struct_def: processor::validate_safety_deposit_box_v2::SupplyLogicCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'b (dyn state::AuctionManager + 'b), &'b state::WinningConfigType, &'b mpl_token_metadata::state::Metadata, &'b mpl_token_vault::state::SafetyDepositBox, &'b state::Store, u64], span: metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:185:1: 203:2 (#0) }, StructDefLayout { struct_def: processor::validate_safety_deposit_box_v2::CommonCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'b state::Store, &'b (dyn state::AuctionManager + 'b), &'b mpl_token_metadata::state::Metadata, &'b mpl_token_vault::state::SafetyDepositBox, &'b mpl_token_vault::state::Vault, &'b state::WinningConfigType], span: metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:69:1: 89:2 (#0) }, StructDefLayout { struct_def: utils::CommonRedeemCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, bool, std::option::Option<usize>, std::option::Option<std::option::Option<usize>>, bool, bool], span: metaplex/program/src/utils.rs:389:1: 420:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_1",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<deprecated_state::AuctionManagerV1 as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/deprecated_state.rs:600:1: 604:2 \n\tpub struct WinningConfig {\n    // For now these are just array-of-array proxies but wanted to make them first class\n    // structs in case we want to attach other top level metadata someday.\n    pub items: Vec<WinningConfigItem>,\n}\nmetaplex/program/src/instruction.rs:75:1: 79:2 \n\tpub struct EndAuctionArgs {\n    /// If the auction was blinded, a revealing price must be specified to release the auction\n    /// winnings.\n    pub reveal: Option<(u64, u64)>,\n}\nmetaplex/program/src/deprecated_state.rs:545:1: 553:2 \n\tpub struct AuctionManagerSettingsV1 {\n    /// The safety deposit box index in the vault containing the winning items, in order of place\n    /// The same index can appear multiple times if that index contains n tokens for n appearances (this will be checked)\n    pub winning_configs: Vec<WinningConfig>,\n\n    /// The participation config is separated because it is structurally a bit different,\n    /// having different options and also because it has no real \"winning place\" in the array.\n    pub participation_config: Option<ParticipationConfigV1>,\n}\nmetaplex/program/src/deprecated_state.rs:608:1: 612:2 \n\tpub struct WinningConfigState {\n    pub items: Vec<WinningConfigStateItem>,\n    /// Ticked to true when money is pushed to accept_payment account from auction bidding pot\n    pub money_pushed_to_accept_payment: bool,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <deprecated_state::AuctionManagerV1 as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: deprecated_state::WinningConfig, layout: [std::vec::Vec<deprecated_state::WinningConfigItem>], span: metaplex/program/src/deprecated_state.rs:600:1: 604:2 (#0) }, StructDefLayout { struct_def: instruction::EndAuctionArgs, layout: [std::option::Option<(u64, u64)>], span: metaplex/program/src/instruction.rs:75:1: 79:2 (#0) }, StructDefLayout { struct_def: deprecated_state::AuctionManagerSettingsV1, layout: [std::vec::Vec<deprecated_state::WinningConfig>, std::option::Option<deprecated_state::ParticipationConfigV1>], span: metaplex/program/src/deprecated_state.rs:545:1: 553:2 (#0) }, StructDefLayout { struct_def: deprecated_state::WinningConfigState, layout: [std::vec::Vec<deprecated_state::WinningConfigStateItem>, bool], span: metaplex/program/src/deprecated_state.rs:608:1: 612:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_2",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/instruction.rs:13:1: 15:2 \n\tpub struct SetStoreArgs {\n    pub public: bool,\n}\nmetaplex/program/src/instruction.rs:24:1: 26:2 \n\tpub struct SetWhitelistedCreatorArgs {\n    pub activated: bool,\n}\nmetaplex/program/src/deprecated_state.rs:624:1: 629:2 \n\tpub struct WinningConfigStateItem {\n    /// Record of primary sale or not at time of auction creation, set during validation step\n    pub primary_sale_happened: bool,\n    /// Ticked to true when a prize is claimed by person who won it\n    pub claimed: bool,\n}\nmetaplex/program/src/instruction.rs:18:1: 21:2 \n\tpub struct SetStoreV2Args {\n    pub public: bool,\n    pub settings_uri: Option<String>,\n}\nmetaplex/program/src/instruction.rs:46:1: 49:2 \n\tpub struct RedeemUnusedWinningConfigItemsAsAuctioneerArgs {\n    pub winning_config_item_index: u8,\n    pub proxy_call: ProxyCallAddress,\n}\nmetaplex/program/src/deprecated_state.rs:616:1: 620:2 \n\tpub struct WinningConfigItem {\n    pub safety_deposit_box_index: u8,\n    pub amount: u8,\n    pub winning_config_type: WinningConfigType,\n}\nmetaplex/program/src/utils.rs:380:1: 387:2 \n\tpub struct CommonRedeemReturn {\n    pub redemption_bump_seed: u8,\n    pub auction_manager: Box<dyn AuctionManager>,\n    pub cancelled: bool,\n    pub rent: Rent,\n    pub win_index: Option<usize>,\n    pub token_metadata_program: Pubkey,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: instruction::SetStoreArgs, layout: [bool], span: metaplex/program/src/instruction.rs:13:1: 15:2 (#0) }, StructDefLayout { struct_def: instruction::SetWhitelistedCreatorArgs, layout: [bool], span: metaplex/program/src/instruction.rs:24:1: 26:2 (#0) }, StructDefLayout { struct_def: deprecated_state::WinningConfigStateItem, layout: [bool, bool], span: metaplex/program/src/deprecated_state.rs:624:1: 629:2 (#0) }, StructDefLayout { struct_def: instruction::SetStoreV2Args, layout: [bool, std::option::Option<std::string::String>], span: metaplex/program/src/instruction.rs:18:1: 21:2 (#0) }, StructDefLayout { struct_def: instruction::RedeemUnusedWinningConfigItemsAsAuctioneerArgs, layout: [u8, instruction::ProxyCallAddress], span: metaplex/program/src/instruction.rs:46:1: 49:2 (#0) }, StructDefLayout { struct_def: deprecated_state::WinningConfigItem, layout: [u8, u8, state::WinningConfigType], span: metaplex/program/src/deprecated_state.rs:616:1: 620:2 (#0) }, StructDefLayout { struct_def: utils::CommonRedeemReturn, layout: [u8, std::boxed::Box<(dyn state::AuctionManager + 'static)>, bool, solana_program::rent::Rent, std::option::Option<usize>, solana_program::pubkey::Pubkey], span: metaplex/program/src/utils.rs:380:1: 387:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_3",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/instruction.rs:24:1: 26:2 \n\tpub struct SetWhitelistedCreatorArgs {\n    pub activated: bool,\n}\nmetaplex/program/src/deprecated_state.rs:624:1: 629:2 \n\tpub struct WinningConfigStateItem {\n    /// Record of primary sale or not at time of auction creation, set during validation step\n    pub primary_sale_happened: bool,\n    /// Ticked to true when a prize is claimed by person who won it\n    pub claimed: bool,\n}\nmetaplex/program/src/instruction.rs:18:1: 21:2 \n\tpub struct SetStoreV2Args {\n    pub public: bool,\n    pub settings_uri: Option<String>,\n}\nmetaplex/program/src/instruction.rs:46:1: 49:2 \n\tpub struct RedeemUnusedWinningConfigItemsAsAuctioneerArgs {\n    pub winning_config_item_index: u8,\n    pub proxy_call: ProxyCallAddress,\n}\nmetaplex/program/src/deprecated_state.rs:616:1: 620:2 \n\tpub struct WinningConfigItem {\n    pub safety_deposit_box_index: u8,\n    pub amount: u8,\n    pub winning_config_type: WinningConfigType,\n}\nmetaplex/program/src/utils.rs:380:1: 387:2 \n\tpub struct CommonRedeemReturn {\n    pub redemption_bump_seed: u8,\n    pub auction_manager: Box<dyn AuctionManager>,\n    pub cancelled: bool,\n    pub rent: Rent,\n    pub win_index: Option<usize>,\n    pub token_metadata_program: Pubkey,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: instruction::SetWhitelistedCreatorArgs, layout: [bool], span: metaplex/program/src/instruction.rs:24:1: 26:2 (#0) }, StructDefLayout { struct_def: deprecated_state::WinningConfigStateItem, layout: [bool, bool], span: metaplex/program/src/deprecated_state.rs:624:1: 629:2 (#0) }, StructDefLayout { struct_def: instruction::SetStoreV2Args, layout: [bool, std::option::Option<std::string::String>], span: metaplex/program/src/instruction.rs:18:1: 21:2 (#0) }, StructDefLayout { struct_def: instruction::RedeemUnusedWinningConfigItemsAsAuctioneerArgs, layout: [u8, instruction::ProxyCallAddress], span: metaplex/program/src/instruction.rs:46:1: 49:2 (#0) }, StructDefLayout { struct_def: deprecated_state::WinningConfigItem, layout: [u8, u8, state::WinningConfigType], span: metaplex/program/src/deprecated_state.rs:616:1: 620:2 (#0) }, StructDefLayout { struct_def: utils::CommonRedeemReturn, layout: [u8, std::boxed::Box<(dyn state::AuctionManager + 'static)>, bool, solana_program::rent::Rent, std::option::Option<usize>, solana_program::pubkey::Pubkey], span: metaplex/program/src/utils.rs:380:1: 387:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_4",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<deprecated_state::AuctionManagerV1 as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/instruction.rs:75:1: 79:2 \n\tpub struct EndAuctionArgs {\n    /// If the auction was blinded, a revealing price must be specified to release the auction\n    /// winnings.\n    pub reveal: Option<(u64, u64)>,\n}\nmetaplex/program/src/deprecated_state.rs:545:1: 553:2 \n\tpub struct AuctionManagerSettingsV1 {\n    /// The safety deposit box index in the vault containing the winning items, in order of place\n    /// The same index can appear multiple times if that index contains n tokens for n appearances (this will be checked)\n    pub winning_configs: Vec<WinningConfig>,\n\n    /// The participation config is separated because it is structurally a bit different,\n    /// having different options and also because it has no real \"winning place\" in the array.\n    pub participation_config: Option<ParticipationConfigV1>,\n}\nmetaplex/program/src/deprecated_state.rs:608:1: 612:2 \n\tpub struct WinningConfigState {\n    pub items: Vec<WinningConfigStateItem>,\n    /// Ticked to true when money is pushed to accept_payment account from auction bidding pot\n    pub money_pushed_to_accept_payment: bool,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <deprecated_state::AuctionManagerV1 as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: instruction::EndAuctionArgs, layout: [std::option::Option<(u64, u64)>], span: metaplex/program/src/instruction.rs:75:1: 79:2 (#0) }, StructDefLayout { struct_def: deprecated_state::AuctionManagerSettingsV1, layout: [std::vec::Vec<deprecated_state::WinningConfig>, std::option::Option<deprecated_state::ParticipationConfigV1>], span: metaplex/program/src/deprecated_state.rs:545:1: 553:2 (#0) }, StructDefLayout { struct_def: deprecated_state::WinningConfigState, layout: [std::vec::Vec<deprecated_state::WinningConfigStateItem>, bool], span: metaplex/program/src/deprecated_state.rs:608:1: 612:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_5",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/state.rs:558:1: 566:2 \n\tpub struct ParticipationStateV2 {\n    /// We have this variable below to keep track in the case of the participation NFTs, whose\n    /// income will trickle in over time, how much the artists have in the escrow account and\n    /// how much would/should be owed to them if they try to claim it relative to the winning bids.\n    /// It's  abit tougher than a straightforward bid which has a price attached to it, because\n    /// there are many bids of differing amounts (in the case of GivenForBidPrice) and they dont all\n    /// come in at one time, so this little ledger here keeps track.\n    pub collected_to_accept_payment: u64,\n}\nmetaplex/program/src/instruction.rs:52:1: 55:2 \n\tpub struct RedeemPrintingV2BidArgs {\n    pub edition_offset: u64,\n    pub win_index: u64,\n}\nmetaplex/program/src/instruction.rs:82:1: 85:2 \n\tpub struct SetStoreIndexArgs {\n    pub page: u64,\n    pub offset: u64,\n}\nmetaplex/program/src/state.rs:805:1: 805:42 \n\tpub struct AmountRange(pub u64, pub u64);\nmetaplex/program/src/state.rs:118:1: 122:2 \n\tpub struct CommonWinningIndexReturn {\n    pub amount: u64,\n    pub winning_config_type: WinningConfigType,\n    pub winning_config_item_index: Option<usize>,\n}\nmetaplex/program/src/state.rs:124:1: 128:2 \n\tpub struct PrintingV2CalculationCheckReturn {\n    pub expected_redemptions: u64,\n    pub winning_config_type: WinningConfigType,\n    pub winning_config_item_index: Option<usize>,\n}\nmetaplex/program/src/state.rs:849:1: 853:2 \n\tpub struct AmountCumulativeReturn {\n    pub amount: u64,\n    pub cumulative_amount: u64,\n    pub total_amount: u64,\n}\nmetaplex/program/src/state.rs:101:1: 106:2 \n\tpub struct CommonWinningIndexChecks<'a> {\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub winning_index: usize,\n    pub auction_manager_v1_ignore_claim: bool,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n}\nmetaplex/program/src/deprecated_state.rs:557:1: 575:2 \n\tpub struct ParticipationStateV1 {\n    /// We have this variable below to keep track in the case of the participation NFTs, whose\n    /// income will trickle in over time, how much the artists have in the escrow account and\n    /// how much would/should be owed to them if they try to claim it relative to the winning bids.\n    /// It's  abit tougher than a straightforward bid which has a price attached to it, because\n    /// there are many bids of differing amounts (in the case of GivenForBidPrice) and they dont all\n    /// come in at one time, so this little ledger here keeps track.\n    pub collected_to_accept_payment: u64,\n\n    /// Record of primary sale or not at time of auction creation, set during validation step\n    pub primary_sale_happened: bool,\n\n    pub validated: bool,\n\n    /// NOTE: DEPRECATED.\n    /// An account for printing authorization tokens that are made with the one time use token\n    /// after the auction ends. Provided during validation step.\n    pub printing_authorization_token_account: Option<Pubkey>,\n}\nmetaplex/program/src/state.rs:108:1: 116:2 \n\tpub struct PrintingV2CalculationChecks<'a> {\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub winning_index: usize,\n    pub auction_manager_v1_ignore_claim: bool,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n    pub short_circuit_total: bool,\n    pub edition_offset: u64,\n    pub winners: usize,\n}\nmetaplex/program/src/processor/redeem_participation_bid.rs:29:1: 39:2 \n\tstruct V2Accounts<'a> {\n    pub prize_tracking_ticket_info: &'a AccountInfo<'a>,\n    pub new_metadata_account_info: &'a AccountInfo<'a>,\n    pub new_edition_account_info: &'a AccountInfo<'a>,\n    pub master_edition_account_info: &'a AccountInfo<'a>,\n    pub mint_info: &'a AccountInfo<'a>,\n    pub edition_marker_info: &'a AccountInfo<'a>,\n    pub mint_authority_info: &'a AccountInfo<'a>,\n    pub metadata_account_info: &'a AccountInfo<'a>,\n    pub auction_extended_info: &'a AccountInfo<'a>,\n}\nmetaplex/program/src/utils.rs:683:1: 700:2 \n\tpub struct CommonRedeemFinishArgs<'a> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager: Box<dyn AuctionManager>,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub bidder_metadata_info: &'a AccountInfo<'a>,\n    pub rent_info: &'a AccountInfo<'a>,\n    pub system_info: &'a AccountInfo<'a>,\n    pub payer_info: &'a AccountInfo<'a>,\n    pub bid_redemption_info: &'a AccountInfo<'a>,\n    pub vault_info: &'a AccountInfo<'a>,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n    pub winning_index: Option<usize>,\n    pub redemption_bump_seed: u8,\n    pub bid_redeemed: bool,\n    pub participation_redeemed: bool,\n    pub winning_item_index: Option<usize>,\n    pub overwrite_win_index: Option<usize>,\n}\nmetaplex/program/src/processor/validate_safety_deposit_box_v2.rs:185:1: 203:2 \n\tpub struct SupplyLogicCheckArgs<'a, 'b> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub metadata_info: &'a AccountInfo<'a>,\n    pub edition_info: &'a AccountInfo<'a>,\n    pub metadata_authority_info: &'a AccountInfo<'a>,\n    pub original_authority_lookup_info: &'a AccountInfo<'a>,\n    pub rent_info: &'a AccountInfo<'a>,\n    pub system_info: &'a AccountInfo<'a>,\n    pub payer_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub auction_manager: &'b dyn AuctionManager,\n    pub winning_config_type: &'b WinningConfigType,\n    pub metadata: &'b Metadata,\n    pub safety_deposit: &'b SafetyDepositBox,\n    pub store: &'b Store,\n    pub total_amount_requested: u64,\n}\nmetaplex/program/src/processor/validate_safety_deposit_box_v2.rs:69:1: 89:2 \n\tpub struct CommonCheckArgs<'a, 'b> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub metadata_info: &'a AccountInfo<'a>,\n    pub original_authority_lookup_info: &'a AccountInfo<'a>,\n    pub whitelisted_creator_info: &'a AccountInfo<'a>,\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub edition_info: &'a AccountInfo<'a>,\n    pub vault_info: &'a AccountInfo<'a>,\n    pub mint_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub auction_manager_store_info: &'a AccountInfo<'a>,\n    pub authority_info: &'a AccountInfo<'a>,\n    pub store: &'b Store,\n    pub auction_manager: &'b dyn AuctionManager,\n    pub metadata: &'b Metadata,\n    pub safety_deposit: &'b SafetyDepositBox,\n    pub vault: &'b Vault,\n    pub winning_config_type: &'b WinningConfigType,\n}\nmetaplex/program/src/utils.rs:389:1: 420:2 \n\tpub struct CommonRedeemCheckArgs<'a> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub destination_info: &'a AccountInfo<'a>,\n    pub bid_redemption_info: &'a AccountInfo<'a>,\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub vault_info: &'a AccountInfo<'a>,\n    pub auction_info: &'a AccountInfo<'a>,\n    pub auction_extended_info: Option<&'a AccountInfo<'a>>,\n    pub bidder_metadata_info: &'a AccountInfo<'a>,\n    pub bidder_info: &'a AccountInfo<'a>,\n    pub token_program_info: &'a AccountInfo<'a>,\n    pub token_vault_program_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub store_info: &'a AccountInfo<'a>,\n    pub rent_info: &'a AccountInfo<'a>,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n    pub is_participation: bool,\n    // If this is being called by the auctioneer to pull prizes out they overwrite the win index\n    // they would normally get if they themselves bid for whatever win index they choose.\n    pub overwrite_win_index: Option<usize>,\n    // In newer endpoints, to conserve CPU and make way for 10,000 person auctions,\n    // client must specify win index and then we simply check if the address matches for O(1) lookup vs O(n)\n    // scan. This is an option so older actions which rely on the O(n) lookup because we can't change their call structure\n    // can continue to work.\n    pub user_provided_win_index: Option<Option<usize>>,\n    pub assert_bidder_signer: bool,\n    // For printing v2, the edition pda is what essentially forms a backstop for bad bidders. We do not need this additional\n    // check which isn't accurate anyway when one winning config item has an amount > 1.\n    pub ignore_bid_redeemed_item_check: bool,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: state::ParticipationStateV2, layout: [u64], span: metaplex/program/src/state.rs:558:1: 566:2 (#0) }, StructDefLayout { struct_def: instruction::RedeemPrintingV2BidArgs, layout: [u64, u64], span: metaplex/program/src/instruction.rs:52:1: 55:2 (#0) }, StructDefLayout { struct_def: instruction::SetStoreIndexArgs, layout: [u64, u64], span: metaplex/program/src/instruction.rs:82:1: 85:2 (#0) }, StructDefLayout { struct_def: state::AmountRange, layout: [u64, u64], span: metaplex/program/src/state.rs:805:1: 805:42 (#0) }, StructDefLayout { struct_def: state::CommonWinningIndexReturn, layout: [u64, state::WinningConfigType, std::option::Option<usize>], span: metaplex/program/src/state.rs:118:1: 122:2 (#0) }, StructDefLayout { struct_def: state::PrintingV2CalculationCheckReturn, layout: [u64, state::WinningConfigType, std::option::Option<usize>], span: metaplex/program/src/state.rs:124:1: 128:2 (#0) }, StructDefLayout { struct_def: state::AmountCumulativeReturn, layout: [u64, u64, u64], span: metaplex/program/src/state.rs:849:1: 853:2 (#0) }, StructDefLayout { struct_def: state::CommonWinningIndexChecks, layout: [&'a solana_program::account_info::AccountInfo<'a>, usize, bool, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>], span: metaplex/program/src/state.rs:101:1: 106:2 (#0) }, StructDefLayout { struct_def: deprecated_state::ParticipationStateV1, layout: [u64, bool, bool, std::option::Option<solana_program::pubkey::Pubkey>], span: metaplex/program/src/deprecated_state.rs:557:1: 575:2 (#0) }, StructDefLayout { struct_def: state::PrintingV2CalculationChecks, layout: [&'a solana_program::account_info::AccountInfo<'a>, usize, bool, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, bool, u64, usize], span: metaplex/program/src/state.rs:108:1: 116:2 (#0) }, StructDefLayout { struct_def: processor::redeem_participation_bid::V2Accounts, layout: [&'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>], span: metaplex/program/src/processor/redeem_participation_bid.rs:29:1: 39:2 (#0) }, StructDefLayout { struct_def: utils::CommonRedeemFinishArgs, layout: [&'a solana_program::pubkey::Pubkey, std::boxed::Box<(dyn state::AuctionManager + 'static)>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, std::option::Option<usize>, u8, bool, bool, std::option::Option<usize>, std::option::Option<usize>], span: metaplex/program/src/utils.rs:683:1: 700:2 (#0) }, StructDefLayout { struct_def: processor::validate_safety_deposit_box_v2::SupplyLogicCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'b (dyn state::AuctionManager + 'b), &'b state::WinningConfigType, &'b mpl_token_metadata::state::Metadata, &'b mpl_token_vault::state::SafetyDepositBox, &'b state::Store, u64], span: metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:185:1: 203:2 (#0) }, StructDefLayout { struct_def: processor::validate_safety_deposit_box_v2::CommonCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'b state::Store, &'b (dyn state::AuctionManager + 'b), &'b mpl_token_metadata::state::Metadata, &'b mpl_token_vault::state::SafetyDepositBox, &'b mpl_token_vault::state::Vault, &'b state::WinningConfigType], span: metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:69:1: 89:2 (#0) }, StructDefLayout { struct_def: utils::CommonRedeemCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, bool, std::option::Option<usize>, std::option::Option<std::option::Option<usize>>, bool, bool], span: metaplex/program/src/utils.rs:389:1: 420:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_6",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<deprecated_state::AuctionManagerV1 as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <state::AuctionManagerV2 as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/state.rs:1469:1: 1473:2 \n\tpub struct BidRedemptionTicket {\n    // With BidRedemptionTicket is easier to hide it's legacy V1/V2 behind an internal facade,\n    // since all of it's values are read directly off the array.\n    pub key: Key,\n}\nmetaplex/program/src/deprecated_state.rs:634:1: 637:2 \n\tpub struct SafetyDepositValidationTicket {\n    pub key: Key,\n    pub address: Pubkey,\n}\nmetaplex/program/src/state.rs:643:1: 646:2 \n\tpub struct OriginalAuthorityLookup {\n    pub key: Key,\n    pub original_authority: Pubkey,\n}\nmetaplex/program/src/state.rs:745:1: 748:2 \n\tpub struct StoreConfig {\n    pub key: Key,\n    pub settings_uri: Option<String>,\n}\nmetaplex/program/src/instruction.rs:63:1: 73:2 \n\tpub struct InitAuctionManagerV2Args {\n    pub amount_type: TupleNumericType,\n    pub length_type: TupleNumericType,\n    // how many ranges you can store in the AuctionWinnerTokenTypeTracker. For a limited edition single, you really\n    // only need 1, for more complex auctions you may need more. Feel free to scale this\n    // with the complexity of your auctions - this thing stores a range of how many unique token types\n    // each range of people gets in the most efficient compressed way possible, but if you don't\n    // give a high enough list length, while you may save space, you may also blow out your struct size while performing\n    // validation and have a failed auction.\n    pub max_ranges: u64,\n}\nmetaplex/program/src/state.rs:570:1: 585:2 \n\tpub struct ParticipationConfigV2 {\n    /// Setups:\n    /// 1. Winners get participation + not charged extra\n    /// 2. Winners dont get participation prize\n    pub winner_constraint: WinningConstraint,\n\n    /// Setups:\n    /// 1. Losers get prize for free\n    /// 2. Losers get prize but pay fixed price\n    /// 3. Losers get prize but pay bid price\n    pub non_winning_constraint: NonWinningConstraint,\n\n    /// Setting this field disconnects the participation prizes price from the bid. Any bid you submit, regardless\n    /// of amount, charges you the same fixed price.\n    pub fixed_price: Option<u64>,\n}\nmetaplex/program/src/state.rs:662:1: 666:2 \n\tpub struct PayoutTicket {\n    pub key: Key,\n    pub recipient: Pubkey,\n    pub amount_paid: u64,\n}\nmetaplex/program/src/state.rs:763:1: 767:2 \n\tpub struct WhitelistedCreator {\n    pub key: Key,\n    pub address: Pubkey,\n    pub activated: bool,\n}\nmetaplex/program/src/deprecated_state.rs:533:1: 541:2 \n\tpub struct AuctionManagerStateV1 {\n    pub status: AuctionManagerStatus,\n    /// When all configs are validated the auction is started and auction manager moves to Running\n    pub winning_config_items_validated: u8,\n\n    pub winning_config_states: Vec<WinningConfigState>,\n\n    pub participation_state: Option<ParticipationStateV1>,\n}\nmetaplex/program/src/deprecated_state.rs:579:1: 596:2 \n\tpub struct ParticipationConfigV1 {\n    /// Setups:\n    /// 1. Winners get participation + not charged extra\n    /// 2. Winners dont get participation prize\n    pub winner_constraint: WinningConstraint,\n\n    /// Setups:\n    /// 1. Losers get prize for free\n    /// 2. Losers get prize but pay fixed price\n    /// 3. Losers get prize but pay bid price\n    pub non_winning_constraint: NonWinningConstraint,\n\n    /// The safety deposit box index in the vault containing the template for the participation prize\n    pub safety_deposit_box_index: u8,\n    /// Setting this field disconnects the participation prizes price from the bid. Any bid you submit, regardless\n    /// of amount, charges you the same fixed price.\n    pub fixed_price: Option<u64>,\n}\nmetaplex/program/src/state.rs:546:1: 554:2 \n\tpub struct AuctionManagerStateV2 {\n    pub status: AuctionManagerStatus,\n    /// When all configs are validated the auction is started and auction manager moves to Running\n    pub safety_config_items_validated: u64,\n    /// how many bids have been pushed to accept payment\n    pub bids_pushed_to_accept_payment: u64,\n\n    pub has_participation: bool,\n}\nmetaplex/program/src/state.rs:682:1: 687:2 \n\tpub struct StoreIndexer {\n    pub key: Key,\n    pub store: Pubkey,\n    pub page: u64,\n    pub auction_caches: Vec<Pubkey>,\n}\nmetaplex/program/src/state.rs:1267:1: 1273:2 \n\tpub struct AuctionWinnerTokenTypeTracker {\n    pub key: Key,\n    pub amount_type: TupleNumericType,\n    pub length_type: TupleNumericType,\n    /// Tuple is (amount of editions or tokens given to people in this range, length of range)\n    pub amount_ranges: Vec<AmountRange>,\n}\nmetaplex/program/src/state.rs:783:1: 789:2 \n\tpub struct PrizeTrackingTicket {\n    pub key: Key,\n    pub metadata: Pubkey,\n    pub supply_snapshot: u64,\n    pub expected_redemptions: u64,\n    pub redemptions: u64,\n}\nmetaplex/program/src/state.rs:726:1: 733:2 \n\tpub struct Store {\n    pub key: Key,\n    pub public: bool,\n    pub auction_program: Pubkey,\n    pub token_vault_program: Pubkey,\n    pub token_metadata_program: Pubkey,\n    pub token_program: Pubkey,\n}\nmetaplex/program/src/state.rs:224:1: 238:2 \n\tpub struct AuctionManagerV2 {\n    pub key: Key,\n\n    pub store: Pubkey,\n\n    pub authority: Pubkey,\n\n    pub auction: Pubkey,\n\n    pub vault: Pubkey,\n\n    pub accept_payment: Pubkey,\n\n    pub state: AuctionManagerStateV2,\n}\nmetaplex/program/src/state.rs:703:1: 711:2 \n\tpub struct AuctionCache {\n    pub key: Key,\n    pub store: Pubkey,\n    pub timestamp: i64,\n    pub metadata: Vec<Pubkey>,\n    pub auction: Pubkey,\n    pub vault: Pubkey,\n    pub auction_manager: Pubkey,\n}\nmetaplex/program/src/deprecated_state.rs:57:1: 76:2 \n\tpub struct AuctionManagerV1 {\n    pub key: Key,\n\n    pub store: Pubkey,\n\n    pub authority: Pubkey,\n\n    pub auction: Pubkey,\n\n    pub vault: Pubkey,\n\n    pub accept_payment: Pubkey,\n\n    pub state: AuctionManagerStateV1,\n\n    pub settings: AuctionManagerSettingsV1,\n\n    /// True if this is only winning configs of one item each, used for optimization in saving.\n    pub straight_shot_optimization: bool,\n}\nmetaplex/program/src/state.rs:831:1: 847:2 \n\tpub struct SafetyDepositConfig {\n    pub key: Key,\n    /// reverse lookup\n    pub auction_manager: Pubkey,\n    // only 255 safety deposits on vault right now but soon this will likely expand.\n    /// safety deposit order\n    pub order: u64,\n    pub winning_config_type: WinningConfigType,\n    pub amount_type: TupleNumericType,\n    pub length_type: TupleNumericType,\n    /// Tuple is (amount of editions or tokens given to people in this range, length of range)\n    pub amount_ranges: Vec<AmountRange>,\n    /// if winning config type is \"Participation\" then you use this to parameterize it.\n    pub participation_config: Option<ParticipationConfigV2>,\n    /// if winning config type is \"Participation\" then you use this to keep track of it.\n    pub participation_state: Option<ParticipationStateV2>,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <deprecated_state::AuctionManagerV1 as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <state::AuctionManagerV2 as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: state::BidRedemptionTicket, layout: [state::Key], span: metaplex/program/src/state.rs:1469:1: 1473:2 (#0) }, StructDefLayout { struct_def: deprecated_state::SafetyDepositValidationTicket, layout: [state::Key, solana_program::pubkey::Pubkey], span: metaplex/program/src/deprecated_state.rs:634:1: 637:2 (#0) }, StructDefLayout { struct_def: state::OriginalAuthorityLookup, layout: [state::Key, solana_program::pubkey::Pubkey], span: metaplex/program/src/state.rs:643:1: 646:2 (#0) }, StructDefLayout { struct_def: state::StoreConfig, layout: [state::Key, std::option::Option<std::string::String>], span: metaplex/program/src/state.rs:745:1: 748:2 (#0) }, StructDefLayout { struct_def: instruction::InitAuctionManagerV2Args, layout: [state::TupleNumericType, state::TupleNumericType, u64], span: metaplex/program/src/instruction.rs:63:1: 73:2 (#0) }, StructDefLayout { struct_def: state::ParticipationConfigV2, layout: [state::WinningConstraint, state::NonWinningConstraint, std::option::Option<u64>], span: metaplex/program/src/state.rs:570:1: 585:2 (#0) }, StructDefLayout { struct_def: state::PayoutTicket, layout: [state::Key, solana_program::pubkey::Pubkey, u64], span: metaplex/program/src/state.rs:662:1: 666:2 (#0) }, StructDefLayout { struct_def: state::WhitelistedCreator, layout: [state::Key, solana_program::pubkey::Pubkey, bool], span: metaplex/program/src/state.rs:763:1: 767:2 (#0) }, StructDefLayout { struct_def: deprecated_state::AuctionManagerStateV1, layout: [state::AuctionManagerStatus, u8, std::vec::Vec<deprecated_state::WinningConfigState>, std::option::Option<deprecated_state::ParticipationStateV1>], span: metaplex/program/src/deprecated_state.rs:533:1: 541:2 (#0) }, StructDefLayout { struct_def: deprecated_state::ParticipationConfigV1, layout: [state::WinningConstraint, state::NonWinningConstraint, u8, std::option::Option<u64>], span: metaplex/program/src/deprecated_state.rs:579:1: 596:2 (#0) }, StructDefLayout { struct_def: state::AuctionManagerStateV2, layout: [state::AuctionManagerStatus, u64, u64, bool], span: metaplex/program/src/state.rs:546:1: 554:2 (#0) }, StructDefLayout { struct_def: state::StoreIndexer, layout: [state::Key, solana_program::pubkey::Pubkey, u64, std::vec::Vec<solana_program::pubkey::Pubkey>], span: metaplex/program/src/state.rs:682:1: 687:2 (#0) }, StructDefLayout { struct_def: state::AuctionWinnerTokenTypeTracker, layout: [state::Key, state::TupleNumericType, state::TupleNumericType, std::vec::Vec<state::AmountRange>], span: metaplex/program/src/state.rs:1267:1: 1273:2 (#0) }, StructDefLayout { struct_def: state::PrizeTrackingTicket, layout: [state::Key, solana_program::pubkey::Pubkey, u64, u64, u64], span: metaplex/program/src/state.rs:783:1: 789:2 (#0) }, StructDefLayout { struct_def: state::Store, layout: [state::Key, bool, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey], span: metaplex/program/src/state.rs:726:1: 733:2 (#0) }, StructDefLayout { struct_def: state::AuctionManagerV2, layout: [state::Key, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, state::AuctionManagerStateV2], span: metaplex/program/src/state.rs:224:1: 238:2 (#0) }, StructDefLayout { struct_def: state::AuctionCache, layout: [state::Key, solana_program::pubkey::Pubkey, i64, std::vec::Vec<solana_program::pubkey::Pubkey>, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey], span: metaplex/program/src/state.rs:703:1: 711:2 (#0) }, StructDefLayout { struct_def: deprecated_state::AuctionManagerV1, layout: [state::Key, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, deprecated_state::AuctionManagerStateV1, deprecated_state::AuctionManagerSettingsV1, bool], span: metaplex/program/src/deprecated_state.rs:57:1: 76:2 (#0) }, StructDefLayout { struct_def: state::SafetyDepositConfig, layout: [state::Key, solana_program::pubkey::Pubkey, u64, state::WinningConfigType, state::TupleNumericType, state::TupleNumericType, std::vec::Vec<state::AmountRange>, std::option::Option<state::ParticipationConfigV2>, std::option::Option<state::ParticipationStateV2>], span: metaplex/program/src/state.rs:831:1: 847:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_7",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/deprecated_state.rs:624:1: 629:2 \n\tpub struct WinningConfigStateItem {\n    /// Record of primary sale or not at time of auction creation, set during validation step\n    pub primary_sale_happened: bool,\n    /// Ticked to true when a prize is claimed by person who won it\n    pub claimed: bool,\n}\nmetaplex/program/src/instruction.rs:46:1: 49:2 \n\tpub struct RedeemUnusedWinningConfigItemsAsAuctioneerArgs {\n    pub winning_config_item_index: u8,\n    pub proxy_call: ProxyCallAddress,\n}\nmetaplex/program/src/deprecated_state.rs:616:1: 620:2 \n\tpub struct WinningConfigItem {\n    pub safety_deposit_box_index: u8,\n    pub amount: u8,\n    pub winning_config_type: WinningConfigType,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: deprecated_state::WinningConfigStateItem, layout: [bool, bool], span: metaplex/program/src/deprecated_state.rs:624:1: 629:2 (#0) }, StructDefLayout { struct_def: instruction::RedeemUnusedWinningConfigItemsAsAuctioneerArgs, layout: [u8, instruction::ProxyCallAddress], span: metaplex/program/src/instruction.rs:46:1: 49:2 (#0) }, StructDefLayout { struct_def: deprecated_state::WinningConfigItem, layout: [u8, u8, state::WinningConfigType], span: metaplex/program/src/deprecated_state.rs:616:1: 620:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_8",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/deprecated_state.rs:634:1: 637:2 \n\tpub struct SafetyDepositValidationTicket {\n    pub key: Key,\n    pub address: Pubkey,\n}\nmetaplex/program/src/state.rs:643:1: 646:2 \n\tpub struct OriginalAuthorityLookup {\n    pub key: Key,\n    pub original_authority: Pubkey,\n}\nmetaplex/program/src/state.rs:662:1: 666:2 \n\tpub struct PayoutTicket {\n    pub key: Key,\n    pub recipient: Pubkey,\n    pub amount_paid: u64,\n}\nmetaplex/program/src/state.rs:763:1: 767:2 \n\tpub struct WhitelistedCreator {\n    pub key: Key,\n    pub address: Pubkey,\n    pub activated: bool,\n}\nmetaplex/program/src/state.rs:682:1: 687:2 \n\tpub struct StoreIndexer {\n    pub key: Key,\n    pub store: Pubkey,\n    pub page: u64,\n    pub auction_caches: Vec<Pubkey>,\n}\nmetaplex/program/src/state.rs:783:1: 789:2 \n\tpub struct PrizeTrackingTicket {\n    pub key: Key,\n    pub metadata: Pubkey,\n    pub supply_snapshot: u64,\n    pub expected_redemptions: u64,\n    pub redemptions: u64,\n}\nmetaplex/program/src/state.rs:224:1: 238:2 \n\tpub struct AuctionManagerV2 {\n    pub key: Key,\n\n    pub store: Pubkey,\n\n    pub authority: Pubkey,\n\n    pub auction: Pubkey,\n\n    pub vault: Pubkey,\n\n    pub accept_payment: Pubkey,\n\n    pub state: AuctionManagerStateV2,\n}\nmetaplex/program/src/state.rs:703:1: 711:2 \n\tpub struct AuctionCache {\n    pub key: Key,\n    pub store: Pubkey,\n    pub timestamp: i64,\n    pub metadata: Vec<Pubkey>,\n    pub auction: Pubkey,\n    pub vault: Pubkey,\n    pub auction_manager: Pubkey,\n}\nmetaplex/program/src/deprecated_state.rs:57:1: 76:2 \n\tpub struct AuctionManagerV1 {\n    pub key: Key,\n\n    pub store: Pubkey,\n\n    pub authority: Pubkey,\n\n    pub auction: Pubkey,\n\n    pub vault: Pubkey,\n\n    pub accept_payment: Pubkey,\n\n    pub state: AuctionManagerStateV1,\n\n    pub settings: AuctionManagerSettingsV1,\n\n    /// True if this is only winning configs of one item each, used for optimization in saving.\n    pub straight_shot_optimization: bool,\n}\nmetaplex/program/src/state.rs:831:1: 847:2 \n\tpub struct SafetyDepositConfig {\n    pub key: Key,\n    /// reverse lookup\n    pub auction_manager: Pubkey,\n    // only 255 safety deposits on vault right now but soon this will likely expand.\n    /// safety deposit order\n    pub order: u64,\n    pub winning_config_type: WinningConfigType,\n    pub amount_type: TupleNumericType,\n    pub length_type: TupleNumericType,\n    /// Tuple is (amount of editions or tokens given to people in this range, length of range)\n    pub amount_ranges: Vec<AmountRange>,\n    /// if winning config type is \"Participation\" then you use this to parameterize it.\n    pub participation_config: Option<ParticipationConfigV2>,\n    /// if winning config type is \"Participation\" then you use this to keep track of it.\n    pub participation_state: Option<ParticipationStateV2>,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: deprecated_state::SafetyDepositValidationTicket, layout: [state::Key, solana_program::pubkey::Pubkey], span: metaplex/program/src/deprecated_state.rs:634:1: 637:2 (#0) }, StructDefLayout { struct_def: state::OriginalAuthorityLookup, layout: [state::Key, solana_program::pubkey::Pubkey], span: metaplex/program/src/state.rs:643:1: 646:2 (#0) }, StructDefLayout { struct_def: state::PayoutTicket, layout: [state::Key, solana_program::pubkey::Pubkey, u64], span: metaplex/program/src/state.rs:662:1: 666:2 (#0) }, StructDefLayout { struct_def: state::WhitelistedCreator, layout: [state::Key, solana_program::pubkey::Pubkey, bool], span: metaplex/program/src/state.rs:763:1: 767:2 (#0) }, StructDefLayout { struct_def: state::StoreIndexer, layout: [state::Key, solana_program::pubkey::Pubkey, u64, std::vec::Vec<solana_program::pubkey::Pubkey>], span: metaplex/program/src/state.rs:682:1: 687:2 (#0) }, StructDefLayout { struct_def: state::PrizeTrackingTicket, layout: [state::Key, solana_program::pubkey::Pubkey, u64, u64, u64], span: metaplex/program/src/state.rs:783:1: 789:2 (#0) }, StructDefLayout { struct_def: state::AuctionManagerV2, layout: [state::Key, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, state::AuctionManagerStateV2], span: metaplex/program/src/state.rs:224:1: 238:2 (#0) }, StructDefLayout { struct_def: state::AuctionCache, layout: [state::Key, solana_program::pubkey::Pubkey, i64, std::vec::Vec<solana_program::pubkey::Pubkey>, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey], span: metaplex/program/src/state.rs:703:1: 711:2 (#0) }, StructDefLayout { struct_def: deprecated_state::AuctionManagerV1, layout: [state::Key, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, deprecated_state::AuctionManagerStateV1, deprecated_state::AuctionManagerSettingsV1, bool], span: metaplex/program/src/deprecated_state.rs:57:1: 76:2 (#0) }, StructDefLayout { struct_def: state::SafetyDepositConfig, layout: [state::Key, solana_program::pubkey::Pubkey, u64, state::WinningConfigType, state::TupleNumericType, state::TupleNumericType, std::vec::Vec<state::AmountRange>, std::option::Option<state::ParticipationConfigV2>, std::option::Option<state::ParticipationStateV2>], span: metaplex/program/src/state.rs:831:1: 847:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_9",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/instruction.rs:46:1: 49:2 \n\tpub struct RedeemUnusedWinningConfigItemsAsAuctioneerArgs {\n    pub winning_config_item_index: u8,\n    pub proxy_call: ProxyCallAddress,\n}\nmetaplex/program/src/deprecated_state.rs:616:1: 620:2 \n\tpub struct WinningConfigItem {\n    pub safety_deposit_box_index: u8,\n    pub amount: u8,\n    pub winning_config_type: WinningConfigType,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: instruction::RedeemUnusedWinningConfigItemsAsAuctioneerArgs, layout: [u8, instruction::ProxyCallAddress], span: metaplex/program/src/instruction.rs:46:1: 49:2 (#0) }, StructDefLayout { struct_def: deprecated_state::WinningConfigItem, layout: [u8, u8, state::WinningConfigType], span: metaplex/program/src/deprecated_state.rs:616:1: 620:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_10",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/instruction.rs:52:1: 55:2 \n\tpub struct RedeemPrintingV2BidArgs {\n    pub edition_offset: u64,\n    pub win_index: u64,\n}\nmetaplex/program/src/instruction.rs:82:1: 85:2 \n\tpub struct SetStoreIndexArgs {\n    pub page: u64,\n    pub offset: u64,\n}\nmetaplex/program/src/state.rs:805:1: 805:42 \n\tpub struct AmountRange(pub u64, pub u64);\nmetaplex/program/src/state.rs:849:1: 853:2 \n\tpub struct AmountCumulativeReturn {\n    pub amount: u64,\n    pub cumulative_amount: u64,\n    pub total_amount: u64,\n}\nmetaplex/program/src/state.rs:101:1: 106:2 \n\tpub struct CommonWinningIndexChecks<'a> {\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub winning_index: usize,\n    pub auction_manager_v1_ignore_claim: bool,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n}\nmetaplex/program/src/state.rs:108:1: 116:2 \n\tpub struct PrintingV2CalculationChecks<'a> {\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub winning_index: usize,\n    pub auction_manager_v1_ignore_claim: bool,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n    pub short_circuit_total: bool,\n    pub edition_offset: u64,\n    pub winners: usize,\n}\nmetaplex/program/src/processor/redeem_participation_bid.rs:29:1: 39:2 \n\tstruct V2Accounts<'a> {\n    pub prize_tracking_ticket_info: &'a AccountInfo<'a>,\n    pub new_metadata_account_info: &'a AccountInfo<'a>,\n    pub new_edition_account_info: &'a AccountInfo<'a>,\n    pub master_edition_account_info: &'a AccountInfo<'a>,\n    pub mint_info: &'a AccountInfo<'a>,\n    pub edition_marker_info: &'a AccountInfo<'a>,\n    pub mint_authority_info: &'a AccountInfo<'a>,\n    pub metadata_account_info: &'a AccountInfo<'a>,\n    pub auction_extended_info: &'a AccountInfo<'a>,\n}\nmetaplex/program/src/processor/validate_safety_deposit_box_v2.rs:185:1: 203:2 \n\tpub struct SupplyLogicCheckArgs<'a, 'b> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub metadata_info: &'a AccountInfo<'a>,\n    pub edition_info: &'a AccountInfo<'a>,\n    pub metadata_authority_info: &'a AccountInfo<'a>,\n    pub original_authority_lookup_info: &'a AccountInfo<'a>,\n    pub rent_info: &'a AccountInfo<'a>,\n    pub system_info: &'a AccountInfo<'a>,\n    pub payer_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub auction_manager: &'b dyn AuctionManager,\n    pub winning_config_type: &'b WinningConfigType,\n    pub metadata: &'b Metadata,\n    pub safety_deposit: &'b SafetyDepositBox,\n    pub store: &'b Store,\n    pub total_amount_requested: u64,\n}\nmetaplex/program/src/processor/validate_safety_deposit_box_v2.rs:69:1: 89:2 \n\tpub struct CommonCheckArgs<'a, 'b> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub metadata_info: &'a AccountInfo<'a>,\n    pub original_authority_lookup_info: &'a AccountInfo<'a>,\n    pub whitelisted_creator_info: &'a AccountInfo<'a>,\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub edition_info: &'a AccountInfo<'a>,\n    pub vault_info: &'a AccountInfo<'a>,\n    pub mint_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub auction_manager_store_info: &'a AccountInfo<'a>,\n    pub authority_info: &'a AccountInfo<'a>,\n    pub store: &'b Store,\n    pub auction_manager: &'b dyn AuctionManager,\n    pub metadata: &'b Metadata,\n    pub safety_deposit: &'b SafetyDepositBox,\n    pub vault: &'b Vault,\n    pub winning_config_type: &'b WinningConfigType,\n}\nmetaplex/program/src/utils.rs:389:1: 420:2 \n\tpub struct CommonRedeemCheckArgs<'a> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub destination_info: &'a AccountInfo<'a>,\n    pub bid_redemption_info: &'a AccountInfo<'a>,\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub vault_info: &'a AccountInfo<'a>,\n    pub auction_info: &'a AccountInfo<'a>,\n    pub auction_extended_info: Option<&'a AccountInfo<'a>>,\n    pub bidder_metadata_info: &'a AccountInfo<'a>,\n    pub bidder_info: &'a AccountInfo<'a>,\n    pub token_program_info: &'a AccountInfo<'a>,\n    pub token_vault_program_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub store_info: &'a AccountInfo<'a>,\n    pub rent_info: &'a AccountInfo<'a>,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n    pub is_participation: bool,\n    // If this is being called by the auctioneer to pull prizes out they overwrite the win index\n    // they would normally get if they themselves bid for whatever win index they choose.\n    pub overwrite_win_index: Option<usize>,\n    // In newer endpoints, to conserve CPU and make way for 10,000 person auctions,\n    // client must specify win index and then we simply check if the address matches for O(1) lookup vs O(n)\n    // scan. This is an option so older actions which rely on the O(n) lookup because we can't change their call structure\n    // can continue to work.\n    pub user_provided_win_index: Option<Option<usize>>,\n    pub assert_bidder_signer: bool,\n    // For printing v2, the edition pda is what essentially forms a backstop for bad bidders. We do not need this additional\n    // check which isn't accurate anyway when one winning config item has an amount > 1.\n    pub ignore_bid_redeemed_item_check: bool,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize, <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: instruction::RedeemPrintingV2BidArgs, layout: [u64, u64], span: metaplex/program/src/instruction.rs:52:1: 55:2 (#0) }, StructDefLayout { struct_def: instruction::SetStoreIndexArgs, layout: [u64, u64], span: metaplex/program/src/instruction.rs:82:1: 85:2 (#0) }, StructDefLayout { struct_def: state::AmountRange, layout: [u64, u64], span: metaplex/program/src/state.rs:805:1: 805:42 (#0) }, StructDefLayout { struct_def: state::AmountCumulativeReturn, layout: [u64, u64, u64], span: metaplex/program/src/state.rs:849:1: 853:2 (#0) }, StructDefLayout { struct_def: state::CommonWinningIndexChecks, layout: [&'a solana_program::account_info::AccountInfo<'a>, usize, bool, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>], span: metaplex/program/src/state.rs:101:1: 106:2 (#0) }, StructDefLayout { struct_def: state::PrintingV2CalculationChecks, layout: [&'a solana_program::account_info::AccountInfo<'a>, usize, bool, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, bool, u64, usize], span: metaplex/program/src/state.rs:108:1: 116:2 (#0) }, StructDefLayout { struct_def: processor::redeem_participation_bid::V2Accounts, layout: [&'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>], span: metaplex/program/src/processor/redeem_participation_bid.rs:29:1: 39:2 (#0) }, StructDefLayout { struct_def: processor::validate_safety_deposit_box_v2::SupplyLogicCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'b (dyn state::AuctionManager + 'b), &'b state::WinningConfigType, &'b mpl_token_metadata::state::Metadata, &'b mpl_token_vault::state::SafetyDepositBox, &'b state::Store, u64], span: metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:185:1: 203:2 (#0) }, StructDefLayout { struct_def: processor::validate_safety_deposit_box_v2::CommonCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'b state::Store, &'b (dyn state::AuctionManager + 'b), &'b mpl_token_metadata::state::Metadata, &'b mpl_token_vault::state::SafetyDepositBox, &'b mpl_token_vault::state::Vault, &'b state::WinningConfigType], span: metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:69:1: 89:2 (#0) }, StructDefLayout { struct_def: utils::CommonRedeemCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, bool, std::option::Option<usize>, std::option::Option<std::option::Option<usize>>, bool, bool], span: metaplex/program/src/utils.rs:389:1: 420:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_11",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/instruction.rs:82:1: 85:2 \n\tpub struct SetStoreIndexArgs {\n    pub page: u64,\n    pub offset: u64,\n}\nmetaplex/program/src/state.rs:805:1: 805:42 \n\tpub struct AmountRange(pub u64, pub u64);\nmetaplex/program/src/state.rs:849:1: 853:2 \n\tpub struct AmountCumulativeReturn {\n    pub amount: u64,\n    pub cumulative_amount: u64,\n    pub total_amount: u64,\n}\nmetaplex/program/src/state.rs:101:1: 106:2 \n\tpub struct CommonWinningIndexChecks<'a> {\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub winning_index: usize,\n    pub auction_manager_v1_ignore_claim: bool,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n}\nmetaplex/program/src/state.rs:108:1: 116:2 \n\tpub struct PrintingV2CalculationChecks<'a> {\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub winning_index: usize,\n    pub auction_manager_v1_ignore_claim: bool,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n    pub short_circuit_total: bool,\n    pub edition_offset: u64,\n    pub winners: usize,\n}\nmetaplex/program/src/processor/redeem_participation_bid.rs:29:1: 39:2 \n\tstruct V2Accounts<'a> {\n    pub prize_tracking_ticket_info: &'a AccountInfo<'a>,\n    pub new_metadata_account_info: &'a AccountInfo<'a>,\n    pub new_edition_account_info: &'a AccountInfo<'a>,\n    pub master_edition_account_info: &'a AccountInfo<'a>,\n    pub mint_info: &'a AccountInfo<'a>,\n    pub edition_marker_info: &'a AccountInfo<'a>,\n    pub mint_authority_info: &'a AccountInfo<'a>,\n    pub metadata_account_info: &'a AccountInfo<'a>,\n    pub auction_extended_info: &'a AccountInfo<'a>,\n}\nmetaplex/program/src/processor/validate_safety_deposit_box_v2.rs:185:1: 203:2 \n\tpub struct SupplyLogicCheckArgs<'a, 'b> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub metadata_info: &'a AccountInfo<'a>,\n    pub edition_info: &'a AccountInfo<'a>,\n    pub metadata_authority_info: &'a AccountInfo<'a>,\n    pub original_authority_lookup_info: &'a AccountInfo<'a>,\n    pub rent_info: &'a AccountInfo<'a>,\n    pub system_info: &'a AccountInfo<'a>,\n    pub payer_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub auction_manager: &'b dyn AuctionManager,\n    pub winning_config_type: &'b WinningConfigType,\n    pub metadata: &'b Metadata,\n    pub safety_deposit: &'b SafetyDepositBox,\n    pub store: &'b Store,\n    pub total_amount_requested: u64,\n}\nmetaplex/program/src/processor/validate_safety_deposit_box_v2.rs:69:1: 89:2 \n\tpub struct CommonCheckArgs<'a, 'b> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub metadata_info: &'a AccountInfo<'a>,\n    pub original_authority_lookup_info: &'a AccountInfo<'a>,\n    pub whitelisted_creator_info: &'a AccountInfo<'a>,\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub edition_info: &'a AccountInfo<'a>,\n    pub vault_info: &'a AccountInfo<'a>,\n    pub mint_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub auction_manager_store_info: &'a AccountInfo<'a>,\n    pub authority_info: &'a AccountInfo<'a>,\n    pub store: &'b Store,\n    pub auction_manager: &'b dyn AuctionManager,\n    pub metadata: &'b Metadata,\n    pub safety_deposit: &'b SafetyDepositBox,\n    pub vault: &'b Vault,\n    pub winning_config_type: &'b WinningConfigType,\n}\nmetaplex/program/src/utils.rs:389:1: 420:2 \n\tpub struct CommonRedeemCheckArgs<'a> {\n    pub program_id: &'a Pubkey,\n    pub auction_manager_info: &'a AccountInfo<'a>,\n    pub safety_deposit_token_store_info: &'a AccountInfo<'a>,\n    pub destination_info: &'a AccountInfo<'a>,\n    pub bid_redemption_info: &'a AccountInfo<'a>,\n    pub safety_deposit_info: &'a AccountInfo<'a>,\n    pub vault_info: &'a AccountInfo<'a>,\n    pub auction_info: &'a AccountInfo<'a>,\n    pub auction_extended_info: Option<&'a AccountInfo<'a>>,\n    pub bidder_metadata_info: &'a AccountInfo<'a>,\n    pub bidder_info: &'a AccountInfo<'a>,\n    pub token_program_info: &'a AccountInfo<'a>,\n    pub token_vault_program_info: &'a AccountInfo<'a>,\n    pub token_metadata_program_info: &'a AccountInfo<'a>,\n    pub store_info: &'a AccountInfo<'a>,\n    pub rent_info: &'a AccountInfo<'a>,\n    pub safety_deposit_config_info: Option<&'a AccountInfo<'a>>,\n    pub is_participation: bool,\n    // If this is being called by the auctioneer to pull prizes out they overwrite the win index\n    // they would normally get if they themselves bid for whatever win index they choose.\n    pub overwrite_win_index: Option<usize>,\n    // In newer endpoints, to conserve CPU and make way for 10,000 person auctions,\n    // client must specify win index and then we simply check if the address matches for O(1) lookup vs O(n)\n    // scan. This is an option so older actions which rely on the O(n) lookup because we can't change their call structure\n    // can continue to work.\n    pub user_provided_win_index: Option<Option<usize>>,\n    pub assert_bidder_signer: bool,\n    // For printing v2, the edition pda is what essentially forms a backstop for bad bidders. We do not need this additional\n    // check which isn't accurate anyway when one winning config item has an amount > 1.\n    pub ignore_bid_redeemed_item_check: bool,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: instruction::SetStoreIndexArgs, layout: [u64, u64], span: metaplex/program/src/instruction.rs:82:1: 85:2 (#0) }, StructDefLayout { struct_def: state::AmountRange, layout: [u64, u64], span: metaplex/program/src/state.rs:805:1: 805:42 (#0) }, StructDefLayout { struct_def: state::AmountCumulativeReturn, layout: [u64, u64, u64], span: metaplex/program/src/state.rs:849:1: 853:2 (#0) }, StructDefLayout { struct_def: state::CommonWinningIndexChecks, layout: [&'a solana_program::account_info::AccountInfo<'a>, usize, bool, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>], span: metaplex/program/src/state.rs:101:1: 106:2 (#0) }, StructDefLayout { struct_def: state::PrintingV2CalculationChecks, layout: [&'a solana_program::account_info::AccountInfo<'a>, usize, bool, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, bool, u64, usize], span: metaplex/program/src/state.rs:108:1: 116:2 (#0) }, StructDefLayout { struct_def: processor::redeem_participation_bid::V2Accounts, layout: [&'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>], span: metaplex/program/src/processor/redeem_participation_bid.rs:29:1: 39:2 (#0) }, StructDefLayout { struct_def: processor::validate_safety_deposit_box_v2::SupplyLogicCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'b (dyn state::AuctionManager + 'b), &'b state::WinningConfigType, &'b mpl_token_metadata::state::Metadata, &'b mpl_token_vault::state::SafetyDepositBox, &'b state::Store, u64], span: metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:185:1: 203:2 (#0) }, StructDefLayout { struct_def: processor::validate_safety_deposit_box_v2::CommonCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'b state::Store, &'b (dyn state::AuctionManager + 'b), &'b mpl_token_metadata::state::Metadata, &'b mpl_token_vault::state::SafetyDepositBox, &'b mpl_token_vault::state::Vault, &'b state::WinningConfigType], span: metaplex/program/src/processor/validate_safety_deposit_box_v2.rs:69:1: 89:2 (#0) }, StructDefLayout { struct_def: utils::CommonRedeemCheckArgs, layout: [&'a solana_program::pubkey::Pubkey, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, &'a solana_program::account_info::AccountInfo<'a>, std::option::Option<&'a solana_program::account_info::AccountInfo<'a>>, bool, std::option::Option<usize>, std::option::Option<std::option::Option<usize>>, bool, bool], span: metaplex/program/src/utils.rs:389:1: 420:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_12",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/state.rs:643:1: 646:2 \n\tpub struct OriginalAuthorityLookup {\n    pub key: Key,\n    pub original_authority: Pubkey,\n}\nmetaplex/program/src/state.rs:662:1: 666:2 \n\tpub struct PayoutTicket {\n    pub key: Key,\n    pub recipient: Pubkey,\n    pub amount_paid: u64,\n}\nmetaplex/program/src/state.rs:763:1: 767:2 \n\tpub struct WhitelistedCreator {\n    pub key: Key,\n    pub address: Pubkey,\n    pub activated: bool,\n}\nmetaplex/program/src/state.rs:682:1: 687:2 \n\tpub struct StoreIndexer {\n    pub key: Key,\n    pub store: Pubkey,\n    pub page: u64,\n    pub auction_caches: Vec<Pubkey>,\n}\nmetaplex/program/src/state.rs:783:1: 789:2 \n\tpub struct PrizeTrackingTicket {\n    pub key: Key,\n    pub metadata: Pubkey,\n    pub supply_snapshot: u64,\n    pub expected_redemptions: u64,\n    pub redemptions: u64,\n}\nmetaplex/program/src/state.rs:224:1: 238:2 \n\tpub struct AuctionManagerV2 {\n    pub key: Key,\n\n    pub store: Pubkey,\n\n    pub authority: Pubkey,\n\n    pub auction: Pubkey,\n\n    pub vault: Pubkey,\n\n    pub accept_payment: Pubkey,\n\n    pub state: AuctionManagerStateV2,\n}\nmetaplex/program/src/state.rs:703:1: 711:2 \n\tpub struct AuctionCache {\n    pub key: Key,\n    pub store: Pubkey,\n    pub timestamp: i64,\n    pub metadata: Vec<Pubkey>,\n    pub auction: Pubkey,\n    pub vault: Pubkey,\n    pub auction_manager: Pubkey,\n}\nmetaplex/program/src/deprecated_state.rs:57:1: 76:2 \n\tpub struct AuctionManagerV1 {\n    pub key: Key,\n\n    pub store: Pubkey,\n\n    pub authority: Pubkey,\n\n    pub auction: Pubkey,\n\n    pub vault: Pubkey,\n\n    pub accept_payment: Pubkey,\n\n    pub state: AuctionManagerStateV1,\n\n    pub settings: AuctionManagerSettingsV1,\n\n    /// True if this is only winning configs of one item each, used for optimization in saving.\n    pub straight_shot_optimization: bool,\n}\nmetaplex/program/src/state.rs:831:1: 847:2 \n\tpub struct SafetyDepositConfig {\n    pub key: Key,\n    /// reverse lookup\n    pub auction_manager: Pubkey,\n    // only 255 safety deposits on vault right now but soon this will likely expand.\n    /// safety deposit order\n    pub order: u64,\n    pub winning_config_type: WinningConfigType,\n    pub amount_type: TupleNumericType,\n    pub length_type: TupleNumericType,\n    /// Tuple is (amount of editions or tokens given to people in this range, length of range)\n    pub amount_ranges: Vec<AmountRange>,\n    /// if winning config type is \"Participation\" then you use this to parameterize it.\n    pub participation_config: Option<ParticipationConfigV2>,\n    /// if winning config type is \"Participation\" then you use this to keep track of it.\n    pub participation_state: Option<ParticipationStateV2>,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: state::OriginalAuthorityLookup, layout: [state::Key, solana_program::pubkey::Pubkey], span: metaplex/program/src/state.rs:643:1: 646:2 (#0) }, StructDefLayout { struct_def: state::PayoutTicket, layout: [state::Key, solana_program::pubkey::Pubkey, u64], span: metaplex/program/src/state.rs:662:1: 666:2 (#0) }, StructDefLayout { struct_def: state::WhitelistedCreator, layout: [state::Key, solana_program::pubkey::Pubkey, bool], span: metaplex/program/src/state.rs:763:1: 767:2 (#0) }, StructDefLayout { struct_def: state::StoreIndexer, layout: [state::Key, solana_program::pubkey::Pubkey, u64, std::vec::Vec<solana_program::pubkey::Pubkey>], span: metaplex/program/src/state.rs:682:1: 687:2 (#0) }, StructDefLayout { struct_def: state::PrizeTrackingTicket, layout: [state::Key, solana_program::pubkey::Pubkey, u64, u64, u64], span: metaplex/program/src/state.rs:783:1: 789:2 (#0) }, StructDefLayout { struct_def: state::AuctionManagerV2, layout: [state::Key, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, state::AuctionManagerStateV2], span: metaplex/program/src/state.rs:224:1: 238:2 (#0) }, StructDefLayout { struct_def: state::AuctionCache, layout: [state::Key, solana_program::pubkey::Pubkey, i64, std::vec::Vec<solana_program::pubkey::Pubkey>, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey], span: metaplex/program/src/state.rs:703:1: 711:2 (#0) }, StructDefLayout { struct_def: deprecated_state::AuctionManagerV1, layout: [state::Key, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, deprecated_state::AuctionManagerStateV1, deprecated_state::AuctionManagerSettingsV1, bool], span: metaplex/program/src/deprecated_state.rs:57:1: 76:2 (#0) }, StructDefLayout { struct_def: state::SafetyDepositConfig, layout: [state::Key, solana_program::pubkey::Pubkey, u64, state::WinningConfigType, state::TupleNumericType, state::TupleNumericType, std::vec::Vec<state::AmountRange>, std::option::Option<state::ParticipationConfigV2>, std::option::Option<state::ParticipationStateV2>], span: metaplex/program/src/state.rs:831:1: 847:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    },
    {
      "type": "TypeConfusion",
      "id": "TYP_CVE_13",
      "title": "is_signer",
      "category": "Type Confusion Vulnerability",
      "severity": "Critical",
      "location": "<instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize",
      "code": "metaplex/program/src/state.rs:662:1: 666:2 \n\tpub struct PayoutTicket {\n    pub key: Key,\n    pub recipient: Pubkey,\n    pub amount_paid: u64,\n}\nmetaplex/program/src/state.rs:682:1: 687:2 \n\tpub struct StoreIndexer {\n    pub key: Key,\n    pub store: Pubkey,\n    pub page: u64,\n    pub auction_caches: Vec<Pubkey>,\n}\nmetaplex/program/src/state.rs:783:1: 789:2 \n\tpub struct PrizeTrackingTicket {\n    pub key: Key,\n    pub metadata: Pubkey,\n    pub supply_snapshot: u64,\n    pub expected_redemptions: u64,\n    pub redemptions: u64,\n}\nmetaplex/program/src/state.rs:703:1: 711:2 \n\tpub struct AuctionCache {\n    pub key: Key,\n    pub store: Pubkey,\n    pub timestamp: i64,\n    pub metadata: Vec<Pubkey>,\n    pub auction: Pubkey,\n    pub vault: Pubkey,\n    pub auction_manager: Pubkey,\n}\nmetaplex/program/src/state.rs:831:1: 847:2 \n\tpub struct SafetyDepositConfig {\n    pub key: Key,\n    /// reverse lookup\n    pub auction_manager: Pubkey,\n    // only 255 safety deposits on vault right now but soon this will likely expand.\n    /// safety deposit order\n    pub order: u64,\n    pub winning_config_type: WinningConfigType,\n    pub amount_type: TupleNumericType,\n    pub length_type: TupleNumericType,\n    /// Tuple is (amount of editions or tokens given to people in this range, length of range)\n    pub amount_ranges: Vec<AmountRange>,\n    /// if winning config type is \"Participation\" then you use this to parameterize it.\n    pub participation_config: Option<ParticipationConfigV2>,\n    /// if winning config type is \"Participation\" then you use this to keep track of it.\n    pub participation_state: Option<ParticipationStateV2>,\n}",
      "callstack": "",
      "status": "UnResolved",
      "description": "Function <instruction::MetaplexInstruction as borsh::BorshDeserialize>::deserialize is vulnerable to type confusion attacks: [StructDefLayout { struct_def: state::PayoutTicket, layout: [state::Key, solana_program::pubkey::Pubkey, u64], span: metaplex/program/src/state.rs:662:1: 666:2 (#0) }, StructDefLayout { struct_def: state::StoreIndexer, layout: [state::Key, solana_program::pubkey::Pubkey, u64, std::vec::Vec<solana_program::pubkey::Pubkey>], span: metaplex/program/src/state.rs:682:1: 687:2 (#0) }, StructDefLayout { struct_def: state::PrizeTrackingTicket, layout: [state::Key, solana_program::pubkey::Pubkey, u64, u64, u64], span: metaplex/program/src/state.rs:783:1: 789:2 (#0) }, StructDefLayout { struct_def: state::AuctionCache, layout: [state::Key, solana_program::pubkey::Pubkey, i64, std::vec::Vec<solana_program::pubkey::Pubkey>, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey, solana_program::pubkey::Pubkey], span: metaplex/program/src/state.rs:703:1: 711:2 (#0) }, StructDefLayout { struct_def: state::SafetyDepositConfig, layout: [state::Key, solana_program::pubkey::Pubkey, u64, state::WinningConfigType, state::TupleNumericType, state::TupleNumericType, std::vec::Vec<state::AmountRange>, std::option::Option<state::ParticipationConfigV2>, std::option::Option<state::ParticipationStateV2>], span: metaplex/program/src/state.rs:831:1: 847:2 (#0) }]!",
      "link": "GitHub Link to be added.",
      "alleviation": "Some alleviation steps here."
    }
  ]
}